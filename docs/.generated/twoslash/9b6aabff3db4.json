{"code":"import { treaty } from '@elysiajs/eden'\nimport type { App } from './server'\n\nconst app = treaty<App>('localhost:3000')\n\napp.\n\n\n\n\n// Call [GET] at '/'\nconst { data } = await app.get()\n\n// Call [PUT] at '/nendoroid/:id'\nconst { data: nendoroid, error } = await app.nendoroid({ id: 1895 }).put({\n    name: 'Skadi',\n    from: 'Arknights'\n})","nodes":[{"type":"hover","text":"(alias) const treaty: <const App extends Elysia<any, any, any, any, any, any, any>>(domain: string | App, config?: Treaty.Config) => Treaty.Create<App>\nimport treaty","start":9,"length":6,"target":"treaty","line":0,"character":9},{"type":"hover","text":"(alias) type App = Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    get: {\n        body: unknown;\n        params: {};\n        query: unknown;\n        headers: unknown;\n        response: {\n            200: \"hi\";\n        };\n    };\n} & {\n    users: {\n        get: {\n            body: unknown;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: string;\n            };\n        };\n    };\n} & {\n    nendoroid: {\n        \":id\": {\n            put: {\n                body: {\n                    name: string;\n                    from: string;\n                };\n                params: {\n                    id: string;\n                };\n                query: unknown;\n                headers: unknown;\n                response: {\n                    200: {\n                        name: string;\n                        from: string;\n                    };\n                    422: {\n                        type: \"validation\";\n                        on: string;\n                        summary?: string;\n                        message?: string;\n                        found?: unknown;\n                        property?: string;\n                        expected?: string;\n                    };\n                };\n            };\n        };\n    };\n} & {\n    ...;\n}, {\n    ...;\n}, {\n    ...;\n}>\nimport App","start":54,"length":3,"target":"App","line":1,"character":14},{"type":"hover","text":"const app: {\n    get: (options?: {\n        headers?: Record<string, unknown> | undefined;\n        query?: Record<string, unknown> | undefined;\n        fetch?: RequestInit | undefined;\n    } | undefined) => Promise<Treaty.TreatyResponse<{\n        200: \"hi\";\n    }>>;\n    users: {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: string;\n        }>>;\n    };\n    nendoroid: ((params: {\n        id: string | number;\n    }) => {\n        put: (body: {\n            name: string;\n            from: string;\n        }, options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<...>;\n        name: {\n            ...;\n        };\n    }) & {};\n}","start":83,"length":3,"target":"app","line":3,"character":6},{"type":"hover","text":"(alias) treaty<Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    get: {\n        body: unknown;\n        params: {};\n        query: unknown;\n        headers: unknown;\n        response: {\n            200: \"hi\";\n        };\n    };\n} & {\n    users: {\n        get: {\n            body: unknown;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: string;\n            };\n        };\n    };\n} & {\n    nendoroid: {\n        \":id\": {\n            put: {\n                body: {\n                    name: string;\n                    from: string;\n                };\n                params: {\n                    id: string;\n                };\n                query: unknown;\n                headers: unknown;\n                response: {\n                    200: {\n                        name: string;\n                        from: string;\n                    };\n                    422: {\n                        type: \"validation\";\n                        on: string;\n                        summary?: string;\n                        message?: string;\n                        found?: unknown;\n                        property?: string;\n                        expected?: string;\n                    };\n                };\n            };\n        };\n    };\n} & {\n    ...;\n}, {\n    ...;\n}, {\n    ...;\n}>>(domain: string | Elysia<...>, config?: Treaty.Config): {\n    ...;\n}\nimport treaty","start":89,"length":6,"target":"treaty","line":3,"character":12},{"type":"hover","text":"(alias) type App = Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    get: {\n        body: unknown;\n        params: {};\n        query: unknown;\n        headers: unknown;\n        response: {\n            200: \"hi\";\n        };\n    };\n} & {\n    users: {\n        get: {\n            body: unknown;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: string;\n            };\n        };\n    };\n} & {\n    nendoroid: {\n        \":id\": {\n            put: {\n                body: {\n                    name: string;\n                    from: string;\n                };\n                params: {\n                    id: string;\n                };\n                query: unknown;\n                headers: unknown;\n                response: {\n                    200: {\n                        name: string;\n                        from: string;\n                    };\n                    422: {\n                        type: \"validation\";\n                        on: string;\n                        summary?: string;\n                        message?: string;\n                        found?: unknown;\n                        property?: string;\n                        expected?: string;\n                    };\n                };\n            };\n        };\n    };\n} & {\n    ...;\n}, {\n    ...;\n}, {\n    ...;\n}>\nimport App","start":96,"length":3,"target":"App","line":3,"character":19},{"type":"hover","text":"const app: {\n    get: (options?: {\n        headers?: Record<string, unknown> | undefined;\n        query?: Record<string, unknown> | undefined;\n        fetch?: RequestInit | undefined;\n    } | undefined) => Promise<Treaty.TreatyResponse<{\n        200: \"hi\";\n    }>>;\n    users: {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: string;\n        }>>;\n    };\n    nendoroid: ((params: {\n        id: string | number;\n    }) => {\n        put: (body: {\n            name: string;\n            from: string;\n        }, options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<...>;\n        name: {\n            ...;\n        };\n    }) & {};\n}","start":120,"length":3,"target":"app","line":5,"character":0},{"type":"completion","start":124,"length":0,"completions":[{"name":"get","kind":"property","kindModifiers":"declare","sortText":"11"},{"name":"nendoroid","kind":"property","kindModifiers":"","sortText":"11"},{"name":"users","kind":"property","kindModifiers":"","sortText":"11"}],"completionsPrefix":".","line":5,"character":4},{"type":"hover","text":"any","start":150,"length":5,"target":"const","line":11,"character":0},{"type":"hover","text":"any","start":158,"length":4,"target":"data","line":11,"character":8},{"type":"hover","text":"const app: {\n    get: (options?: {\n        headers?: Record<string, unknown> | undefined;\n        query?: Record<string, unknown> | undefined;\n        fetch?: RequestInit | undefined;\n    } | undefined) => Promise<Treaty.TreatyResponse<{\n        200: \"hi\";\n    }>>;\n    users: {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: string;\n        }>>;\n    };\n    nendoroid: ((params: {\n        id: string | number;\n    }) => {\n        put: (body: {\n            name: string;\n            from: string;\n        }, options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<...>;\n        name: {\n            ...;\n        };\n    }) & {};\n}","start":173,"length":3,"target":"app","line":11,"character":23},{"type":"hover","text":"(property) get: (options?: {\n    headers?: Record<string, unknown> | undefined;\n    query?: Record<string, unknown> | undefined;\n    fetch?: RequestInit | undefined;\n} | undefined) => Promise<Treaty.TreatyResponse<{\n    200: \"hi\";\n}>>","start":177,"length":3,"target":"get","line":11,"character":27},{"type":"hover","text":"(property) data: {\n    name: string;\n    from: string;\n} | null","start":226,"length":4,"target":"data","line":14,"character":8},{"type":"hover","text":"const nendoroid: {\n    name: string;\n    from: string;\n} | null","start":232,"length":9,"target":"nendoroid","line":14,"character":14},{"type":"hover","text":"const error: {\n    status: 422;\n    value: {\n        type: \"validation\";\n        on: string;\n        summary?: string;\n        message?: string;\n        found?: unknown;\n        property?: string;\n        expected?: string;\n    };\n} | null","start":243,"length":5,"target":"error","line":14,"character":25},{"type":"hover","text":"const app: {\n    get: (options?: {\n        headers?: Record<string, unknown> | undefined;\n        query?: Record<string, unknown> | undefined;\n        fetch?: RequestInit | undefined;\n    } | undefined) => Promise<Treaty.TreatyResponse<{\n        200: \"hi\";\n    }>>;\n    users: {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: string;\n        }>>;\n    };\n    nendoroid: ((params: {\n        id: string | number;\n    }) => {\n        put: (body: {\n            name: string;\n            from: string;\n        }, options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<...>;\n        name: {\n            ...;\n        };\n    }) & {};\n}","start":259,"length":3,"target":"app","line":14,"character":41},{"type":"hover","text":"(property) nendoroid: (params: {\n    id: string | number;\n}) => {\n    put: (body: {\n        name: string;\n        from: string;\n    }, options?: {\n        headers?: Record<string, unknown> | undefined;\n        query?: Record<string, unknown> | undefined;\n        fetch?: RequestInit | undefined;\n    } | undefined) => Promise<Treaty.TreatyResponse<{\n        200: {\n            name: string;\n            from: string;\n        };\n        422: {\n            type: \"validation\";\n            on: string;\n            summary?: string;\n            message?: string;\n            found?: unknown;\n            property?: string;\n            expected?: string;\n        };\n    }>>;\n    name: {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: string;\n            422: {\n                type: \"validation\";\n                ... 5 more ...;\n                expected?: string;\n            };\n        }>>;\n    };\n}","start":263,"length":9,"target":"nendoroid","line":14,"character":45},{"type":"hover","text":"(property) id: string | number","start":275,"length":2,"target":"id","line":14,"character":57},{"type":"hover","text":"(property) put: (body: {\n    name: string;\n    from: string;\n}, options?: {\n    headers?: Record<string, unknown> | undefined;\n    query?: Record<string, unknown> | undefined;\n    fetch?: RequestInit | undefined;\n} | undefined) => Promise<Treaty.TreatyResponse<{\n    200: {\n        name: string;\n        from: string;\n    };\n    422: {\n        type: \"validation\";\n        on: string;\n        summary?: string;\n        message?: string;\n        found?: unknown;\n        property?: string;\n        expected?: string;\n    };\n}>>","start":287,"length":3,"target":"put","line":14,"character":69},{"type":"hover","text":"(property) name: string","start":297,"length":4,"target":"name","line":15,"character":4},{"type":"hover","text":"(property) from: string","start":316,"length":4,"target":"from","line":16,"character":4}],"meta":{"extension":"ts","compilerOptions":{"strict":true,"module":99,"target":99,"allowJs":true,"skipDefaultLibCheck":true,"skipLibCheck":true,"moduleDetection":3,"baseUrl":"/Users/saltyaom/Documents/web/elysia/documentation/","moduleResolution":100},"handbookOptions":{"errors":[],"noErrors":true,"noErrorsCutted":false,"noErrorValidation":false,"noStaticSemanticInfo":false,"showEmit":false,"keepNotations":false},"removals":[[560,567],[542,555],[0,422]],"flagNotations":[{"type":"handbookOptions","name":"noErrors","value":true,"start":542,"end":555}],"virtualFiles":[{"offset":0,"filename":"server.ts","filepath":"/Users/saltyaom/Documents/web/elysia/documentation/server.ts","content":"// @filename: server.ts\nimport { Elysia, t } from 'elysia'\n\nconst app = new Elysia()\n    .get('/', 'hi')\n    .get('/users', () => 'Skadi')\n    .put('/nendoroid/:id', ({ body }) => body, {\n        body: t.Object({\n            name: t.String(),\n            from: t.String()\n        })\n    })\n    .get('/nendoroid/:id/name', () => 'Skadi')\n    .listen(3000)\n\nexport type App = typeof app\n\n","extension":"ts","supportLsp":true},{"offset":386,"filename":"index.ts","filepath":"/Users/saltyaom/Documents/web/elysia/documentation/index.ts","content":"// @filename: index.ts\n// ---cut---\nimport { treaty } from '@elysiajs/eden'\nimport type { App } from './server'\n\nconst app = treaty<App>('localhost:3000')\n\n// @noErrors\napp.\n//  ^|\n\n\n\n\n// Call [GET] at '/'\nconst { data } = await app.get()\n\n// Call [PUT] at '/nendoroid/:id'\nconst { data: nendoroid, error } = await app.nendoroid({ id: 1895 }).put({\n    name: 'Skadi',\n    from: 'Arknights'\n})","extension":"ts","supportLsp":true}],"positionQueries":[],"positionCompletions":[559],"positionHighlights":[]},"queries":[],"completions":[{"type":"completion","start":124,"length":0,"completions":[{"name":"get","kind":"property","kindModifiers":"declare","sortText":"11"},{"name":"nendoroid","kind":"property","kindModifiers":"","sortText":"11"},{"name":"users","kind":"property","kindModifiers":"","sortText":"11"}],"completionsPrefix":".","line":5,"character":4}],"errors":[],"highlights":[],"hovers":[{"type":"hover","text":"(alias) const treaty: <const App extends Elysia<any, any, any, any, any, any, any>>(domain: string | App, config?: Treaty.Config) => Treaty.Create<App>\nimport treaty","start":9,"length":6,"target":"treaty","line":0,"character":9},{"type":"hover","text":"(alias) type App = Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    get: {\n        body: unknown;\n        params: {};\n        query: unknown;\n        headers: unknown;\n        response: {\n            200: \"hi\";\n        };\n    };\n} & {\n    users: {\n        get: {\n            body: unknown;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: string;\n            };\n        };\n    };\n} & {\n    nendoroid: {\n        \":id\": {\n            put: {\n                body: {\n                    name: string;\n                    from: string;\n                };\n                params: {\n                    id: string;\n                };\n                query: unknown;\n                headers: unknown;\n                response: {\n                    200: {\n                        name: string;\n                        from: string;\n                    };\n                    422: {\n                        type: \"validation\";\n                        on: string;\n                        summary?: string;\n                        message?: string;\n                        found?: unknown;\n                        property?: string;\n                        expected?: string;\n                    };\n                };\n            };\n        };\n    };\n} & {\n    ...;\n}, {\n    ...;\n}, {\n    ...;\n}>\nimport App","start":54,"length":3,"target":"App","line":1,"character":14},{"type":"hover","text":"const app: {\n    get: (options?: {\n        headers?: Record<string, unknown> | undefined;\n        query?: Record<string, unknown> | undefined;\n        fetch?: RequestInit | undefined;\n    } | undefined) => Promise<Treaty.TreatyResponse<{\n        200: \"hi\";\n    }>>;\n    users: {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: string;\n        }>>;\n    };\n    nendoroid: ((params: {\n        id: string | number;\n    }) => {\n        put: (body: {\n            name: string;\n            from: string;\n        }, options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<...>;\n        name: {\n            ...;\n        };\n    }) & {};\n}","start":83,"length":3,"target":"app","line":3,"character":6},{"type":"hover","text":"(alias) treaty<Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    get: {\n        body: unknown;\n        params: {};\n        query: unknown;\n        headers: unknown;\n        response: {\n            200: \"hi\";\n        };\n    };\n} & {\n    users: {\n        get: {\n            body: unknown;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: string;\n            };\n        };\n    };\n} & {\n    nendoroid: {\n        \":id\": {\n            put: {\n                body: {\n                    name: string;\n                    from: string;\n                };\n                params: {\n                    id: string;\n                };\n                query: unknown;\n                headers: unknown;\n                response: {\n                    200: {\n                        name: string;\n                        from: string;\n                    };\n                    422: {\n                        type: \"validation\";\n                        on: string;\n                        summary?: string;\n                        message?: string;\n                        found?: unknown;\n                        property?: string;\n                        expected?: string;\n                    };\n                };\n            };\n        };\n    };\n} & {\n    ...;\n}, {\n    ...;\n}, {\n    ...;\n}>>(domain: string | Elysia<...>, config?: Treaty.Config): {\n    ...;\n}\nimport treaty","start":89,"length":6,"target":"treaty","line":3,"character":12},{"type":"hover","text":"(alias) type App = Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    get: {\n        body: unknown;\n        params: {};\n        query: unknown;\n        headers: unknown;\n        response: {\n            200: \"hi\";\n        };\n    };\n} & {\n    users: {\n        get: {\n            body: unknown;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: string;\n            };\n        };\n    };\n} & {\n    nendoroid: {\n        \":id\": {\n            put: {\n                body: {\n                    name: string;\n                    from: string;\n                };\n                params: {\n                    id: string;\n                };\n                query: unknown;\n                headers: unknown;\n                response: {\n                    200: {\n                        name: string;\n                        from: string;\n                    };\n                    422: {\n                        type: \"validation\";\n                        on: string;\n                        summary?: string;\n                        message?: string;\n                        found?: unknown;\n                        property?: string;\n                        expected?: string;\n                    };\n                };\n            };\n        };\n    };\n} & {\n    ...;\n}, {\n    ...;\n}, {\n    ...;\n}>\nimport App","start":96,"length":3,"target":"App","line":3,"character":19},{"type":"hover","text":"const app: {\n    get: (options?: {\n        headers?: Record<string, unknown> | undefined;\n        query?: Record<string, unknown> | undefined;\n        fetch?: RequestInit | undefined;\n    } | undefined) => Promise<Treaty.TreatyResponse<{\n        200: \"hi\";\n    }>>;\n    users: {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: string;\n        }>>;\n    };\n    nendoroid: ((params: {\n        id: string | number;\n    }) => {\n        put: (body: {\n            name: string;\n            from: string;\n        }, options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<...>;\n        name: {\n            ...;\n        };\n    }) & {};\n}","start":120,"length":3,"target":"app","line":5,"character":0},{"type":"hover","text":"any","start":150,"length":5,"target":"const","line":11,"character":0},{"type":"hover","text":"any","start":158,"length":4,"target":"data","line":11,"character":8},{"type":"hover","text":"const app: {\n    get: (options?: {\n        headers?: Record<string, unknown> | undefined;\n        query?: Record<string, unknown> | undefined;\n        fetch?: RequestInit | undefined;\n    } | undefined) => Promise<Treaty.TreatyResponse<{\n        200: \"hi\";\n    }>>;\n    users: {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: string;\n        }>>;\n    };\n    nendoroid: ((params: {\n        id: string | number;\n    }) => {\n        put: (body: {\n            name: string;\n            from: string;\n        }, options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<...>;\n        name: {\n            ...;\n        };\n    }) & {};\n}","start":173,"length":3,"target":"app","line":11,"character":23},{"type":"hover","text":"(property) get: (options?: {\n    headers?: Record<string, unknown> | undefined;\n    query?: Record<string, unknown> | undefined;\n    fetch?: RequestInit | undefined;\n} | undefined) => Promise<Treaty.TreatyResponse<{\n    200: \"hi\";\n}>>","start":177,"length":3,"target":"get","line":11,"character":27},{"type":"hover","text":"(property) data: {\n    name: string;\n    from: string;\n} | null","start":226,"length":4,"target":"data","line":14,"character":8},{"type":"hover","text":"const nendoroid: {\n    name: string;\n    from: string;\n} | null","start":232,"length":9,"target":"nendoroid","line":14,"character":14},{"type":"hover","text":"const error: {\n    status: 422;\n    value: {\n        type: \"validation\";\n        on: string;\n        summary?: string;\n        message?: string;\n        found?: unknown;\n        property?: string;\n        expected?: string;\n    };\n} | null","start":243,"length":5,"target":"error","line":14,"character":25},{"type":"hover","text":"const app: {\n    get: (options?: {\n        headers?: Record<string, unknown> | undefined;\n        query?: Record<string, unknown> | undefined;\n        fetch?: RequestInit | undefined;\n    } | undefined) => Promise<Treaty.TreatyResponse<{\n        200: \"hi\";\n    }>>;\n    users: {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: string;\n        }>>;\n    };\n    nendoroid: ((params: {\n        id: string | number;\n    }) => {\n        put: (body: {\n            name: string;\n            from: string;\n        }, options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<...>;\n        name: {\n            ...;\n        };\n    }) & {};\n}","start":259,"length":3,"target":"app","line":14,"character":41},{"type":"hover","text":"(property) nendoroid: (params: {\n    id: string | number;\n}) => {\n    put: (body: {\n        name: string;\n        from: string;\n    }, options?: {\n        headers?: Record<string, unknown> | undefined;\n        query?: Record<string, unknown> | undefined;\n        fetch?: RequestInit | undefined;\n    } | undefined) => Promise<Treaty.TreatyResponse<{\n        200: {\n            name: string;\n            from: string;\n        };\n        422: {\n            type: \"validation\";\n            on: string;\n            summary?: string;\n            message?: string;\n            found?: unknown;\n            property?: string;\n            expected?: string;\n        };\n    }>>;\n    name: {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: string;\n            422: {\n                type: \"validation\";\n                ... 5 more ...;\n                expected?: string;\n            };\n        }>>;\n    };\n}","start":263,"length":9,"target":"nendoroid","line":14,"character":45},{"type":"hover","text":"(property) id: string | number","start":275,"length":2,"target":"id","line":14,"character":57},{"type":"hover","text":"(property) put: (body: {\n    name: string;\n    from: string;\n}, options?: {\n    headers?: Record<string, unknown> | undefined;\n    query?: Record<string, unknown> | undefined;\n    fetch?: RequestInit | undefined;\n} | undefined) => Promise<Treaty.TreatyResponse<{\n    200: {\n        name: string;\n        from: string;\n    };\n    422: {\n        type: \"validation\";\n        on: string;\n        summary?: string;\n        message?: string;\n        found?: unknown;\n        property?: string;\n        expected?: string;\n    };\n}>>","start":287,"length":3,"target":"put","line":14,"character":69},{"type":"hover","text":"(property) name: string","start":297,"length":4,"target":"name","line":15,"character":4},{"type":"hover","text":"(property) from: string","start":316,"length":4,"target":"from","line":16,"character":4}],"tags":[]}