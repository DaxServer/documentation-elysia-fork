{"code":"import { Elysia } from 'elysia'\n\nconst plugin = new Elysia()\n    .decorate('plugin', 'hi')\n    .get('/plugin', ({ plugin }) => plugin)\n\nconst app = new Elysia()\n    .use(plugin)\n    .get('/', ({ plugin }) => plugin)\n    .listen(3000)","nodes":[{"type":"hover","text":"(alias) class Elysia<const in out BasePath extends string = \"\", const in out Singleton extends SingletonBase = { decorator: {}; store: {}; derive: {}; resolve: {}; }, const in out Definitions extends DefinitionBase = { typebox: {}; error: {}; }, const in out Metadata extends MetadataBase = { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, const out Routes extends RouteBase = {}, const in out Ephemeral extends EphemeralType = { ...; }, const in out Volatile extends EphemeralType = { ...; }>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":9,"length":6,"target":"Elysia","line":0,"character":9},{"type":"hover","text":"const plugin: Elysia<\"\", {\n    decorator: {\n        plugin: string;\n    };\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    plugin: {\n        get: {\n            body: unknown;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: string;\n            };\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>","start":39,"length":6,"target":"plugin","line":2,"character":6},{"type":"hover","text":"(alias) new Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>(config?: ElysiaConfig<\"\"> | undefined): Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":52,"length":6,"target":"Elysia","line":2,"character":19},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.decorate<\"plugin\", string>(name: \"plugin\", value: string): Elysia<\"\", {\n    decorator: {\n        plugin: string;\n    };\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}> (+4 overloads)","docs":"### decorate\nDefine custom method to `Context` accessible for all handler\n\n---","tags":[["example","```typescript\nnew Elysia()\n    .decorate('getDate', () => Date.now())\n    .get('/', (({ getDate }) => getDate())\n```"]],"start":66,"length":8,"target":"decorate","line":3,"character":5},{"type":"hover","text":"(method) Elysia<\"\", { decorator: { plugin: string; }; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.get<\"/plugin\", InputSchema<never>, MergeSchema<UnwrapRoute<InputSchema<never>, {}, \"/plugin\">, MergeSchema<{}, MergeSchema<{}, {}, \"\">, \"\">, \"\">, {}, {\n    decorator: {\n        plugin: string;\n    };\n    store: {};\n    derive: {};\n    resolve: {};\n} & {\n    derive: {};\n    resolve: {};\n}, ({ plugin }: {\n    body: unknown;\n    query: Record<string, string>;\n    params: {};\n    headers: Record<string, string | undefined>;\n    cookie: Record<string, Cookie<string | undefined>>;\n    server: Server | null;\n    ... 8 more ...;\n    plugin: string;\n}) => string>(path: \"/plugin\", handler: ({ plugin }: {\n    body: unknown;\n    query: Record<string, string>;\n    params: {};\n    headers: Record<string, string | undefined>;\n    cookie: Record<string, Cookie<string | undefined>>;\n    server: Server | null;\n    ... 8 more ...;\n    plugin: string;\n}) => string, hook?: LocalHook<...> | undefined): Elysia<...>","docs":"### get\nRegister handler for path with method [GET]\n\n---","tags":[["example","```typescript\nimport { Elysia, t } from 'elysia'\n\nnew Elysia()\n    .get('/', () => 'hi')\n    .get('/with-hook', () => 'hi', {\n        response: t.String()\n    })\n```"]],"start":96,"length":3,"target":"get","line":4,"character":5},{"type":"hover","text":"(parameter) plugin: string","start":114,"length":6,"target":"plugin","line":4,"character":23},{"type":"hover","text":"(parameter) plugin: string","start":127,"length":6,"target":"plugin","line":4,"character":36},{"type":"hover","text":"const app: Elysia<\"\", {\n    decorator: {\n        plugin: string;\n    };\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    plugin: {\n        get: {\n            body: unknown;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: string;\n            };\n        };\n    };\n} & {\n    get: {\n        body: unknown;\n        params: {};\n        query: unknown;\n        headers: unknown;\n        response: {\n            200: string;\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>","start":142,"length":3,"target":"app","line":6,"character":6},{"type":"hover","text":"(alias) new Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>(config?: ElysiaConfig<\"\"> | undefined): Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":152,"length":6,"target":"Elysia","line":6,"character":16},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.use<Elysia<\"\", {\n    decorator: {\n        plugin: string;\n    };\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    plugin: {\n        get: {\n            body: unknown;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: string;\n            };\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>>(instance: MaybePromise<Elysia<\"\", {\n    decorator: {\n        plugin: string;\n    };\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    plugin: {\n        get: {\n            body: unknown;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: string;\n            };\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>>): Elysia<...> (+5 overloads)","docs":"Entire Instance","start":166,"length":3,"target":"use","line":7,"character":5},{"type":"hover","text":"const plugin: Elysia<\"\", {\n    decorator: {\n        plugin: string;\n    };\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    plugin: {\n        get: {\n            body: unknown;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: string;\n            };\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>","start":170,"length":6,"target":"plugin","line":7,"character":9},{"type":"hover","text":"(method) Elysia<\"\", { decorator: { plugin: string; }; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, { plugin: { get: { body: unknown; params: {}; query: unknown; headers: unknown; response: { ...; }; }; }; }, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.get<\"/\", InputSchema<never>, MergeSchema<UnwrapRoute<InputSchema<never>, {}, \"/\">, MergeSchema<{}, MergeSchema<{}, {}, \"\">, \"\">, \"\"> & {}, {}, {\n    decorator: {\n        plugin: string;\n    };\n    store: {};\n    derive: {};\n    resolve: {};\n} & {\n    derive: {};\n    resolve: {};\n}, ({ plugin }: {\n    body: unknown;\n    query: Record<string, string>;\n    params: {};\n    headers: Record<string, string | undefined>;\n    cookie: Record<string, Cookie<string | undefined>>;\n    server: Server | null;\n    redirect: redirect;\n    ... 7 more ...;\n    plugin: string;\n}) => string>(path: \"/\", handler: ({ plugin }: {\n    body: unknown;\n    query: Record<string, string>;\n    params: {};\n    headers: Record<string, string | undefined>;\n    cookie: Record<string, Cookie<string | undefined>>;\n    server: Server | null;\n    redirect: redirect;\n    ... 7 more ...;\n    plugin: string;\n}) => string, hook?: LocalHook<...> | undefined): Elysia<...>","docs":"### get\nRegister handler for path with method [GET]\n\n---","tags":[["example","```typescript\nimport { Elysia, t } from 'elysia'\n\nnew Elysia()\n    .get('/', () => 'hi')\n    .get('/with-hook', () => 'hi', {\n        response: t.String()\n    })\n```"]],"start":183,"length":3,"target":"get","line":8,"character":5},{"type":"hover","text":"(parameter) plugin: string","start":195,"length":6,"target":"plugin","line":8,"character":17},{"type":"query","text":"(parameter) plugin: string","start":195,"length":6,"target":"plugin","line":8,"character":17},{"type":"hover","text":"(parameter) plugin: string","start":208,"length":6,"target":"plugin","line":8,"character":30},{"type":"hover","text":"(property) Elysia<\"\", { decorator: { plugin: string; }; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, { plugin: { get: { body: unknown; params: {}; query: unknown; headers: unknown; response: { ...; }; }; }; } & { ...; }, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.listen: (options: string | number | Partial<Serve>, callback?: ListenCallback) => Elysia<\"\", {\n    decorator: {\n        plugin: string;\n    };\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    plugin: {\n        get: {\n            body: unknown;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: string;\n            };\n        };\n    };\n} & {\n    get: {\n        body: unknown;\n        params: {};\n        query: unknown;\n        headers: unknown;\n        response: {\n            200: string;\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>","docs":"### listen\nAssign current instance to port and start serving\n\n---","tags":[["example","```typescript\nnew Elysia()\n    .get(\"/\", () => 'hi')\n    .listen(3000)\n```"]],"start":221,"length":6,"target":"listen","line":9,"character":5}],"meta":{"extension":"ts","compilerOptions":{"strict":true,"module":99,"target":99,"allowJs":true,"skipDefaultLibCheck":true,"skipLibCheck":true,"moduleDetection":3,"baseUrl":"/Users/saltyaom/Documents/web/elysia/documentation/","moduleResolution":100},"handbookOptions":{"errors":[],"noErrors":false,"noErrorsCutted":false,"noErrorValidation":false,"noStaticSemanticInfo":false,"showEmit":false,"keepNotations":false},"removals":[[216,237]],"flagNotations":[],"virtualFiles":[{"offset":0,"filename":"index.ts","filepath":"/Users/saltyaom/Documents/web/elysia/documentation/index.ts","content":"import { Elysia } from 'elysia'\n\nconst plugin = new Elysia()\n    .decorate('plugin', 'hi')\n    .get('/plugin', ({ plugin }) => plugin)\n\nconst app = new Elysia()\n    .use(plugin)\n    .get('/', ({ plugin }) => plugin)\n               // ^?\n    .listen(3000)","extension":"ts","supportLsp":true}],"positionQueries":[196],"positionCompletions":[],"positionHighlights":[]},"queries":[{"type":"query","text":"(parameter) plugin: string","start":195,"length":6,"target":"plugin","line":8,"character":17}],"completions":[],"errors":[],"highlights":[],"hovers":[{"type":"hover","text":"(alias) class Elysia<const in out BasePath extends string = \"\", const in out Singleton extends SingletonBase = { decorator: {}; store: {}; derive: {}; resolve: {}; }, const in out Definitions extends DefinitionBase = { typebox: {}; error: {}; }, const in out Metadata extends MetadataBase = { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, const out Routes extends RouteBase = {}, const in out Ephemeral extends EphemeralType = { ...; }, const in out Volatile extends EphemeralType = { ...; }>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":9,"length":6,"target":"Elysia","line":0,"character":9},{"type":"hover","text":"const plugin: Elysia<\"\", {\n    decorator: {\n        plugin: string;\n    };\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    plugin: {\n        get: {\n            body: unknown;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: string;\n            };\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>","start":39,"length":6,"target":"plugin","line":2,"character":6},{"type":"hover","text":"(alias) new Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>(config?: ElysiaConfig<\"\"> | undefined): Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":52,"length":6,"target":"Elysia","line":2,"character":19},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.decorate<\"plugin\", string>(name: \"plugin\", value: string): Elysia<\"\", {\n    decorator: {\n        plugin: string;\n    };\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}> (+4 overloads)","docs":"### decorate\nDefine custom method to `Context` accessible for all handler\n\n---","tags":[["example","```typescript\nnew Elysia()\n    .decorate('getDate', () => Date.now())\n    .get('/', (({ getDate }) => getDate())\n```"]],"start":66,"length":8,"target":"decorate","line":3,"character":5},{"type":"hover","text":"(method) Elysia<\"\", { decorator: { plugin: string; }; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.get<\"/plugin\", InputSchema<never>, MergeSchema<UnwrapRoute<InputSchema<never>, {}, \"/plugin\">, MergeSchema<{}, MergeSchema<{}, {}, \"\">, \"\">, \"\">, {}, {\n    decorator: {\n        plugin: string;\n    };\n    store: {};\n    derive: {};\n    resolve: {};\n} & {\n    derive: {};\n    resolve: {};\n}, ({ plugin }: {\n    body: unknown;\n    query: Record<string, string>;\n    params: {};\n    headers: Record<string, string | undefined>;\n    cookie: Record<string, Cookie<string | undefined>>;\n    server: Server | null;\n    ... 8 more ...;\n    plugin: string;\n}) => string>(path: \"/plugin\", handler: ({ plugin }: {\n    body: unknown;\n    query: Record<string, string>;\n    params: {};\n    headers: Record<string, string | undefined>;\n    cookie: Record<string, Cookie<string | undefined>>;\n    server: Server | null;\n    ... 8 more ...;\n    plugin: string;\n}) => string, hook?: LocalHook<...> | undefined): Elysia<...>","docs":"### get\nRegister handler for path with method [GET]\n\n---","tags":[["example","```typescript\nimport { Elysia, t } from 'elysia'\n\nnew Elysia()\n    .get('/', () => 'hi')\n    .get('/with-hook', () => 'hi', {\n        response: t.String()\n    })\n```"]],"start":96,"length":3,"target":"get","line":4,"character":5},{"type":"hover","text":"(parameter) plugin: string","start":114,"length":6,"target":"plugin","line":4,"character":23},{"type":"hover","text":"(parameter) plugin: string","start":127,"length":6,"target":"plugin","line":4,"character":36},{"type":"hover","text":"const app: Elysia<\"\", {\n    decorator: {\n        plugin: string;\n    };\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    plugin: {\n        get: {\n            body: unknown;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: string;\n            };\n        };\n    };\n} & {\n    get: {\n        body: unknown;\n        params: {};\n        query: unknown;\n        headers: unknown;\n        response: {\n            200: string;\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>","start":142,"length":3,"target":"app","line":6,"character":6},{"type":"hover","text":"(alias) new Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>(config?: ElysiaConfig<\"\"> | undefined): Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":152,"length":6,"target":"Elysia","line":6,"character":16},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.use<Elysia<\"\", {\n    decorator: {\n        plugin: string;\n    };\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    plugin: {\n        get: {\n            body: unknown;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: string;\n            };\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>>(instance: MaybePromise<Elysia<\"\", {\n    decorator: {\n        plugin: string;\n    };\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    plugin: {\n        get: {\n            body: unknown;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: string;\n            };\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>>): Elysia<...> (+5 overloads)","docs":"Entire Instance","start":166,"length":3,"target":"use","line":7,"character":5},{"type":"hover","text":"const plugin: Elysia<\"\", {\n    decorator: {\n        plugin: string;\n    };\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    plugin: {\n        get: {\n            body: unknown;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: string;\n            };\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>","start":170,"length":6,"target":"plugin","line":7,"character":9},{"type":"hover","text":"(method) Elysia<\"\", { decorator: { plugin: string; }; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, { plugin: { get: { body: unknown; params: {}; query: unknown; headers: unknown; response: { ...; }; }; }; }, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.get<\"/\", InputSchema<never>, MergeSchema<UnwrapRoute<InputSchema<never>, {}, \"/\">, MergeSchema<{}, MergeSchema<{}, {}, \"\">, \"\">, \"\"> & {}, {}, {\n    decorator: {\n        plugin: string;\n    };\n    store: {};\n    derive: {};\n    resolve: {};\n} & {\n    derive: {};\n    resolve: {};\n}, ({ plugin }: {\n    body: unknown;\n    query: Record<string, string>;\n    params: {};\n    headers: Record<string, string | undefined>;\n    cookie: Record<string, Cookie<string | undefined>>;\n    server: Server | null;\n    redirect: redirect;\n    ... 7 more ...;\n    plugin: string;\n}) => string>(path: \"/\", handler: ({ plugin }: {\n    body: unknown;\n    query: Record<string, string>;\n    params: {};\n    headers: Record<string, string | undefined>;\n    cookie: Record<string, Cookie<string | undefined>>;\n    server: Server | null;\n    redirect: redirect;\n    ... 7 more ...;\n    plugin: string;\n}) => string, hook?: LocalHook<...> | undefined): Elysia<...>","docs":"### get\nRegister handler for path with method [GET]\n\n---","tags":[["example","```typescript\nimport { Elysia, t } from 'elysia'\n\nnew Elysia()\n    .get('/', () => 'hi')\n    .get('/with-hook', () => 'hi', {\n        response: t.String()\n    })\n```"]],"start":183,"length":3,"target":"get","line":8,"character":5},{"type":"hover","text":"(parameter) plugin: string","start":195,"length":6,"target":"plugin","line":8,"character":17},{"type":"hover","text":"(parameter) plugin: string","start":208,"length":6,"target":"plugin","line":8,"character":30},{"type":"hover","text":"(property) Elysia<\"\", { decorator: { plugin: string; }; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, { plugin: { get: { body: unknown; params: {}; query: unknown; headers: unknown; response: { ...; }; }; }; } & { ...; }, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.listen: (options: string | number | Partial<Serve>, callback?: ListenCallback) => Elysia<\"\", {\n    decorator: {\n        plugin: string;\n    };\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    plugin: {\n        get: {\n            body: unknown;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: string;\n            };\n        };\n    };\n} & {\n    get: {\n        body: unknown;\n        params: {};\n        query: unknown;\n        headers: unknown;\n        response: {\n            200: string;\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>","docs":"### listen\nAssign current instance to port and start serving\n\n---","tags":[["example","```typescript\nnew Elysia()\n    .get(\"/\", () => 'hi')\n    .listen(3000)\n```"]],"start":221,"length":6,"target":"listen","line":9,"character":5}],"tags":[]}