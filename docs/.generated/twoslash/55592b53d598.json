{"code":"// client.ts\nimport { treaty } from '@elysiajs/eden'\nimport type { App } from './server' // [!code ++]\n\nconst app = treaty<App>('localhost:3000')\n\n// response type: 'Hi Elysia'\nconst { data, error } = await app.hi.get()\n","nodes":[{"type":"hover","text":"(alias) const treaty: <const App extends Elysia<any, any, any, any, any, any, any>>(domain: string | App, config?: Treaty.Config) => Treaty.Create<App>\nimport treaty","start":22,"length":6,"target":"treaty","line":1,"character":9},{"type":"hover","text":"(alias) type App = Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    hi: {\n        get: {\n            body: unknown;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: string;\n            };\n        };\n    };\n} & {\n    id: {\n        \":id\": {\n            get: {\n                body: unknown;\n                params: {\n                    id: string;\n                };\n                query: unknown;\n                headers: unknown;\n                response: {\n                    200: string;\n                    422: {\n                        type: \"validation\";\n                        on: string;\n                        summary?: string;\n                        message?: string;\n                        found?: unknown;\n                        property?: string;\n                        expected?: string;\n                    };\n                };\n            };\n        };\n    };\n} & {\n    mirror: {\n        post: {\n            body: {\n                id: number;\n                name: string;\n            };\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: {\n                    id: number;\n                    name: string;\n                };\n                422: {\n                    type: \"validation\";\n                    ... 5 more ...;\n                    expected?: string;\n                };\n            };\n        };\n    };\n}, {\n    ...;\n}, {\n    ...;\n}>\nimport App","start":67,"length":3,"target":"App","line":2,"character":14},{"type":"hover","text":"const app: {\n    hi: {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: string;\n        }>>;\n    };\n    id: ((params: {\n        id: string | number;\n    }) => {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: string;\n            422: {\n                type: \"validation\";\n                on: string;\n                summary?: string;\n                message?: string;\n                found?: unknown;\n                property?: string;\n                expected?: string;\n            };\n        }>>;\n    }) & {};\n    mirror: {\n        ...;\n    };\n}","start":110,"length":3,"target":"app","line":4,"character":6},{"type":"hover","text":"(alias) treaty<Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    hi: {\n        get: {\n            body: unknown;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: string;\n            };\n        };\n    };\n} & {\n    id: {\n        \":id\": {\n            get: {\n                body: unknown;\n                params: {\n                    id: string;\n                };\n                query: unknown;\n                headers: unknown;\n                response: {\n                    200: string;\n                    422: {\n                        type: \"validation\";\n                        on: string;\n                        summary?: string;\n                        message?: string;\n                        found?: unknown;\n                        property?: string;\n                        expected?: string;\n                    };\n                };\n            };\n        };\n    };\n} & {\n    mirror: {\n        post: {\n            body: {\n                id: number;\n                name: string;\n            };\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: {\n                    id: number;\n                    name: string;\n                };\n                422: {\n                    type: \"validation\";\n                    ... 5 more ...;\n                    expected?: string;\n                };\n            };\n        };\n    };\n}, {\n    ...;\n}, {\n    ...;\n}>>(domain: string | Elysia<...>, config?: Treaty.Config): {\n    ...;\n}\nimport treaty","start":116,"length":6,"target":"treaty","line":4,"character":12},{"type":"hover","text":"(alias) type App = Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    hi: {\n        get: {\n            body: unknown;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: string;\n            };\n        };\n    };\n} & {\n    id: {\n        \":id\": {\n            get: {\n                body: unknown;\n                params: {\n                    id: string;\n                };\n                query: unknown;\n                headers: unknown;\n                response: {\n                    200: string;\n                    422: {\n                        type: \"validation\";\n                        on: string;\n                        summary?: string;\n                        message?: string;\n                        found?: unknown;\n                        property?: string;\n                        expected?: string;\n                    };\n                };\n            };\n        };\n    };\n} & {\n    mirror: {\n        post: {\n            body: {\n                id: number;\n                name: string;\n            };\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: {\n                    id: number;\n                    name: string;\n                };\n                422: {\n                    type: \"validation\";\n                    ... 5 more ...;\n                    expected?: string;\n                };\n            };\n        };\n    };\n}, {\n    ...;\n}, {\n    ...;\n}>\nimport App","start":123,"length":3,"target":"App","line":4,"character":19},{"type":"hover","text":"const data: string | null","start":185,"length":4,"target":"data","line":7,"character":8},{"type":"query","text":"const data: string | null","start":185,"length":4,"target":"data","line":7,"character":8},{"type":"hover","text":"const error: {\n    status: unknown;\n    value: unknown;\n} | null","start":191,"length":5,"target":"error","line":7,"character":14},{"type":"hover","text":"const app: {\n    hi: {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: string;\n        }>>;\n    };\n    id: ((params: {\n        id: string | number;\n    }) => {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: string;\n            422: {\n                type: \"validation\";\n                on: string;\n                summary?: string;\n                message?: string;\n                found?: unknown;\n                property?: string;\n                expected?: string;\n            };\n        }>>;\n    }) & {};\n    mirror: {\n        ...;\n    };\n}","start":207,"length":3,"target":"app","line":7,"character":30},{"type":"hover","text":"(property) hi: {\n    get: (options?: {\n        headers?: Record<string, unknown> | undefined;\n        query?: Record<string, unknown> | undefined;\n        fetch?: RequestInit | undefined;\n    } | undefined) => Promise<Treaty.TreatyResponse<{\n        200: string;\n    }>>;\n}","start":211,"length":2,"target":"hi","line":7,"character":34},{"type":"hover","text":"(property) get: (options?: {\n    headers?: Record<string, unknown> | undefined;\n    query?: Record<string, unknown> | undefined;\n    fetch?: RequestInit | undefined;\n} | undefined) => Promise<Treaty.TreatyResponse<{\n    200: string;\n}>>","start":214,"length":3,"target":"get","line":7,"character":37}],"meta":{"extension":"ts","compilerOptions":{"strict":true,"module":99,"target":99,"allowJs":true,"skipDefaultLibCheck":true,"skipLibCheck":true,"moduleDetection":3,"baseUrl":"/Users/saltyaom/Documents/web/elysia/documentation/","moduleResolution":100},"handbookOptions":{"errors":[],"noErrors":false,"noErrorsCutted":false,"noErrorValidation":false,"noStaticSemanticInfo":false,"showEmit":false,"keepNotations":false},"removals":[[631,643],[0,411]],"flagNotations":[],"virtualFiles":[{"offset":0,"filename":"server.ts","filepath":"/Users/saltyaom/Documents/web/elysia/documentation/server.ts","content":"// @filename: server.ts\nimport { Elysia, t } from 'elysia'\n\nconst app = new Elysia()\n    .get('/hi', () => 'Hi Elysia')\n    .get('/id/:id', ({ params: { id } }) => id)\n    .post('/mirror', ({ body }) => body, {\n        body: t.Object({\n            id: t.Number(),\n            name: t.String()\n        })\n    })\n    .listen(3000)\n\nexport type App = typeof app // [!code ++]\n\n","extension":"ts","supportLsp":true},{"offset":374,"filename":"client.ts","filepath":"/Users/saltyaom/Documents/web/elysia/documentation/client.ts","content":"// @filename: client.ts\n// ---cut---\n// client.ts\nimport { treaty } from '@elysiajs/eden'\nimport type { App } from './server' // [!code ++]\n\nconst app = treaty<App>('localhost:3000')\n\n// response type: 'Hi Elysia'\nconst { data, error } = await app.hi.get()\n      // ^?","extension":"ts","supportLsp":true}],"positionQueries":[597],"positionCompletions":[],"positionHighlights":[]},"queries":[{"type":"query","text":"const data: string | null","start":185,"length":4,"target":"data","line":7,"character":8}],"completions":[],"errors":[],"highlights":[],"hovers":[{"type":"hover","text":"(alias) const treaty: <const App extends Elysia<any, any, any, any, any, any, any>>(domain: string | App, config?: Treaty.Config) => Treaty.Create<App>\nimport treaty","start":22,"length":6,"target":"treaty","line":1,"character":9},{"type":"hover","text":"(alias) type App = Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    hi: {\n        get: {\n            body: unknown;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: string;\n            };\n        };\n    };\n} & {\n    id: {\n        \":id\": {\n            get: {\n                body: unknown;\n                params: {\n                    id: string;\n                };\n                query: unknown;\n                headers: unknown;\n                response: {\n                    200: string;\n                    422: {\n                        type: \"validation\";\n                        on: string;\n                        summary?: string;\n                        message?: string;\n                        found?: unknown;\n                        property?: string;\n                        expected?: string;\n                    };\n                };\n            };\n        };\n    };\n} & {\n    mirror: {\n        post: {\n            body: {\n                id: number;\n                name: string;\n            };\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: {\n                    id: number;\n                    name: string;\n                };\n                422: {\n                    type: \"validation\";\n                    ... 5 more ...;\n                    expected?: string;\n                };\n            };\n        };\n    };\n}, {\n    ...;\n}, {\n    ...;\n}>\nimport App","start":67,"length":3,"target":"App","line":2,"character":14},{"type":"hover","text":"const app: {\n    hi: {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: string;\n        }>>;\n    };\n    id: ((params: {\n        id: string | number;\n    }) => {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: string;\n            422: {\n                type: \"validation\";\n                on: string;\n                summary?: string;\n                message?: string;\n                found?: unknown;\n                property?: string;\n                expected?: string;\n            };\n        }>>;\n    }) & {};\n    mirror: {\n        ...;\n    };\n}","start":110,"length":3,"target":"app","line":4,"character":6},{"type":"hover","text":"(alias) treaty<Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    hi: {\n        get: {\n            body: unknown;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: string;\n            };\n        };\n    };\n} & {\n    id: {\n        \":id\": {\n            get: {\n                body: unknown;\n                params: {\n                    id: string;\n                };\n                query: unknown;\n                headers: unknown;\n                response: {\n                    200: string;\n                    422: {\n                        type: \"validation\";\n                        on: string;\n                        summary?: string;\n                        message?: string;\n                        found?: unknown;\n                        property?: string;\n                        expected?: string;\n                    };\n                };\n            };\n        };\n    };\n} & {\n    mirror: {\n        post: {\n            body: {\n                id: number;\n                name: string;\n            };\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: {\n                    id: number;\n                    name: string;\n                };\n                422: {\n                    type: \"validation\";\n                    ... 5 more ...;\n                    expected?: string;\n                };\n            };\n        };\n    };\n}, {\n    ...;\n}, {\n    ...;\n}>>(domain: string | Elysia<...>, config?: Treaty.Config): {\n    ...;\n}\nimport treaty","start":116,"length":6,"target":"treaty","line":4,"character":12},{"type":"hover","text":"(alias) type App = Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    hi: {\n        get: {\n            body: unknown;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: string;\n            };\n        };\n    };\n} & {\n    id: {\n        \":id\": {\n            get: {\n                body: unknown;\n                params: {\n                    id: string;\n                };\n                query: unknown;\n                headers: unknown;\n                response: {\n                    200: string;\n                    422: {\n                        type: \"validation\";\n                        on: string;\n                        summary?: string;\n                        message?: string;\n                        found?: unknown;\n                        property?: string;\n                        expected?: string;\n                    };\n                };\n            };\n        };\n    };\n} & {\n    mirror: {\n        post: {\n            body: {\n                id: number;\n                name: string;\n            };\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: {\n                    id: number;\n                    name: string;\n                };\n                422: {\n                    type: \"validation\";\n                    ... 5 more ...;\n                    expected?: string;\n                };\n            };\n        };\n    };\n}, {\n    ...;\n}, {\n    ...;\n}>\nimport App","start":123,"length":3,"target":"App","line":4,"character":19},{"type":"hover","text":"const data: string | null","start":185,"length":4,"target":"data","line":7,"character":8},{"type":"hover","text":"const error: {\n    status: unknown;\n    value: unknown;\n} | null","start":191,"length":5,"target":"error","line":7,"character":14},{"type":"hover","text":"const app: {\n    hi: {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: string;\n        }>>;\n    };\n    id: ((params: {\n        id: string | number;\n    }) => {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: string;\n            422: {\n                type: \"validation\";\n                on: string;\n                summary?: string;\n                message?: string;\n                found?: unknown;\n                property?: string;\n                expected?: string;\n            };\n        }>>;\n    }) & {};\n    mirror: {\n        ...;\n    };\n}","start":207,"length":3,"target":"app","line":7,"character":30},{"type":"hover","text":"(property) hi: {\n    get: (options?: {\n        headers?: Record<string, unknown> | undefined;\n        query?: Record<string, unknown> | undefined;\n        fetch?: RequestInit | undefined;\n    } | undefined) => Promise<Treaty.TreatyResponse<{\n        200: string;\n    }>>;\n}","start":211,"length":2,"target":"hi","line":7,"character":34},{"type":"hover","text":"(property) get: (options?: {\n    headers?: Record<string, unknown> | undefined;\n    query?: Record<string, unknown> | undefined;\n    fetch?: RequestInit | undefined;\n} | undefined) => Promise<Treaty.TreatyResponse<{\n    200: string;\n}>>","start":214,"length":3,"target":"get","line":7,"character":37}],"tags":[]}