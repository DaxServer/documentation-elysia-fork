{"code":"import { Elysia, sse } from 'elysia'\n\nnew Elysia()\n\t.get('/sse', function* () {\n\t\tyield sse('hello world')\n\t\tyield sse({\n\t\t\tevent: 'message',\n\t\t\tdata: {\n\t\t\t\tmessage: 'This is a message',\n\t\t\t\ttimestamp: new Date().toISOString()\n\t\t\t},\n\t\t})\n\t})","nodes":[{"type":"hover","text":"(alias) class Elysia<const in out BasePath extends string = \"\", const in out Singleton extends SingletonBase = { decorator: {}; store: {}; derive: {}; resolve: {}; }, const in out Definitions extends DefinitionBase = { typebox: {}; error: {}; }, const in out Metadata extends MetadataBase = { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, const out Routes extends RouteBase = {}, const in out Ephemeral extends EphemeralType = { ...; }, const in out Volatile extends EphemeralType = { ...; }>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":9,"length":6,"target":"Elysia","line":0,"character":9},{"type":"hover","text":"(alias) const sse: (payload: string | SSEPayload) => SSEPayload & {\n    toStream(): string;\n}\nimport sse","start":17,"length":3,"target":"sse","line":0,"character":17},{"type":"hover","text":"(alias) new Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>(config?: ElysiaConfig<\"\"> | undefined): Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":42,"length":6,"target":"Elysia","line":2,"character":4},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.get<\"/sse\", InputSchema<never>, MergeSchema<UnwrapRoute<InputSchema<never>, {}, \"/sse\">, MergeSchema<{}, MergeSchema<{}, {}, \"\">, \"\">, \"\">, {}, {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n} & {\n    derive: {};\n    resolve: {};\n}, () => Generator<SSEPayload & {\n    toStream(): string;\n}, void, unknown>>(path: \"/sse\", handler: () => Generator<SSEPayload & {\n    toStream(): string;\n}, void, unknown>, hook?: LocalHook<InputSchema<never>, ... 4 more ..., never> | undefined): Elysia<...>","docs":"### get\nRegister handler for path with method [GET]\n\n---","tags":[["example","```typescript\nimport { Elysia, t } from 'elysia'\n\nnew Elysia()\n    .get('/', () => 'hi')\n    .get('/with-hook', () => 'hi', {\n        response: t.String()\n    })\n```"]],"start":53,"length":3,"target":"get","line":3,"character":2},{"type":"hover","text":"(alias) sse(payload: string | SSEPayload): SSEPayload & {\n    toStream(): string;\n}\nimport sse","start":88,"length":3,"target":"sse","line":4,"character":8},{"type":"hover","text":"(alias) sse(payload: string | SSEPayload): SSEPayload & {\n    toStream(): string;\n}\nimport sse","start":115,"length":3,"target":"sse","line":5,"character":8},{"type":"hover","text":"(property) event?: string | undefined","docs":"event name","start":124,"length":5,"target":"event","line":6,"character":3},{"type":"hover","text":"(property) data?: unknown","docs":"data to send","start":145,"length":4,"target":"data","line":7,"character":3},{"type":"hover","text":"(property) message: string","start":157,"length":7,"target":"message","line":8,"character":4},{"type":"hover","text":"(property) timestamp: string","start":191,"length":9,"target":"timestamp","line":9,"character":4},{"type":"hover","text":"var Date: DateConstructor\nnew () => Date (+4 overloads)","start":206,"length":4,"target":"Date","line":9,"character":19},{"type":"hover","text":"(method) Date.toISOString(): string","docs":"Returns a date as a string value in ISO format.","start":213,"length":11,"target":"toISOString","line":9,"character":26}],"meta":{"extension":"ts","compilerOptions":{"strict":true,"module":99,"target":99,"allowJs":true,"skipDefaultLibCheck":true,"skipLibCheck":true,"moduleDetection":3,"baseUrl":"/Users/saltyaom/Documents/web/elysia/documentation/","moduleResolution":100},"handbookOptions":{"errors":[],"noErrors":false,"noErrorsCutted":false,"noErrorValidation":false,"noStaticSemanticInfo":false,"showEmit":false,"keepNotations":false},"removals":[],"flagNotations":[],"virtualFiles":[{"offset":0,"filename":"index.ts","filepath":"/Users/saltyaom/Documents/web/elysia/documentation/index.ts","content":"import { Elysia, sse } from 'elysia'\n\nnew Elysia()\n\t.get('/sse', function* () {\n\t\tyield sse('hello world')\n\t\tyield sse({\n\t\t\tevent: 'message',\n\t\t\tdata: {\n\t\t\t\tmessage: 'This is a message',\n\t\t\t\ttimestamp: new Date().toISOString()\n\t\t\t},\n\t\t})\n\t})","extension":"ts","supportLsp":true}],"positionQueries":[],"positionCompletions":[],"positionHighlights":[]},"queries":[],"completions":[],"errors":[],"highlights":[],"hovers":[{"type":"hover","text":"(alias) class Elysia<const in out BasePath extends string = \"\", const in out Singleton extends SingletonBase = { decorator: {}; store: {}; derive: {}; resolve: {}; }, const in out Definitions extends DefinitionBase = { typebox: {}; error: {}; }, const in out Metadata extends MetadataBase = { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, const out Routes extends RouteBase = {}, const in out Ephemeral extends EphemeralType = { ...; }, const in out Volatile extends EphemeralType = { ...; }>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":9,"length":6,"target":"Elysia","line":0,"character":9},{"type":"hover","text":"(alias) const sse: (payload: string | SSEPayload) => SSEPayload & {\n    toStream(): string;\n}\nimport sse","start":17,"length":3,"target":"sse","line":0,"character":17},{"type":"hover","text":"(alias) new Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>(config?: ElysiaConfig<\"\"> | undefined): Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":42,"length":6,"target":"Elysia","line":2,"character":4},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.get<\"/sse\", InputSchema<never>, MergeSchema<UnwrapRoute<InputSchema<never>, {}, \"/sse\">, MergeSchema<{}, MergeSchema<{}, {}, \"\">, \"\">, \"\">, {}, {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n} & {\n    derive: {};\n    resolve: {};\n}, () => Generator<SSEPayload & {\n    toStream(): string;\n}, void, unknown>>(path: \"/sse\", handler: () => Generator<SSEPayload & {\n    toStream(): string;\n}, void, unknown>, hook?: LocalHook<InputSchema<never>, ... 4 more ..., never> | undefined): Elysia<...>","docs":"### get\nRegister handler for path with method [GET]\n\n---","tags":[["example","```typescript\nimport { Elysia, t } from 'elysia'\n\nnew Elysia()\n    .get('/', () => 'hi')\n    .get('/with-hook', () => 'hi', {\n        response: t.String()\n    })\n```"]],"start":53,"length":3,"target":"get","line":3,"character":2},{"type":"hover","text":"(alias) sse(payload: string | SSEPayload): SSEPayload & {\n    toStream(): string;\n}\nimport sse","start":88,"length":3,"target":"sse","line":4,"character":8},{"type":"hover","text":"(alias) sse(payload: string | SSEPayload): SSEPayload & {\n    toStream(): string;\n}\nimport sse","start":115,"length":3,"target":"sse","line":5,"character":8},{"type":"hover","text":"(property) event?: string | undefined","docs":"event name","start":124,"length":5,"target":"event","line":6,"character":3},{"type":"hover","text":"(property) data?: unknown","docs":"data to send","start":145,"length":4,"target":"data","line":7,"character":3},{"type":"hover","text":"(property) message: string","start":157,"length":7,"target":"message","line":8,"character":4},{"type":"hover","text":"(property) timestamp: string","start":191,"length":9,"target":"timestamp","line":9,"character":4},{"type":"hover","text":"var Date: DateConstructor\nnew () => Date (+4 overloads)","start":206,"length":4,"target":"Date","line":9,"character":19},{"type":"hover","text":"(method) Date.toISOString(): string","docs":"Returns a date as a string value in ISO format.","start":213,"length":11,"target":"toISOString","line":9,"character":26}],"tags":[]}