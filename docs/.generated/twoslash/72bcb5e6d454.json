{"code":"// ✅ Do\nimport { Elysia, t } from 'elysia'\n\nconst customBody = t.Object({\n\tusername: t.String(),\n\tpassword: t.String()\n})\n\n// Optional if you want to get the type of the model\n// Usually if we didn't use the type, as it's already inferred by Elysia\ntype CustomBody = typeof customBody.static\n\n\n\nexport { customBody }","nodes":[{"type":"hover","text":"(alias) class Elysia<const in out BasePath extends string = \"\", const in out Singleton extends SingletonBase = { decorator: {}; store: {}; derive: {}; resolve: {}; }, const in out Definitions extends DefinitionBase = { typebox: {}; error: {}; }, const in out Metadata extends MetadataBase = { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, const out Routes extends RouteBase = {}, const in out Ephemeral extends EphemeralType = { ...; }, const in out Volatile extends EphemeralType = { ...; }>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":17,"length":6,"target":"Elysia","line":1,"character":9},{"type":"hover","text":"(alias) const t: Omit<JavaScriptTypeBuilder, \"String\" | \"Transform\"> & {\n    String: (property?: ElysiaStringOptions) => TString;\n    Numeric: (property?: NumberOptions) => TNumber;\n    Integer: (property?: IntegerOptions) => TInteger;\n    Date: (property?: DateOptions) => TDate;\n    BooleanString: (property?: SchemaOptions) => TBoolean;\n    ... 9 more ...;\n    Form: <T extends TProperties>(v: T, options?: ObjectOptions) => TForm<T>;\n} & {\n    ...;\n}\nimport t","start":25,"length":1,"target":"t","line":1,"character":17},{"type":"hover","text":"const customBody: TObject<{\n    username: TString;\n    password: TString;\n}>","start":50,"length":10,"target":"customBody","line":3,"character":6},{"type":"hover","text":"(alias) const t: Omit<JavaScriptTypeBuilder, \"String\" | \"Transform\"> & {\n    String: (property?: ElysiaStringOptions) => TString;\n    Numeric: (property?: NumberOptions) => TNumber;\n    Integer: (property?: IntegerOptions) => TInteger;\n    Date: (property?: DateOptions) => TDate;\n    BooleanString: (property?: SchemaOptions) => TBoolean;\n    ... 9 more ...;\n    Form: <T extends TProperties>(v: T, options?: ObjectOptions) => TForm<T>;\n} & {\n    ...;\n}\nimport t","start":63,"length":1,"target":"t","line":3,"character":19},{"type":"hover","text":"(method) Object<{\n    username: TString;\n    password: TString;\n}>(properties: {\n    username: TString;\n    password: TString;\n}, options?: ObjectOptions): TObject<{\n    username: TString;\n    password: TString;\n}>","docs":"`[Json]` Creates an Object type","start":65,"length":6,"target":"Object","line":3,"character":21},{"type":"hover","text":"(property) username: TString","start":75,"length":8,"target":"username","line":4,"character":1},{"type":"hover","text":"(alias) const t: Omit<JavaScriptTypeBuilder, \"String\" | \"Transform\"> & {\n    String: (property?: ElysiaStringOptions) => TString;\n    Numeric: (property?: NumberOptions) => TNumber;\n    Integer: (property?: IntegerOptions) => TInteger;\n    Date: (property?: DateOptions) => TDate;\n    BooleanString: (property?: SchemaOptions) => TBoolean;\n    ... 9 more ...;\n    Form: <T extends TProperties>(v: T, options?: ObjectOptions) => TForm<T>;\n} & {\n    ...;\n}\nimport t","start":85,"length":1,"target":"t","line":4,"character":11},{"type":"hover","text":"(property) String: (property?: ElysiaStringOptions) => TString","start":87,"length":6,"target":"String","line":4,"character":13},{"type":"hover","text":"(property) password: TString","start":98,"length":8,"target":"password","line":5,"character":1},{"type":"hover","text":"(alias) const t: Omit<JavaScriptTypeBuilder, \"String\" | \"Transform\"> & {\n    String: (property?: ElysiaStringOptions) => TString;\n    Numeric: (property?: NumberOptions) => TNumber;\n    Integer: (property?: IntegerOptions) => TInteger;\n    Date: (property?: DateOptions) => TDate;\n    BooleanString: (property?: SchemaOptions) => TBoolean;\n    ... 9 more ...;\n    Form: <T extends TProperties>(v: T, options?: ObjectOptions) => TForm<T>;\n} & {\n    ...;\n}\nimport t","start":108,"length":1,"target":"t","line":5,"character":11},{"type":"hover","text":"(property) String: (property?: ElysiaStringOptions) => TString","start":110,"length":6,"target":"String","line":5,"character":13},{"type":"hover","text":"type CustomBody = {\n    username: string;\n    password: string;\n}","start":254,"length":10,"target":"CustomBody","line":10,"character":5},{"type":"query","text":"type CustomBody = {\n    username: string;\n    password: string;\n}","start":254,"length":10,"target":"CustomBody","line":10,"character":5},{"type":"hover","text":"const customBody: TObject<{\n    username: TString;\n    password: TString;\n}>","start":274,"length":10,"target":"customBody","line":10,"character":25},{"type":"hover","text":"(property) TObject<{ username: TString; password: TString; }>.static: {\n    username: string;\n    password: string;\n}","start":285,"length":6,"target":"static","line":10,"character":36},{"type":"hover","text":"(alias) const customBody: TObject<{\n    username: TString;\n    password: TString;\n}>\nexport customBody","start":304,"length":10,"target":"customBody","line":14,"character":9}],"meta":{"extension":"ts","compilerOptions":{"strict":true,"module":99,"target":99,"allowJs":true,"skipDefaultLibCheck":true,"skipLibCheck":true,"moduleDetection":3,"baseUrl":"/Users/saltyaom/Documents/web/elysia/documentation/","moduleResolution":100},"handbookOptions":{"errors":[],"noErrors":false,"noErrorsCutted":false,"noErrorValidation":false,"noStaticSemanticInfo":false,"showEmit":false,"keepNotations":false},"removals":[[292,302]],"flagNotations":[],"virtualFiles":[{"offset":0,"filename":"index.ts","filepath":"/Users/saltyaom/Documents/web/elysia/documentation/index.ts","content":"// ✅ Do\nimport { Elysia, t } from 'elysia'\n\nconst customBody = t.Object({\n\tusername: t.String(),\n\tpassword: t.String()\n})\n\n// Optional if you want to get the type of the model\n// Usually if we didn't use the type, as it's already inferred by Elysia\ntype CustomBody = typeof customBody.static\n    // ^?\n\n\n\nexport { customBody }","extension":"ts","supportLsp":true}],"positionQueries":[256],"positionCompletions":[],"positionHighlights":[]},"queries":[{"type":"query","text":"type CustomBody = {\n    username: string;\n    password: string;\n}","start":254,"length":10,"target":"CustomBody","line":10,"character":5}],"completions":[],"errors":[],"highlights":[],"hovers":[{"type":"hover","text":"(alias) class Elysia<const in out BasePath extends string = \"\", const in out Singleton extends SingletonBase = { decorator: {}; store: {}; derive: {}; resolve: {}; }, const in out Definitions extends DefinitionBase = { typebox: {}; error: {}; }, const in out Metadata extends MetadataBase = { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, const out Routes extends RouteBase = {}, const in out Ephemeral extends EphemeralType = { ...; }, const in out Volatile extends EphemeralType = { ...; }>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":17,"length":6,"target":"Elysia","line":1,"character":9},{"type":"hover","text":"(alias) const t: Omit<JavaScriptTypeBuilder, \"String\" | \"Transform\"> & {\n    String: (property?: ElysiaStringOptions) => TString;\n    Numeric: (property?: NumberOptions) => TNumber;\n    Integer: (property?: IntegerOptions) => TInteger;\n    Date: (property?: DateOptions) => TDate;\n    BooleanString: (property?: SchemaOptions) => TBoolean;\n    ... 9 more ...;\n    Form: <T extends TProperties>(v: T, options?: ObjectOptions) => TForm<T>;\n} & {\n    ...;\n}\nimport t","start":25,"length":1,"target":"t","line":1,"character":17},{"type":"hover","text":"const customBody: TObject<{\n    username: TString;\n    password: TString;\n}>","start":50,"length":10,"target":"customBody","line":3,"character":6},{"type":"hover","text":"(alias) const t: Omit<JavaScriptTypeBuilder, \"String\" | \"Transform\"> & {\n    String: (property?: ElysiaStringOptions) => TString;\n    Numeric: (property?: NumberOptions) => TNumber;\n    Integer: (property?: IntegerOptions) => TInteger;\n    Date: (property?: DateOptions) => TDate;\n    BooleanString: (property?: SchemaOptions) => TBoolean;\n    ... 9 more ...;\n    Form: <T extends TProperties>(v: T, options?: ObjectOptions) => TForm<T>;\n} & {\n    ...;\n}\nimport t","start":63,"length":1,"target":"t","line":3,"character":19},{"type":"hover","text":"(method) Object<{\n    username: TString;\n    password: TString;\n}>(properties: {\n    username: TString;\n    password: TString;\n}, options?: ObjectOptions): TObject<{\n    username: TString;\n    password: TString;\n}>","docs":"`[Json]` Creates an Object type","start":65,"length":6,"target":"Object","line":3,"character":21},{"type":"hover","text":"(property) username: TString","start":75,"length":8,"target":"username","line":4,"character":1},{"type":"hover","text":"(alias) const t: Omit<JavaScriptTypeBuilder, \"String\" | \"Transform\"> & {\n    String: (property?: ElysiaStringOptions) => TString;\n    Numeric: (property?: NumberOptions) => TNumber;\n    Integer: (property?: IntegerOptions) => TInteger;\n    Date: (property?: DateOptions) => TDate;\n    BooleanString: (property?: SchemaOptions) => TBoolean;\n    ... 9 more ...;\n    Form: <T extends TProperties>(v: T, options?: ObjectOptions) => TForm<T>;\n} & {\n    ...;\n}\nimport t","start":85,"length":1,"target":"t","line":4,"character":11},{"type":"hover","text":"(property) String: (property?: ElysiaStringOptions) => TString","start":87,"length":6,"target":"String","line":4,"character":13},{"type":"hover","text":"(property) password: TString","start":98,"length":8,"target":"password","line":5,"character":1},{"type":"hover","text":"(alias) const t: Omit<JavaScriptTypeBuilder, \"String\" | \"Transform\"> & {\n    String: (property?: ElysiaStringOptions) => TString;\n    Numeric: (property?: NumberOptions) => TNumber;\n    Integer: (property?: IntegerOptions) => TInteger;\n    Date: (property?: DateOptions) => TDate;\n    BooleanString: (property?: SchemaOptions) => TBoolean;\n    ... 9 more ...;\n    Form: <T extends TProperties>(v: T, options?: ObjectOptions) => TForm<T>;\n} & {\n    ...;\n}\nimport t","start":108,"length":1,"target":"t","line":5,"character":11},{"type":"hover","text":"(property) String: (property?: ElysiaStringOptions) => TString","start":110,"length":6,"target":"String","line":5,"character":13},{"type":"hover","text":"type CustomBody = {\n    username: string;\n    password: string;\n}","start":254,"length":10,"target":"CustomBody","line":10,"character":5},{"type":"hover","text":"const customBody: TObject<{\n    username: TString;\n    password: TString;\n}>","start":274,"length":10,"target":"customBody","line":10,"character":25},{"type":"hover","text":"(property) TObject<{ username: TString; password: TString; }>.static: {\n    username: string;\n    password: string;\n}","start":285,"length":6,"target":"static","line":10,"character":36},{"type":"hover","text":"(alias) const customBody: TObject<{\n    username: TString;\n    password: TString;\n}>\nexport customBody","start":304,"length":10,"target":"customBody","line":14,"character":9}],"tags":[]}