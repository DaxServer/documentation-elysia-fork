{"code":"import { Elysia } from 'elysia'\n\nnew Elysia()\n\t.macro({\n\t\tuser: (enabled: true) => ({\n\t\t\tresolve: ({ cookie: { session } }) => ({\n\t\t\t\tuser: session.value!\n\t\t\t})\n\t\t})\n\t})\n\t.get('/', ({ user }) => user, {\n\t\tuser: true\n\t})","nodes":[{"type":"hover","text":"(alias) class Elysia<const in out BasePath extends string = \"\", const in out Singleton extends SingletonBase = { decorator: {}; store: {}; derive: {}; resolve: {}; }, const in out Definitions extends DefinitionBase = { typebox: {}; error: {}; }, const in out Metadata extends MetadataBase = { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, const out Routes extends RouteBase = {}, const in out Ephemeral extends EphemeralType = { ...; }, const in out Volatile extends EphemeralType = { ...; }>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":9,"length":6,"target":"Elysia","line":0,"character":9},{"type":"hover","text":"(alias) new Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>(config?: ElysiaConfig<\"\"> | undefined): Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":37,"length":6,"target":"Elysia","line":2,"character":4},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.macro<{\n    readonly user: (enabled: true) => {\n        resolve: ({ cookie: { session } }: {\n            body: unknown;\n            query: Record<string, string>;\n            params: Record<string, string>;\n            headers: Record<string, string | undefined>;\n            cookie: Record<string, Cookie<string | undefined>>;\n            server: Server | null;\n            redirect: redirect;\n            set: {\n                headers: HTTPHeaders;\n                status?: number | keyof StatusMap;\n                redirect?: string;\n                cookie?: Record<string, {\n                    domain?: string | undefined | undefined;\n                    expires?: Date | undefined;\n                    httpOnly?: boolean | undefined | undefined;\n                    maxAge?: number | undefined | undefined;\n                    path?: string | undefined | undefined;\n                    priority?: \"low\" | \"medium\" | \"high\" | undefined | undefined;\n                    ... 4 more ...;\n                    value?: unknown;\n                }>;\n            };\n            ... 5 more ...;\n            error: <const Code extends number | keyof StatusMap, const T = Code extends 100 | ... 58 more ... | 511 ? {\n                ...;\n            }[Code] : Code>(code: Code, response?: T) => ElysiaCustomStatusResponse<Code, T, Code extends \"Continue\" | \"Switching Protocols\" | \"Processing\" | \"Early Hints\" | \"OK\" | \"Created\" | \"Accepted\" | \"Non-Authoritative Information\" | \"No Content\" | \"Reset Content\" | \"Partial Content\" | \"Multi-Status\" | \"Already Reported\" | \"Multiple Choices\" | \"Moved Permanently\" | \"Found\" | \"See Other\" | \"Not Modified\" | \"Temporary Redirect\" | \"Permanent Redirect\" | \"Bad Request\" | \"Unauthorized\" | \"Payment Required\" | \"Forbidden\" | \"Not Found\" | \"Method Not Allowed\" | \"Not Acceptable\" | \"Proxy Authentication Required\" | \"Request Timeout\" | \"Conflict\" | \"Gone\" | \"Length Required\" | \"Precondition Failed\" | \"Payload Too Large\" | \"URI Too Long\" | \"Unsupported Media Type\" | \"Range Not Satisfiable\" | \"Expectation Failed\" | \"I'm a teapot\" | \"Misdirected Request\" | \"Unprocessable Content\" | \"Locked\" | \"Failed Dependency\" | \"Too Early\" | \"Upgrade Required\" | \"Precondition Required\" | \"Too Many Requests\" | \"Request Header Fields Too Large\" | \"Unavailable For Legal Reasons\" | \"Internal Server Error\" | \"Not Implemented\" | \"Bad Gateway\" | \"Service Unavailable\" | \"Gateway Timeout\" | \"HTTP Version Not Supported\" | \"Variant Also Negotiates\" | \"Insufficient Storage\" | \"Loop Detected\" | \"Not Extended\" | \"Network Authentication Required\" ? {\n                readonly Continue: 100;\n                readonly \"Switching Protocols\": 101;\n                readonly Processing: 102;\n                readonly \"Early Hints\": 103;\n                readonly OK: 200;\n                readonly Created: 201;\n                readonly Accepted: 202;\n                readonly \"Non-Authoritative Information\": 203;\n                readonly \"No Content\": 204;\n                readonly \"Reset Content\": 205;\n                readonly \"Partial Content\": 206;\n                readonly \"Multi-Status\": 207;\n                readonly \"Already Reported\": 208;\n                readonly \"Multiple Choices\": 300;\n                readonly \"Moved Permanently\": 301;\n                readonly Found: 302;\n                readonly \"See Other\": 303;\n                readonly \"Not Modified\": 304;\n                readonly \"Temporary Redirect\": 307;\n                readonly \"Permanent Redirect\": 308;\n                readonly \"Bad Request\": 400;\n                readonly Unauthorized: 401;\n                readonly \"Payment Required\": 402;\n                readonly Forbidden: 403;\n                readonly \"Not Found\": 404;\n                readonly \"Method Not Allowed\": 405;\n                readonly \"Not Acceptable\": 406;\n                readonly \"Proxy Authentication Required\": 407;\n                readonly \"Request Timeout\": 408;\n                readonly Conflict: 409;\n                readonly Gone: 410;\n                readonly \"Length Required\": 411;\n                readonly \"Precondition Failed\": 412;\n                readonly \"Payload Too Large\": 413;\n                readonly \"URI Too Long\": 414;\n                readonly \"Unsupported Media Type\": 415;\n                readonly \"Range Not Satisfiable\": 416;\n                readonly \"Expectation Failed\": 417;\n                readonly \"I'm a teapot\": 418;\n                readonly \"Misdirected Request\": 421;\n                readonly \"Unprocessable Content\": 422;\n                readonly Locked: 423;\n                readonly \"Failed Dependency\": 424;\n                readonly \"Too Early\": 425;\n                readonly \"Upgrade Required\": 426;\n                readonly \"Precondition Required\": 428;\n                readonly \"Too Many Requests\": 429;\n                readonly \"Request Header Fields Too Large\": 431;\n                readonly \"Unavailable For Legal Reasons\": 451;\n                readonly \"Internal Server Error\": 500;\n                readonly ... (+1 overload)","start":48,"length":5,"target":"macro","line":3,"character":2},{"type":"hover","text":"(property) user: (enabled: true) => {\n    resolve: ({ cookie: { session } }: {\n        body: unknown;\n        query: Record<string, string>;\n        params: Record<string, string>;\n        headers: Record<string, string | undefined>;\n        cookie: Record<string, Cookie<string | undefined>>;\n        server: Server | null;\n        redirect: redirect;\n        set: {\n            headers: HTTPHeaders;\n            status?: number | keyof StatusMap;\n            redirect?: string;\n            cookie?: Record<string, ElysiaCookie>;\n        };\n        ... 5 more ...;\n        error: <const Code extends number | keyof StatusMap, const T = Code extends 100 | ... 58 more ... | 511 ? {\n            ...;\n        }[Code] : Code>(code: Code, response?: T) => ElysiaCustomStatusResponse<Code, T, Code extends \"Continue\" | \"Switching Protocols\" | \"Processing\" | \"Early Hints\" | \"OK\" | \"Created\" | \"Accepted\" | \"Non-Authoritative Information\" | \"No Content\" | \"Reset Content\" | \"Partial Content\" | \"Multi-Status\" | \"Already Reported\" | \"Multiple Choices\" | \"Moved Permanently\" | \"Found\" | \"See Other\" | \"Not Modified\" | \"Temporary Redirect\" | \"Permanent Redirect\" | \"Bad Request\" | \"Unauthorized\" | \"Payment Required\" | \"Forbidden\" | \"Not Found\" | \"Method Not Allowed\" | \"Not Acceptable\" | \"Proxy Authentication Required\" | \"Request Timeout\" | \"Conflict\" | \"Gone\" | \"Length Required\" | \"Precondition Failed\" | \"Payload Too Large\" | \"URI Too Long\" | \"Unsupported Media Type\" | \"Range Not Satisfiable\" | \"Expectation Failed\" | \"I'm a teapot\" | \"Misdirected Request\" | \"Unprocessable Content\" | \"Locked\" | \"Failed Dependency\" | \"Too Early\" | \"Upgrade Required\" | \"Precondition Required\" | \"Too Many Requests\" | \"Request Header Fields Too Large\" | \"Unavailable For Legal Reasons\" | \"Internal Server Error\" | \"Not Implemented\" | \"Bad Gateway\" | \"Service Unavailable\" | \"Gateway Timeout\" | \"HTTP Version Not Supported\" | \"Variant Also Negotiates\" | \"Insufficient Storage\" | \"Loop Detected\" | \"Not Extended\" | \"Network Authentication Required\" ? {\n            readonly Continue: 100;\n            readonly \"Switching Protocols\": 101;\n            readonly Processing: 102;\n            readonly \"Early Hints\": 103;\n            readonly OK: 200;\n            readonly Created: 201;\n            readonly Accepted: 202;\n            readonly \"Non-Authoritative Information\": 203;\n            readonly \"No Content\": 204;\n            readonly \"Reset Content\": 205;\n            readonly \"Partial Content\": 206;\n            readonly \"Multi-Status\": 207;\n            readonly \"Already Reported\": 208;\n            readonly \"Multiple Choices\": 300;\n            readonly \"Moved Permanently\": 301;\n            readonly Found: 302;\n            readonly \"See Other\": 303;\n            readonly \"Not Modified\": 304;\n            readonly \"Temporary Redirect\": 307;\n            readonly \"Permanent Redirect\": 308;\n            readonly \"Bad Request\": 400;\n            readonly Unauthorized: 401;\n            readonly \"Payment Required\": 402;\n            readonly Forbidden: 403;\n            readonly \"Not Found\": 404;\n            readonly \"Method Not Allowed\": 405;\n            readonly \"Not Acceptable\": 406;\n            readonly \"Proxy Authentication Required\": 407;\n            readonly \"Request Timeout\": 408;\n            readonly Conflict: 409;\n            readonly Gone: 410;\n            readonly \"Length Required\": 411;\n            readonly \"Precondition Failed\": 412;\n            readonly \"Payload Too Large\": 413;\n            readonly \"URI Too Long\": 414;\n            readonly \"Unsupported Media Type\": 415;\n            readonly \"Range Not Satisfiable\": 416;\n            readonly \"Expectation Failed\": 417;\n            readonly \"I'm a teapot\": 418;\n            readonly \"Misdirected Request\": 421;\n            readonly \"Unprocessable Content\": 422;\n            readonly Locked: 423;\n            readonly \"Failed Dependency\": 424;\n            readonly \"Too Early\": 425;\n            readonly \"Upgrade Required\": 426;\n            readonly \"Precondition Required\": 428;\n            readonly \"Too Many Requests\": 429;\n            readonly \"Request Header Fields Too Large\": 431;\n            readonly \"Unavailable For Legal Reasons\": 451;\n            readonly \"Internal Server Error\": 500;\n            readonly \"Not Implemented\": 501;\n            readonly \"Bad Gateway\": 502;\n            readonly \"Service Unavailable\": 503;\n            readonly \"Gateway Timeout\": 504;\n            readonly \"HTTP Version Not Supported\": 505;\n            readonly \"Variant Also Negotiates\": 506;\n            readonly \"Insufficient Storage\": 507;\n            readonly \"Loop Detected\": 508;\n            readonly \"Not Extended\": 510;\n            readonly \"Network Authentication Required\": 511;\n        }[Code] : Code>;\n    }) => {\n        ...;\n    };\n}","start":58,"length":4,"target":"user","line":4,"character":2},{"type":"hover","text":"(parameter) enabled: true","start":65,"length":7,"target":"enabled","line":4,"character":9},{"type":"hover","text":"(property) resolve: ({ cookie: { session } }: {\n    body: unknown;\n    query: Record<string, string>;\n    params: Record<string, string>;\n    headers: Record<string, string | undefined>;\n    cookie: Record<string, Cookie<string | undefined>>;\n    server: Server | null;\n    redirect: redirect;\n    set: {\n        headers: HTTPHeaders;\n        status?: number | keyof StatusMap;\n        redirect?: string;\n        cookie?: Record<string, ElysiaCookie>;\n    };\n    ... 5 more ...;\n    error: <const Code extends number | keyof StatusMap, const T = Code extends 100 | ... 58 more ... | 511 ? {\n        ...;\n    }[Code] : Code>(code: Code, response?: T) => ElysiaCustomStatusResponse<Code, T, Code extends \"Continue\" | \"Switching Protocols\" | \"Processing\" | \"Early Hints\" | \"OK\" | \"Created\" | \"Accepted\" | \"Non-Authoritative Information\" | \"No Content\" | \"Reset Content\" | \"Partial Content\" | \"Multi-Status\" | \"Already Reported\" | \"Multiple Choices\" | \"Moved Permanently\" | \"Found\" | \"See Other\" | \"Not Modified\" | \"Temporary Redirect\" | \"Permanent Redirect\" | \"Bad Request\" | \"Unauthorized\" | \"Payment Required\" | \"Forbidden\" | \"Not Found\" | \"Method Not Allowed\" | \"Not Acceptable\" | \"Proxy Authentication Required\" | \"Request Timeout\" | \"Conflict\" | \"Gone\" | \"Length Required\" | \"Precondition Failed\" | \"Payload Too Large\" | \"URI Too Long\" | \"Unsupported Media Type\" | \"Range Not Satisfiable\" | \"Expectation Failed\" | \"I'm a teapot\" | \"Misdirected Request\" | \"Unprocessable Content\" | \"Locked\" | \"Failed Dependency\" | \"Too Early\" | \"Upgrade Required\" | \"Precondition Required\" | \"Too Many Requests\" | \"Request Header Fields Too Large\" | \"Unavailable For Legal Reasons\" | \"Internal Server Error\" | \"Not Implemented\" | \"Bad Gateway\" | \"Service Unavailable\" | \"Gateway Timeout\" | \"HTTP Version Not Supported\" | \"Variant Also Negotiates\" | \"Insufficient Storage\" | \"Loop Detected\" | \"Not Extended\" | \"Network Authentication Required\" ? {\n        readonly Continue: 100;\n        readonly \"Switching Protocols\": 101;\n        readonly Processing: 102;\n        readonly \"Early Hints\": 103;\n        readonly OK: 200;\n        readonly Created: 201;\n        readonly Accepted: 202;\n        readonly \"Non-Authoritative Information\": 203;\n        readonly \"No Content\": 204;\n        readonly \"Reset Content\": 205;\n        readonly \"Partial Content\": 206;\n        readonly \"Multi-Status\": 207;\n        readonly \"Already Reported\": 208;\n        readonly \"Multiple Choices\": 300;\n        readonly \"Moved Permanently\": 301;\n        readonly Found: 302;\n        readonly \"See Other\": 303;\n        readonly \"Not Modified\": 304;\n        readonly \"Temporary Redirect\": 307;\n        readonly \"Permanent Redirect\": 308;\n        readonly \"Bad Request\": 400;\n        readonly Unauthorized: 401;\n        readonly \"Payment Required\": 402;\n        readonly Forbidden: 403;\n        readonly \"Not Found\": 404;\n        readonly \"Method Not Allowed\": 405;\n        readonly \"Not Acceptable\": 406;\n        readonly \"Proxy Authentication Required\": 407;\n        readonly \"Request Timeout\": 408;\n        readonly Conflict: 409;\n        readonly Gone: 410;\n        readonly \"Length Required\": 411;\n        readonly \"Precondition Failed\": 412;\n        readonly \"Payload Too Large\": 413;\n        readonly \"URI Too Long\": 414;\n        readonly \"Unsupported Media Type\": 415;\n        readonly \"Range Not Satisfiable\": 416;\n        readonly \"Expectation Failed\": 417;\n        readonly \"I'm a teapot\": 418;\n        readonly \"Misdirected Request\": 421;\n        readonly \"Unprocessable Content\": 422;\n        readonly Locked: 423;\n        readonly \"Failed Dependency\": 424;\n        readonly \"Too Early\": 425;\n        readonly \"Upgrade Required\": 426;\n        readonly \"Precondition Required\": 428;\n        readonly \"Too Many Requests\": 429;\n        readonly \"Request Header Fields Too Large\": 431;\n        readonly \"Unavailable For Legal Reasons\": 451;\n        readonly \"Internal Server Error\": 500;\n        readonly \"Not Implemented\": 501;\n        readonly \"Bad Gateway\": 502;\n        readonly \"Service Unavailable\": 503;\n        readonly \"Gateway Timeout\": 504;\n        readonly \"HTTP Version Not Supported\": 505;\n        readonly \"Variant Also Negotiates\": 506;\n        readonly \"Insufficient Storage\": 507;\n        readonly \"Loop Detected\": 508;\n        readonly \"Not Extended\": 510;\n        readonly \"Network Authentication Required\": 511;\n    }[Code] : Code>;\n}) => {\n    ...;\n}","start":89,"length":7,"target":"resolve","line":5,"character":3},{"type":"hover","text":"(property) cookie: Record<string, Cookie<string | undefined>>","start":101,"length":6,"target":"cookie","line":5,"character":15},{"type":"hover","text":"(parameter) session: Cookie<string | undefined>","start":111,"length":7,"target":"session","line":5,"character":25},{"type":"hover","text":"(property) user: string","start":134,"length":4,"target":"user","line":6,"character":4},{"type":"hover","text":"(parameter) session: Cookie<string | undefined>","start":140,"length":7,"target":"session","line":6,"character":10},{"type":"hover","text":"(property) Cookie<string | undefined>.value: string | undefined","start":148,"length":5,"target":"value","line":6,"character":18},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: Partial<{ readonly user: true; }>; macroFn: { ...; }; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.get<\"/\", InputSchema<never>, MergeSchema<UnwrapRoute<InputSchema<never>, {}, \"/\">, MergeSchema<{}, MergeSchema<{}, {}, \"\">, \"\">, \"\">, {\n    readonly user: true;\n}, {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n} & {\n    derive: {};\n    resolve: {\n        user: string;\n    };\n}, ({ user }: {\n    body: unknown;\n    query: Record<string, string>;\n    params: {};\n    headers: Record<string, string | undefined>;\n    cookie: Record<string, Cookie<string | undefined>>;\n    server: Server | null;\n    ... 8 more ...;\n    user: string;\n}) => string>(path: \"/\", handler: ({ user }: {\n    body: unknown;\n    query: Record<string, string>;\n    params: {};\n    headers: Record<string, string | undefined>;\n    cookie: Record<string, Cookie<string | undefined>>;\n    server: Server | null;\n    ... 8 more ...;\n    user: string;\n}) => string, hook?: LocalHook<...> | undefined): Elysia<...>","docs":"### get\nRegister handler for path with method [GET]\n\n---","tags":[["example","```typescript\nimport { Elysia, t } from 'elysia'\n\nnew Elysia()\n    .get('/', () => 'hi')\n    .get('/with-hook', () => 'hi', {\n        response: t.String()\n    })\n```"]],"start":172,"length":3,"target":"get","line":10,"character":2},{"type":"hover","text":"(parameter) user: string","start":184,"length":4,"target":"user","line":10,"character":14},{"type":"hover","text":"(parameter) user: string","start":195,"length":4,"target":"user","line":10,"character":25},{"type":"query","text":"(parameter) user: string","start":195,"length":4,"target":"user","line":10,"character":25},{"type":"hover","text":"(property) user: true","start":205,"length":4,"target":"user","line":11,"character":2}],"meta":{"extension":"ts","compilerOptions":{"strict":true,"module":99,"target":99,"allowJs":true,"skipDefaultLibCheck":true,"skipLibCheck":true,"moduleDetection":3,"baseUrl":"/Users/saltyaom/Documents/web/elysia/documentation/","moduleResolution":100},"handbookOptions":{"errors":[],"noErrors":false,"noErrorsCutted":false,"noErrorValidation":false,"noStaticSemanticInfo":false,"showEmit":false,"keepNotations":false},"removals":[[203,235]],"flagNotations":[],"virtualFiles":[{"offset":0,"filename":"index.ts","filepath":"/Users/saltyaom/Documents/web/elysia/documentation/index.ts","content":"import { Elysia } from 'elysia'\n\nnew Elysia()\n\t.macro({\n\t\tuser: (enabled: true) => ({\n\t\t\tresolve: ({ cookie: { session } }) => ({\n\t\t\t\tuser: session.value!\n\t\t\t})\n\t\t})\n\t})\n\t.get('/', ({ user }) => user, {\n                          // ^?\n\t\tuser: true\n\t})","extension":"ts","supportLsp":true}],"positionQueries":[199],"positionCompletions":[],"positionHighlights":[]},"queries":[{"type":"query","text":"(parameter) user: string","start":195,"length":4,"target":"user","line":10,"character":25}],"completions":[],"errors":[],"highlights":[],"hovers":[{"type":"hover","text":"(alias) class Elysia<const in out BasePath extends string = \"\", const in out Singleton extends SingletonBase = { decorator: {}; store: {}; derive: {}; resolve: {}; }, const in out Definitions extends DefinitionBase = { typebox: {}; error: {}; }, const in out Metadata extends MetadataBase = { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, const out Routes extends RouteBase = {}, const in out Ephemeral extends EphemeralType = { ...; }, const in out Volatile extends EphemeralType = { ...; }>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":9,"length":6,"target":"Elysia","line":0,"character":9},{"type":"hover","text":"(alias) new Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>(config?: ElysiaConfig<\"\"> | undefined): Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":37,"length":6,"target":"Elysia","line":2,"character":4},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.macro<{\n    readonly user: (enabled: true) => {\n        resolve: ({ cookie: { session } }: {\n            body: unknown;\n            query: Record<string, string>;\n            params: Record<string, string>;\n            headers: Record<string, string | undefined>;\n            cookie: Record<string, Cookie<string | undefined>>;\n            server: Server | null;\n            redirect: redirect;\n            set: {\n                headers: HTTPHeaders;\n                status?: number | keyof StatusMap;\n                redirect?: string;\n                cookie?: Record<string, {\n                    domain?: string | undefined | undefined;\n                    expires?: Date | undefined;\n                    httpOnly?: boolean | undefined | undefined;\n                    maxAge?: number | undefined | undefined;\n                    path?: string | undefined | undefined;\n                    priority?: \"low\" | \"medium\" | \"high\" | undefined | undefined;\n                    ... 4 more ...;\n                    value?: unknown;\n                }>;\n            };\n            ... 5 more ...;\n            error: <const Code extends number | keyof StatusMap, const T = Code extends 100 | ... 58 more ... | 511 ? {\n                ...;\n            }[Code] : Code>(code: Code, response?: T) => ElysiaCustomStatusResponse<Code, T, Code extends \"Continue\" | \"Switching Protocols\" | \"Processing\" | \"Early Hints\" | \"OK\" | \"Created\" | \"Accepted\" | \"Non-Authoritative Information\" | \"No Content\" | \"Reset Content\" | \"Partial Content\" | \"Multi-Status\" | \"Already Reported\" | \"Multiple Choices\" | \"Moved Permanently\" | \"Found\" | \"See Other\" | \"Not Modified\" | \"Temporary Redirect\" | \"Permanent Redirect\" | \"Bad Request\" | \"Unauthorized\" | \"Payment Required\" | \"Forbidden\" | \"Not Found\" | \"Method Not Allowed\" | \"Not Acceptable\" | \"Proxy Authentication Required\" | \"Request Timeout\" | \"Conflict\" | \"Gone\" | \"Length Required\" | \"Precondition Failed\" | \"Payload Too Large\" | \"URI Too Long\" | \"Unsupported Media Type\" | \"Range Not Satisfiable\" | \"Expectation Failed\" | \"I'm a teapot\" | \"Misdirected Request\" | \"Unprocessable Content\" | \"Locked\" | \"Failed Dependency\" | \"Too Early\" | \"Upgrade Required\" | \"Precondition Required\" | \"Too Many Requests\" | \"Request Header Fields Too Large\" | \"Unavailable For Legal Reasons\" | \"Internal Server Error\" | \"Not Implemented\" | \"Bad Gateway\" | \"Service Unavailable\" | \"Gateway Timeout\" | \"HTTP Version Not Supported\" | \"Variant Also Negotiates\" | \"Insufficient Storage\" | \"Loop Detected\" | \"Not Extended\" | \"Network Authentication Required\" ? {\n                readonly Continue: 100;\n                readonly \"Switching Protocols\": 101;\n                readonly Processing: 102;\n                readonly \"Early Hints\": 103;\n                readonly OK: 200;\n                readonly Created: 201;\n                readonly Accepted: 202;\n                readonly \"Non-Authoritative Information\": 203;\n                readonly \"No Content\": 204;\n                readonly \"Reset Content\": 205;\n                readonly \"Partial Content\": 206;\n                readonly \"Multi-Status\": 207;\n                readonly \"Already Reported\": 208;\n                readonly \"Multiple Choices\": 300;\n                readonly \"Moved Permanently\": 301;\n                readonly Found: 302;\n                readonly \"See Other\": 303;\n                readonly \"Not Modified\": 304;\n                readonly \"Temporary Redirect\": 307;\n                readonly \"Permanent Redirect\": 308;\n                readonly \"Bad Request\": 400;\n                readonly Unauthorized: 401;\n                readonly \"Payment Required\": 402;\n                readonly Forbidden: 403;\n                readonly \"Not Found\": 404;\n                readonly \"Method Not Allowed\": 405;\n                readonly \"Not Acceptable\": 406;\n                readonly \"Proxy Authentication Required\": 407;\n                readonly \"Request Timeout\": 408;\n                readonly Conflict: 409;\n                readonly Gone: 410;\n                readonly \"Length Required\": 411;\n                readonly \"Precondition Failed\": 412;\n                readonly \"Payload Too Large\": 413;\n                readonly \"URI Too Long\": 414;\n                readonly \"Unsupported Media Type\": 415;\n                readonly \"Range Not Satisfiable\": 416;\n                readonly \"Expectation Failed\": 417;\n                readonly \"I'm a teapot\": 418;\n                readonly \"Misdirected Request\": 421;\n                readonly \"Unprocessable Content\": 422;\n                readonly Locked: 423;\n                readonly \"Failed Dependency\": 424;\n                readonly \"Too Early\": 425;\n                readonly \"Upgrade Required\": 426;\n                readonly \"Precondition Required\": 428;\n                readonly \"Too Many Requests\": 429;\n                readonly \"Request Header Fields Too Large\": 431;\n                readonly \"Unavailable For Legal Reasons\": 451;\n                readonly \"Internal Server Error\": 500;\n                readonly ... (+1 overload)","start":48,"length":5,"target":"macro","line":3,"character":2},{"type":"hover","text":"(property) user: (enabled: true) => {\n    resolve: ({ cookie: { session } }: {\n        body: unknown;\n        query: Record<string, string>;\n        params: Record<string, string>;\n        headers: Record<string, string | undefined>;\n        cookie: Record<string, Cookie<string | undefined>>;\n        server: Server | null;\n        redirect: redirect;\n        set: {\n            headers: HTTPHeaders;\n            status?: number | keyof StatusMap;\n            redirect?: string;\n            cookie?: Record<string, ElysiaCookie>;\n        };\n        ... 5 more ...;\n        error: <const Code extends number | keyof StatusMap, const T = Code extends 100 | ... 58 more ... | 511 ? {\n            ...;\n        }[Code] : Code>(code: Code, response?: T) => ElysiaCustomStatusResponse<Code, T, Code extends \"Continue\" | \"Switching Protocols\" | \"Processing\" | \"Early Hints\" | \"OK\" | \"Created\" | \"Accepted\" | \"Non-Authoritative Information\" | \"No Content\" | \"Reset Content\" | \"Partial Content\" | \"Multi-Status\" | \"Already Reported\" | \"Multiple Choices\" | \"Moved Permanently\" | \"Found\" | \"See Other\" | \"Not Modified\" | \"Temporary Redirect\" | \"Permanent Redirect\" | \"Bad Request\" | \"Unauthorized\" | \"Payment Required\" | \"Forbidden\" | \"Not Found\" | \"Method Not Allowed\" | \"Not Acceptable\" | \"Proxy Authentication Required\" | \"Request Timeout\" | \"Conflict\" | \"Gone\" | \"Length Required\" | \"Precondition Failed\" | \"Payload Too Large\" | \"URI Too Long\" | \"Unsupported Media Type\" | \"Range Not Satisfiable\" | \"Expectation Failed\" | \"I'm a teapot\" | \"Misdirected Request\" | \"Unprocessable Content\" | \"Locked\" | \"Failed Dependency\" | \"Too Early\" | \"Upgrade Required\" | \"Precondition Required\" | \"Too Many Requests\" | \"Request Header Fields Too Large\" | \"Unavailable For Legal Reasons\" | \"Internal Server Error\" | \"Not Implemented\" | \"Bad Gateway\" | \"Service Unavailable\" | \"Gateway Timeout\" | \"HTTP Version Not Supported\" | \"Variant Also Negotiates\" | \"Insufficient Storage\" | \"Loop Detected\" | \"Not Extended\" | \"Network Authentication Required\" ? {\n            readonly Continue: 100;\n            readonly \"Switching Protocols\": 101;\n            readonly Processing: 102;\n            readonly \"Early Hints\": 103;\n            readonly OK: 200;\n            readonly Created: 201;\n            readonly Accepted: 202;\n            readonly \"Non-Authoritative Information\": 203;\n            readonly \"No Content\": 204;\n            readonly \"Reset Content\": 205;\n            readonly \"Partial Content\": 206;\n            readonly \"Multi-Status\": 207;\n            readonly \"Already Reported\": 208;\n            readonly \"Multiple Choices\": 300;\n            readonly \"Moved Permanently\": 301;\n            readonly Found: 302;\n            readonly \"See Other\": 303;\n            readonly \"Not Modified\": 304;\n            readonly \"Temporary Redirect\": 307;\n            readonly \"Permanent Redirect\": 308;\n            readonly \"Bad Request\": 400;\n            readonly Unauthorized: 401;\n            readonly \"Payment Required\": 402;\n            readonly Forbidden: 403;\n            readonly \"Not Found\": 404;\n            readonly \"Method Not Allowed\": 405;\n            readonly \"Not Acceptable\": 406;\n            readonly \"Proxy Authentication Required\": 407;\n            readonly \"Request Timeout\": 408;\n            readonly Conflict: 409;\n            readonly Gone: 410;\n            readonly \"Length Required\": 411;\n            readonly \"Precondition Failed\": 412;\n            readonly \"Payload Too Large\": 413;\n            readonly \"URI Too Long\": 414;\n            readonly \"Unsupported Media Type\": 415;\n            readonly \"Range Not Satisfiable\": 416;\n            readonly \"Expectation Failed\": 417;\n            readonly \"I'm a teapot\": 418;\n            readonly \"Misdirected Request\": 421;\n            readonly \"Unprocessable Content\": 422;\n            readonly Locked: 423;\n            readonly \"Failed Dependency\": 424;\n            readonly \"Too Early\": 425;\n            readonly \"Upgrade Required\": 426;\n            readonly \"Precondition Required\": 428;\n            readonly \"Too Many Requests\": 429;\n            readonly \"Request Header Fields Too Large\": 431;\n            readonly \"Unavailable For Legal Reasons\": 451;\n            readonly \"Internal Server Error\": 500;\n            readonly \"Not Implemented\": 501;\n            readonly \"Bad Gateway\": 502;\n            readonly \"Service Unavailable\": 503;\n            readonly \"Gateway Timeout\": 504;\n            readonly \"HTTP Version Not Supported\": 505;\n            readonly \"Variant Also Negotiates\": 506;\n            readonly \"Insufficient Storage\": 507;\n            readonly \"Loop Detected\": 508;\n            readonly \"Not Extended\": 510;\n            readonly \"Network Authentication Required\": 511;\n        }[Code] : Code>;\n    }) => {\n        ...;\n    };\n}","start":58,"length":4,"target":"user","line":4,"character":2},{"type":"hover","text":"(parameter) enabled: true","start":65,"length":7,"target":"enabled","line":4,"character":9},{"type":"hover","text":"(property) resolve: ({ cookie: { session } }: {\n    body: unknown;\n    query: Record<string, string>;\n    params: Record<string, string>;\n    headers: Record<string, string | undefined>;\n    cookie: Record<string, Cookie<string | undefined>>;\n    server: Server | null;\n    redirect: redirect;\n    set: {\n        headers: HTTPHeaders;\n        status?: number | keyof StatusMap;\n        redirect?: string;\n        cookie?: Record<string, ElysiaCookie>;\n    };\n    ... 5 more ...;\n    error: <const Code extends number | keyof StatusMap, const T = Code extends 100 | ... 58 more ... | 511 ? {\n        ...;\n    }[Code] : Code>(code: Code, response?: T) => ElysiaCustomStatusResponse<Code, T, Code extends \"Continue\" | \"Switching Protocols\" | \"Processing\" | \"Early Hints\" | \"OK\" | \"Created\" | \"Accepted\" | \"Non-Authoritative Information\" | \"No Content\" | \"Reset Content\" | \"Partial Content\" | \"Multi-Status\" | \"Already Reported\" | \"Multiple Choices\" | \"Moved Permanently\" | \"Found\" | \"See Other\" | \"Not Modified\" | \"Temporary Redirect\" | \"Permanent Redirect\" | \"Bad Request\" | \"Unauthorized\" | \"Payment Required\" | \"Forbidden\" | \"Not Found\" | \"Method Not Allowed\" | \"Not Acceptable\" | \"Proxy Authentication Required\" | \"Request Timeout\" | \"Conflict\" | \"Gone\" | \"Length Required\" | \"Precondition Failed\" | \"Payload Too Large\" | \"URI Too Long\" | \"Unsupported Media Type\" | \"Range Not Satisfiable\" | \"Expectation Failed\" | \"I'm a teapot\" | \"Misdirected Request\" | \"Unprocessable Content\" | \"Locked\" | \"Failed Dependency\" | \"Too Early\" | \"Upgrade Required\" | \"Precondition Required\" | \"Too Many Requests\" | \"Request Header Fields Too Large\" | \"Unavailable For Legal Reasons\" | \"Internal Server Error\" | \"Not Implemented\" | \"Bad Gateway\" | \"Service Unavailable\" | \"Gateway Timeout\" | \"HTTP Version Not Supported\" | \"Variant Also Negotiates\" | \"Insufficient Storage\" | \"Loop Detected\" | \"Not Extended\" | \"Network Authentication Required\" ? {\n        readonly Continue: 100;\n        readonly \"Switching Protocols\": 101;\n        readonly Processing: 102;\n        readonly \"Early Hints\": 103;\n        readonly OK: 200;\n        readonly Created: 201;\n        readonly Accepted: 202;\n        readonly \"Non-Authoritative Information\": 203;\n        readonly \"No Content\": 204;\n        readonly \"Reset Content\": 205;\n        readonly \"Partial Content\": 206;\n        readonly \"Multi-Status\": 207;\n        readonly \"Already Reported\": 208;\n        readonly \"Multiple Choices\": 300;\n        readonly \"Moved Permanently\": 301;\n        readonly Found: 302;\n        readonly \"See Other\": 303;\n        readonly \"Not Modified\": 304;\n        readonly \"Temporary Redirect\": 307;\n        readonly \"Permanent Redirect\": 308;\n        readonly \"Bad Request\": 400;\n        readonly Unauthorized: 401;\n        readonly \"Payment Required\": 402;\n        readonly Forbidden: 403;\n        readonly \"Not Found\": 404;\n        readonly \"Method Not Allowed\": 405;\n        readonly \"Not Acceptable\": 406;\n        readonly \"Proxy Authentication Required\": 407;\n        readonly \"Request Timeout\": 408;\n        readonly Conflict: 409;\n        readonly Gone: 410;\n        readonly \"Length Required\": 411;\n        readonly \"Precondition Failed\": 412;\n        readonly \"Payload Too Large\": 413;\n        readonly \"URI Too Long\": 414;\n        readonly \"Unsupported Media Type\": 415;\n        readonly \"Range Not Satisfiable\": 416;\n        readonly \"Expectation Failed\": 417;\n        readonly \"I'm a teapot\": 418;\n        readonly \"Misdirected Request\": 421;\n        readonly \"Unprocessable Content\": 422;\n        readonly Locked: 423;\n        readonly \"Failed Dependency\": 424;\n        readonly \"Too Early\": 425;\n        readonly \"Upgrade Required\": 426;\n        readonly \"Precondition Required\": 428;\n        readonly \"Too Many Requests\": 429;\n        readonly \"Request Header Fields Too Large\": 431;\n        readonly \"Unavailable For Legal Reasons\": 451;\n        readonly \"Internal Server Error\": 500;\n        readonly \"Not Implemented\": 501;\n        readonly \"Bad Gateway\": 502;\n        readonly \"Service Unavailable\": 503;\n        readonly \"Gateway Timeout\": 504;\n        readonly \"HTTP Version Not Supported\": 505;\n        readonly \"Variant Also Negotiates\": 506;\n        readonly \"Insufficient Storage\": 507;\n        readonly \"Loop Detected\": 508;\n        readonly \"Not Extended\": 510;\n        readonly \"Network Authentication Required\": 511;\n    }[Code] : Code>;\n}) => {\n    ...;\n}","start":89,"length":7,"target":"resolve","line":5,"character":3},{"type":"hover","text":"(property) cookie: Record<string, Cookie<string | undefined>>","start":101,"length":6,"target":"cookie","line":5,"character":15},{"type":"hover","text":"(parameter) session: Cookie<string | undefined>","start":111,"length":7,"target":"session","line":5,"character":25},{"type":"hover","text":"(property) user: string","start":134,"length":4,"target":"user","line":6,"character":4},{"type":"hover","text":"(parameter) session: Cookie<string | undefined>","start":140,"length":7,"target":"session","line":6,"character":10},{"type":"hover","text":"(property) Cookie<string | undefined>.value: string | undefined","start":148,"length":5,"target":"value","line":6,"character":18},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: Partial<{ readonly user: true; }>; macroFn: { ...; }; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.get<\"/\", InputSchema<never>, MergeSchema<UnwrapRoute<InputSchema<never>, {}, \"/\">, MergeSchema<{}, MergeSchema<{}, {}, \"\">, \"\">, \"\">, {\n    readonly user: true;\n}, {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n} & {\n    derive: {};\n    resolve: {\n        user: string;\n    };\n}, ({ user }: {\n    body: unknown;\n    query: Record<string, string>;\n    params: {};\n    headers: Record<string, string | undefined>;\n    cookie: Record<string, Cookie<string | undefined>>;\n    server: Server | null;\n    ... 8 more ...;\n    user: string;\n}) => string>(path: \"/\", handler: ({ user }: {\n    body: unknown;\n    query: Record<string, string>;\n    params: {};\n    headers: Record<string, string | undefined>;\n    cookie: Record<string, Cookie<string | undefined>>;\n    server: Server | null;\n    ... 8 more ...;\n    user: string;\n}) => string, hook?: LocalHook<...> | undefined): Elysia<...>","docs":"### get\nRegister handler for path with method [GET]\n\n---","tags":[["example","```typescript\nimport { Elysia, t } from 'elysia'\n\nnew Elysia()\n    .get('/', () => 'hi')\n    .get('/with-hook', () => 'hi', {\n        response: t.String()\n    })\n```"]],"start":172,"length":3,"target":"get","line":10,"character":2},{"type":"hover","text":"(parameter) user: string","start":184,"length":4,"target":"user","line":10,"character":14},{"type":"hover","text":"(parameter) user: string","start":195,"length":4,"target":"user","line":10,"character":25},{"type":"hover","text":"(property) user: true","start":205,"length":4,"target":"user","line":11,"character":2}],"tags":[]}