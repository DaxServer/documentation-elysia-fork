{"code":"// client.ts\nimport { treaty } from '@elysiajs/eden'\nimport type { App } from './server'\n\nconst app = treaty<App>('localhost:3000')\n\n// Get data from /user/617\nconst { data } = await app.user({ id: 617 }).get()\n\nconsole.log(data)","nodes":[{"type":"hover","text":"(alias) const treaty: <const App extends Elysia<any, any, any, any, any, any, any>>(domain: string | App, config?: Treaty.Config) => Treaty.Create<App>\nimport treaty","start":22,"length":6,"target":"treaty","line":1,"character":9},{"type":"hover","text":"(alias) type App = Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    user: {\n        \":id\": {\n            get: {\n                body: unknown;\n                params: {\n                    id: number;\n                };\n                query: unknown;\n                headers: unknown;\n                response: {\n                    200: number;\n                    422: {\n                        type: \"validation\";\n                        on: string;\n                        summary?: string;\n                        message?: string;\n                        found?: unknown;\n                        property?: string;\n                        expected?: string;\n                    };\n                };\n            };\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>\nimport App","start":67,"length":3,"target":"App","line":2,"character":14},{"type":"hover","text":"const app: {\n    user: ((params: {\n        id: string | number;\n    }) => {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: number;\n            422: {\n                type: \"validation\";\n                on: string;\n                summary?: string;\n                message?: string;\n                found?: unknown;\n                property?: string;\n                expected?: string;\n            };\n        }>>;\n    }) & {};\n}","start":96,"length":3,"target":"app","line":4,"character":6},{"type":"hover","text":"(alias) treaty<Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    user: {\n        \":id\": {\n            get: {\n                body: unknown;\n                params: {\n                    id: number;\n                };\n                query: unknown;\n                headers: unknown;\n                response: {\n                    200: number;\n                    422: {\n                        type: \"validation\";\n                        on: string;\n                        summary?: string;\n                        message?: string;\n                        found?: unknown;\n                        property?: string;\n                        expected?: string;\n                    };\n                };\n            };\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>>(domain: string | Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, ... 4 more ..., {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>, config?: Treaty.Config): {\n    ...;\n}\nimport treaty","start":102,"length":6,"target":"treaty","line":4,"character":12},{"type":"hover","text":"(alias) type App = Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    user: {\n        \":id\": {\n            get: {\n                body: unknown;\n                params: {\n                    id: number;\n                };\n                query: unknown;\n                headers: unknown;\n                response: {\n                    200: number;\n                    422: {\n                        type: \"validation\";\n                        on: string;\n                        summary?: string;\n                        message?: string;\n                        found?: unknown;\n                        property?: string;\n                        expected?: string;\n                    };\n                };\n            };\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>\nimport App","start":109,"length":3,"target":"App","line":4,"character":19},{"type":"hover","text":"const data: number | null","start":168,"length":4,"target":"data","line":7,"character":8},{"type":"query","text":"const data: number | null","start":168,"length":4,"target":"data","line":7,"character":8},{"type":"hover","text":"const app: {\n    user: ((params: {\n        id: string | number;\n    }) => {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: number;\n            422: {\n                type: \"validation\";\n                on: string;\n                summary?: string;\n                message?: string;\n                found?: unknown;\n                property?: string;\n                expected?: string;\n            };\n        }>>;\n    }) & {};\n}","start":183,"length":3,"target":"app","line":7,"character":23},{"type":"hover","text":"(property) user: (params: {\n    id: string | number;\n}) => {\n    get: (options?: {\n        headers?: Record<string, unknown> | undefined;\n        query?: Record<string, unknown> | undefined;\n        fetch?: RequestInit | undefined;\n    } | undefined) => Promise<Treaty.TreatyResponse<{\n        200: number;\n        422: {\n            type: \"validation\";\n            on: string;\n            summary?: string;\n            message?: string;\n            found?: unknown;\n            property?: string;\n            expected?: string;\n        };\n    }>>;\n}","start":187,"length":4,"target":"user","line":7,"character":27},{"type":"hover","text":"(property) id: string | number","start":194,"length":2,"target":"id","line":7,"character":34},{"type":"hover","text":"(property) get: (options?: {\n    headers?: Record<string, unknown> | undefined;\n    query?: Record<string, unknown> | undefined;\n    fetch?: RequestInit | undefined;\n} | undefined) => Promise<Treaty.TreatyResponse<{\n    200: number;\n    422: {\n        type: \"validation\";\n        on: string;\n        summary?: string;\n        message?: string;\n        found?: unknown;\n        property?: string;\n        expected?: string;\n    };\n}>>","start":205,"length":3,"target":"get","line":7,"character":45},{"type":"hover","text":"namespace console\nvar console: Console","docs":"The `console` module provides a simple debugging console that is similar to the\nJavaScript console mechanism provided by web browsers.\n\nThe module exports two specific components:\n\n* A `Console` class with methods such as `console.log()`, `console.error()` and `console.warn()` that can be used to write to any Node.js stream.\n* A global `console` instance configured to write to [`process.stdout`](https://nodejs.org/docs/latest-v24.x/api/process.html#processstdout) and\n[`process.stderr`](https://nodejs.org/docs/latest-v24.x/api/process.html#processstderr). The global `console` can be used without importing the `node:console` module.\n\n_**Warning**_: The global console object's methods are neither consistently\nsynchronous like the browser APIs they resemble, nor are they consistently\nasynchronous like all other Node.js streams. See the [`note on process I/O`](https://nodejs.org/docs/latest-v24.x/api/process.html#a-note-on-process-io) for\nmore information.\n\nExample using the global `console`:\n\n```js\nconsole.log('hello world');\n// Prints: hello world, to stdout\nconsole.log('hello %s', 'world');\n// Prints: hello world, to stdout\nconsole.error(new Error('Whoops, something bad happened'));\n// Prints error message and stack trace to stderr:\n//   Error: Whoops, something bad happened\n//     at [eval]:5:15\n//     at Script.runInThisContext (node:vm:132:18)\n//     at Object.runInThisContext (node:vm:309:38)\n//     at node:internal/process/execution:77:19\n//     at [eval]-wrapper:6:22\n//     at evalScript (node:internal/process/execution:76:60)\n//     at node:internal/main/eval_string:23:3\n\nconst name = 'Will Robinson';\nconsole.warn(`Danger ${name}! Danger!`);\n// Prints: Danger Will Robinson! Danger!, to stderr\n```\n\nExample using the `Console` class:\n\n```js\nconst out = getStreamSomehow();\nconst err = getStreamSomehow();\nconst myConsole = new console.Console(out, err);\n\nmyConsole.log('hello world');\n// Prints: hello world, to out\nmyConsole.log('hello %s', 'world');\n// Prints: hello world, to out\nmyConsole.error(new Error('Whoops, something bad happened'));\n// Prints: [Error: Whoops, something bad happened], to err\n\nconst name = 'Will Robinson';\nmyConsole.warn(`Danger ${name}! Danger!`);\n// Prints: Danger Will Robinson! Danger!, to err\n```","tags":[["see","[source](https://github.com/nodejs/node/blob/v24.x/lib/console.js)"]],"start":212,"length":7,"target":"console","line":9,"character":0},{"type":"hover","text":"(method) Console.log(message?: any, ...optionalParams: any[]): void (+2 overloads)","docs":"Prints to `stdout` with newline. Multiple arguments can be passed, with the\nfirst used as the primary message and all additional used as substitution\nvalues similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html)\n(the arguments are all passed to [`util.format()`](https://nodejs.org/docs/latest-v24.x/api/util.html#utilformatformat-args)).\n\n```js\nconst count = 5;\nconsole.log('count: %d', count);\n// Prints: count: 5, to stdout\nconsole.log('count:', count);\n// Prints: count: 5, to stdout\n```\n\nSee [`util.format()`](https://nodejs.org/docs/latest-v24.x/api/util.html#utilformatformat-args) for more information.","tags":[["since","v0.1.100"]],"start":220,"length":3,"target":"log","line":9,"character":8},{"type":"hover","text":"const data: number | null","start":224,"length":4,"target":"data","line":9,"character":12}],"meta":{"extension":"ts","compilerOptions":{"strict":true,"module":99,"target":99,"allowJs":true,"skipDefaultLibCheck":true,"skipLibCheck":true,"moduleDetection":3,"baseUrl":"/Users/saltyaom/Documents/web/elysia/documentation/","moduleResolution":100},"handbookOptions":{"errors":[],"noErrors":false,"noErrorsCutted":false,"noErrorValidation":false,"noStaticSemanticInfo":false,"showEmit":false,"keepNotations":false},"removals":[[506,518],[0,295]],"flagNotations":[],"virtualFiles":[{"offset":0,"filename":"server.ts","filepath":"/Users/saltyaom/Documents/web/elysia/documentation/server.ts","content":"// @filename: server.ts\nimport { Elysia, t } from 'elysia'\n\nconst app = new Elysia()\n    .get('/user/:id', ({ params: { id } }) => id, {\n        params: t.Object({\n            id: t.Number()\n        })\n    })\n    .listen(3000)\n\nexport type App = typeof app\n\n","extension":"ts","supportLsp":true},{"offset":258,"filename":"client.ts","filepath":"/Users/saltyaom/Documents/web/elysia/documentation/client.ts","content":"// @filename: client.ts\n// ---cut---\n// client.ts\nimport { treaty } from '@elysiajs/eden'\nimport type { App } from './server'\n\nconst app = treaty<App>('localhost:3000')\n\n// Get data from /user/617\nconst { data } = await app.user({ id: 617 }).get()\n      // ^?\n\nconsole.log(data)","extension":"ts","supportLsp":true}],"positionQueries":[464],"positionCompletions":[],"positionHighlights":[]},"queries":[{"type":"query","text":"const data: number | null","start":168,"length":4,"target":"data","line":7,"character":8}],"completions":[],"errors":[],"highlights":[],"hovers":[{"type":"hover","text":"(alias) const treaty: <const App extends Elysia<any, any, any, any, any, any, any>>(domain: string | App, config?: Treaty.Config) => Treaty.Create<App>\nimport treaty","start":22,"length":6,"target":"treaty","line":1,"character":9},{"type":"hover","text":"(alias) type App = Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    user: {\n        \":id\": {\n            get: {\n                body: unknown;\n                params: {\n                    id: number;\n                };\n                query: unknown;\n                headers: unknown;\n                response: {\n                    200: number;\n                    422: {\n                        type: \"validation\";\n                        on: string;\n                        summary?: string;\n                        message?: string;\n                        found?: unknown;\n                        property?: string;\n                        expected?: string;\n                    };\n                };\n            };\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>\nimport App","start":67,"length":3,"target":"App","line":2,"character":14},{"type":"hover","text":"const app: {\n    user: ((params: {\n        id: string | number;\n    }) => {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: number;\n            422: {\n                type: \"validation\";\n                on: string;\n                summary?: string;\n                message?: string;\n                found?: unknown;\n                property?: string;\n                expected?: string;\n            };\n        }>>;\n    }) & {};\n}","start":96,"length":3,"target":"app","line":4,"character":6},{"type":"hover","text":"(alias) treaty<Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    user: {\n        \":id\": {\n            get: {\n                body: unknown;\n                params: {\n                    id: number;\n                };\n                query: unknown;\n                headers: unknown;\n                response: {\n                    200: number;\n                    422: {\n                        type: \"validation\";\n                        on: string;\n                        summary?: string;\n                        message?: string;\n                        found?: unknown;\n                        property?: string;\n                        expected?: string;\n                    };\n                };\n            };\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>>(domain: string | Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, ... 4 more ..., {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>, config?: Treaty.Config): {\n    ...;\n}\nimport treaty","start":102,"length":6,"target":"treaty","line":4,"character":12},{"type":"hover","text":"(alias) type App = Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    user: {\n        \":id\": {\n            get: {\n                body: unknown;\n                params: {\n                    id: number;\n                };\n                query: unknown;\n                headers: unknown;\n                response: {\n                    200: number;\n                    422: {\n                        type: \"validation\";\n                        on: string;\n                        summary?: string;\n                        message?: string;\n                        found?: unknown;\n                        property?: string;\n                        expected?: string;\n                    };\n                };\n            };\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>\nimport App","start":109,"length":3,"target":"App","line":4,"character":19},{"type":"hover","text":"const data: number | null","start":168,"length":4,"target":"data","line":7,"character":8},{"type":"hover","text":"const app: {\n    user: ((params: {\n        id: string | number;\n    }) => {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: number;\n            422: {\n                type: \"validation\";\n                on: string;\n                summary?: string;\n                message?: string;\n                found?: unknown;\n                property?: string;\n                expected?: string;\n            };\n        }>>;\n    }) & {};\n}","start":183,"length":3,"target":"app","line":7,"character":23},{"type":"hover","text":"(property) user: (params: {\n    id: string | number;\n}) => {\n    get: (options?: {\n        headers?: Record<string, unknown> | undefined;\n        query?: Record<string, unknown> | undefined;\n        fetch?: RequestInit | undefined;\n    } | undefined) => Promise<Treaty.TreatyResponse<{\n        200: number;\n        422: {\n            type: \"validation\";\n            on: string;\n            summary?: string;\n            message?: string;\n            found?: unknown;\n            property?: string;\n            expected?: string;\n        };\n    }>>;\n}","start":187,"length":4,"target":"user","line":7,"character":27},{"type":"hover","text":"(property) id: string | number","start":194,"length":2,"target":"id","line":7,"character":34},{"type":"hover","text":"(property) get: (options?: {\n    headers?: Record<string, unknown> | undefined;\n    query?: Record<string, unknown> | undefined;\n    fetch?: RequestInit | undefined;\n} | undefined) => Promise<Treaty.TreatyResponse<{\n    200: number;\n    422: {\n        type: \"validation\";\n        on: string;\n        summary?: string;\n        message?: string;\n        found?: unknown;\n        property?: string;\n        expected?: string;\n    };\n}>>","start":205,"length":3,"target":"get","line":7,"character":45},{"type":"hover","text":"namespace console\nvar console: Console","docs":"The `console` module provides a simple debugging console that is similar to the\nJavaScript console mechanism provided by web browsers.\n\nThe module exports two specific components:\n\n* A `Console` class with methods such as `console.log()`, `console.error()` and `console.warn()` that can be used to write to any Node.js stream.\n* A global `console` instance configured to write to [`process.stdout`](https://nodejs.org/docs/latest-v24.x/api/process.html#processstdout) and\n[`process.stderr`](https://nodejs.org/docs/latest-v24.x/api/process.html#processstderr). The global `console` can be used without importing the `node:console` module.\n\n_**Warning**_: The global console object's methods are neither consistently\nsynchronous like the browser APIs they resemble, nor are they consistently\nasynchronous like all other Node.js streams. See the [`note on process I/O`](https://nodejs.org/docs/latest-v24.x/api/process.html#a-note-on-process-io) for\nmore information.\n\nExample using the global `console`:\n\n```js\nconsole.log('hello world');\n// Prints: hello world, to stdout\nconsole.log('hello %s', 'world');\n// Prints: hello world, to stdout\nconsole.error(new Error('Whoops, something bad happened'));\n// Prints error message and stack trace to stderr:\n//   Error: Whoops, something bad happened\n//     at [eval]:5:15\n//     at Script.runInThisContext (node:vm:132:18)\n//     at Object.runInThisContext (node:vm:309:38)\n//     at node:internal/process/execution:77:19\n//     at [eval]-wrapper:6:22\n//     at evalScript (node:internal/process/execution:76:60)\n//     at node:internal/main/eval_string:23:3\n\nconst name = 'Will Robinson';\nconsole.warn(`Danger ${name}! Danger!`);\n// Prints: Danger Will Robinson! Danger!, to stderr\n```\n\nExample using the `Console` class:\n\n```js\nconst out = getStreamSomehow();\nconst err = getStreamSomehow();\nconst myConsole = new console.Console(out, err);\n\nmyConsole.log('hello world');\n// Prints: hello world, to out\nmyConsole.log('hello %s', 'world');\n// Prints: hello world, to out\nmyConsole.error(new Error('Whoops, something bad happened'));\n// Prints: [Error: Whoops, something bad happened], to err\n\nconst name = 'Will Robinson';\nmyConsole.warn(`Danger ${name}! Danger!`);\n// Prints: Danger Will Robinson! Danger!, to err\n```","tags":[["see","[source](https://github.com/nodejs/node/blob/v24.x/lib/console.js)"]],"start":212,"length":7,"target":"console","line":9,"character":0},{"type":"hover","text":"(method) Console.log(message?: any, ...optionalParams: any[]): void (+2 overloads)","docs":"Prints to `stdout` with newline. Multiple arguments can be passed, with the\nfirst used as the primary message and all additional used as substitution\nvalues similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html)\n(the arguments are all passed to [`util.format()`](https://nodejs.org/docs/latest-v24.x/api/util.html#utilformatformat-args)).\n\n```js\nconst count = 5;\nconsole.log('count: %d', count);\n// Prints: count: 5, to stdout\nconsole.log('count:', count);\n// Prints: count: 5, to stdout\n```\n\nSee [`util.format()`](https://nodejs.org/docs/latest-v24.x/api/util.html#utilformatformat-args) for more information.","tags":[["since","v0.1.100"]],"start":220,"length":3,"target":"log","line":9,"character":8},{"type":"hover","text":"const data: number | null","start":224,"length":4,"target":"data","line":9,"character":12}],"tags":[]}