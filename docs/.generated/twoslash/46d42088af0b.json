{"code":"import { Elysia } from 'elysia'\n\nconst setup = new Elysia({ name: 'setup' })\n    .decorate({\n        argon: 'a',\n        boron: 'b',\n        carbon: 'c'\n    })\n\nconst app = new Elysia()\n    .use(\n        setup\n            .prefix('decorator', 'setup')\n    )\n    .get('/', ({ setupCarbon, ...rest }) => setupCarbon)","nodes":[{"type":"hover","text":"(alias) class Elysia<const in out BasePath extends string = \"\", const in out Singleton extends SingletonBase = { decorator: {}; store: {}; derive: {}; resolve: {}; }, const in out Definitions extends DefinitionBase = { typebox: {}; error: {}; }, const in out Metadata extends MetadataBase = { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, const out Routes extends RouteBase = {}, const in out Ephemeral extends EphemeralType = { ...; }, const in out Volatile extends EphemeralType = { ...; }>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":9,"length":6,"target":"Elysia","line":0,"character":9},{"type":"hover","text":"const setup: Elysia<\"\", {\n    decorator: {\n        argon: string;\n        boron: string;\n        carbon: string;\n    };\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>","start":39,"length":5,"target":"setup","line":2,"character":6},{"type":"hover","text":"(alias) new Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>(config?: ElysiaConfig<\"\"> | undefined): Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":51,"length":6,"target":"Elysia","line":2,"character":18},{"type":"hover","text":"(property) ElysiaConfig<Prefix extends string | undefined>.name?: string | undefined","docs":"Name of the instance for debugging, and plugin deduplication purpose","start":60,"length":4,"target":"name","line":2,"character":27},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.decorate<{\n    argon: string;\n    boron: string;\n    carbon: string;\n}>(decorators: {\n    argon: string;\n    boron: string;\n    carbon: string;\n}): Elysia<\"\", {\n    decorator: {\n        argon: string;\n        boron: string;\n        carbon: string;\n    };\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}> (+4 overloads)","docs":"### decorate\nDefine custom method to `Context` accessible for all handler\n\n---","tags":[["example","```typescript\nnew Elysia()\n    .decorate('getDate', () => Date.now())\n    .get('/', (({ getDate }) => getDate())\n```"]],"start":82,"length":8,"target":"decorate","line":3,"character":5},{"type":"hover","text":"(property) argon: string","start":101,"length":5,"target":"argon","line":4,"character":8},{"type":"hover","text":"(property) boron: string","start":121,"length":5,"target":"boron","line":5,"character":8},{"type":"hover","text":"(property) carbon: string","start":141,"length":6,"target":"carbon","line":6,"character":8},{"type":"hover","text":"const app: Elysia<\"\", {\n    decorator: {\n        setupArgon: string;\n        setupBoron: string;\n        setupCarbon: string;\n    };\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    get: {\n        body: unknown;\n        params: {};\n        query: unknown;\n        headers: unknown;\n        response: {\n            200: string;\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>","start":167,"length":3,"target":"app","line":9,"character":6},{"type":"hover","text":"(alias) new Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>(config?: ElysiaConfig<\"\"> | undefined): Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":177,"length":6,"target":"Elysia","line":9,"character":16},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.use<Elysia<\"\", {\n    decorator: AddPrefixCapitalize<\"setup\", {\n        argon: string;\n        boron: string;\n        carbon: string;\n    }>;\n    store: {};\n    derive: AddPrefixCapitalize<\"setup\", {}>;\n    resolve: AddPrefixCapitalize<\"setup\", {}>;\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>>(instance: MaybePromise<Elysia<\"\", {\n    decorator: AddPrefixCapitalize<\"setup\", {\n        argon: string;\n        boron: string;\n        carbon: string;\n    }>;\n    store: {};\n    derive: AddPrefixCapitalize<\"setup\", {}>;\n    resolve: AddPrefixCapitalize<\"setup\", {}>;\n}, ... 4 more ..., {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>>): Elysia<...> (+5 overloads)","docs":"Entire Instance","start":191,"length":3,"target":"use","line":10,"character":5},{"type":"hover","text":"const setup: Elysia<\"\", {\n    decorator: {\n        argon: string;\n        boron: string;\n        carbon: string;\n    };\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>","start":204,"length":5,"target":"setup","line":11,"character":8},{"type":"hover","text":"(method) Elysia<\"\", { decorator: { argon: string; boron: string; carbon: string; }; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.prefix<\"decorator\", \"setup\">(type: \"decorator\", word: \"setup\"): Elysia<\"\", {\n    decorator: AddPrefixCapitalize<\"setup\", {\n        argon: string;\n        boron: string;\n        carbon: string;\n    }>;\n    store: {};\n    derive: AddPrefixCapitalize<\"setup\", {}>;\n    resolve: AddPrefixCapitalize<\"setup\", {}>;\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>","start":223,"length":6,"target":"prefix","line":12,"character":13},{"type":"hover","text":"(method) Elysia<\"\", { decorator: { setupArgon: string; setupBoron: string; setupCarbon: string; }; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.get<\"/\", InputSchema<never>, MergeSchema<UnwrapRoute<InputSchema<never>, {}, \"/\">, MergeSchema<{}, MergeSchema<{}, {}, \"\">, \"\">, \"\"> & {}, {}, {\n    decorator: {\n        setupArgon: string;\n        setupBoron: string;\n        setupCarbon: string;\n    };\n    store: {};\n    derive: {};\n    resolve: {};\n} & {\n    derive: {};\n    resolve: {};\n}, ({ setupCarbon, ...rest }: {\n    body: unknown;\n    query: Record<string, string>;\n    params: {};\n    headers: Record<string, string | undefined>;\n    cookie: Record<string, Cookie<string | undefined>>;\n    ... 11 more ...;\n    setupCarbon: string;\n}) => string>(path: \"/\", handler: ({ setupCarbon, ...rest }: {\n    body: unknown;\n    query: Record<string, string>;\n    params: {};\n    headers: Record<string, string | undefined>;\n    cookie: Record<string, Cookie<string | undefined>>;\n    ... 11 more ...;\n    setupCarbon: string;\n}) => string, hook?: LocalHook<...> | undefined): Elysia<...>","docs":"### get\nRegister handler for path with method [GET]\n\n---","tags":[["example","```typescript\nimport { Elysia, t } from 'elysia'\n\nnew Elysia()\n    .get('/', () => 'hi')\n    .get('/with-hook', () => 'hi', {\n        response: t.String()\n    })\n```"]],"start":263,"length":3,"target":"get","line":14,"character":5},{"type":"hover","text":"(parameter) setupCarbon: string","start":275,"length":11,"target":"setupCarbon","line":14,"character":17},{"type":"hover","text":"(parameter) rest: {\n    body: unknown;\n    query: Record<string, string>;\n    params: {};\n    headers: Record<string, string | undefined>;\n    cookie: Record<string, Cookie<string | undefined>>;\n    server: Server | null;\n    redirect: redirect;\n    set: {\n        headers: HTTPHeaders;\n        status?: number | keyof StatusMap;\n        redirect?: string;\n        cookie?: Record<string, ElysiaCookie>;\n    };\n    ... 7 more ...;\n    setupBoron: string;\n}","start":291,"length":4,"target":"rest","line":14,"character":33},{"type":"hover","text":"(parameter) setupCarbon: string","start":302,"length":11,"target":"setupCarbon","line":14,"character":44}],"meta":{"extension":"ts","compilerOptions":{"strict":true,"module":99,"target":99,"allowJs":true,"skipDefaultLibCheck":true,"skipLibCheck":true,"moduleDetection":3,"baseUrl":"/Users/saltyaom/Documents/web/elysia/documentation/","moduleResolution":100},"handbookOptions":{"errors":[],"noErrors":false,"noErrorsCutted":false,"noErrorValidation":false,"noStaticSemanticInfo":false,"showEmit":false,"keepNotations":false},"removals":[],"flagNotations":[],"virtualFiles":[{"offset":0,"filename":"index.ts","filepath":"/Users/saltyaom/Documents/web/elysia/documentation/index.ts","content":"import { Elysia } from 'elysia'\n\nconst setup = new Elysia({ name: 'setup' })\n    .decorate({\n        argon: 'a',\n        boron: 'b',\n        carbon: 'c'\n    })\n\nconst app = new Elysia()\n    .use(\n        setup\n            .prefix('decorator', 'setup')\n    )\n    .get('/', ({ setupCarbon, ...rest }) => setupCarbon)","extension":"ts","supportLsp":true}],"positionQueries":[],"positionCompletions":[],"positionHighlights":[]},"queries":[],"completions":[],"errors":[],"highlights":[],"hovers":[{"type":"hover","text":"(alias) class Elysia<const in out BasePath extends string = \"\", const in out Singleton extends SingletonBase = { decorator: {}; store: {}; derive: {}; resolve: {}; }, const in out Definitions extends DefinitionBase = { typebox: {}; error: {}; }, const in out Metadata extends MetadataBase = { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, const out Routes extends RouteBase = {}, const in out Ephemeral extends EphemeralType = { ...; }, const in out Volatile extends EphemeralType = { ...; }>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":9,"length":6,"target":"Elysia","line":0,"character":9},{"type":"hover","text":"const setup: Elysia<\"\", {\n    decorator: {\n        argon: string;\n        boron: string;\n        carbon: string;\n    };\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>","start":39,"length":5,"target":"setup","line":2,"character":6},{"type":"hover","text":"(alias) new Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>(config?: ElysiaConfig<\"\"> | undefined): Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":51,"length":6,"target":"Elysia","line":2,"character":18},{"type":"hover","text":"(property) ElysiaConfig<Prefix extends string | undefined>.name?: string | undefined","docs":"Name of the instance for debugging, and plugin deduplication purpose","start":60,"length":4,"target":"name","line":2,"character":27},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.decorate<{\n    argon: string;\n    boron: string;\n    carbon: string;\n}>(decorators: {\n    argon: string;\n    boron: string;\n    carbon: string;\n}): Elysia<\"\", {\n    decorator: {\n        argon: string;\n        boron: string;\n        carbon: string;\n    };\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}> (+4 overloads)","docs":"### decorate\nDefine custom method to `Context` accessible for all handler\n\n---","tags":[["example","```typescript\nnew Elysia()\n    .decorate('getDate', () => Date.now())\n    .get('/', (({ getDate }) => getDate())\n```"]],"start":82,"length":8,"target":"decorate","line":3,"character":5},{"type":"hover","text":"(property) argon: string","start":101,"length":5,"target":"argon","line":4,"character":8},{"type":"hover","text":"(property) boron: string","start":121,"length":5,"target":"boron","line":5,"character":8},{"type":"hover","text":"(property) carbon: string","start":141,"length":6,"target":"carbon","line":6,"character":8},{"type":"hover","text":"const app: Elysia<\"\", {\n    decorator: {\n        setupArgon: string;\n        setupBoron: string;\n        setupCarbon: string;\n    };\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    get: {\n        body: unknown;\n        params: {};\n        query: unknown;\n        headers: unknown;\n        response: {\n            200: string;\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>","start":167,"length":3,"target":"app","line":9,"character":6},{"type":"hover","text":"(alias) new Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>(config?: ElysiaConfig<\"\"> | undefined): Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":177,"length":6,"target":"Elysia","line":9,"character":16},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.use<Elysia<\"\", {\n    decorator: AddPrefixCapitalize<\"setup\", {\n        argon: string;\n        boron: string;\n        carbon: string;\n    }>;\n    store: {};\n    derive: AddPrefixCapitalize<\"setup\", {}>;\n    resolve: AddPrefixCapitalize<\"setup\", {}>;\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>>(instance: MaybePromise<Elysia<\"\", {\n    decorator: AddPrefixCapitalize<\"setup\", {\n        argon: string;\n        boron: string;\n        carbon: string;\n    }>;\n    store: {};\n    derive: AddPrefixCapitalize<\"setup\", {}>;\n    resolve: AddPrefixCapitalize<\"setup\", {}>;\n}, ... 4 more ..., {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>>): Elysia<...> (+5 overloads)","docs":"Entire Instance","start":191,"length":3,"target":"use","line":10,"character":5},{"type":"hover","text":"const setup: Elysia<\"\", {\n    decorator: {\n        argon: string;\n        boron: string;\n        carbon: string;\n    };\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>","start":204,"length":5,"target":"setup","line":11,"character":8},{"type":"hover","text":"(method) Elysia<\"\", { decorator: { argon: string; boron: string; carbon: string; }; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.prefix<\"decorator\", \"setup\">(type: \"decorator\", word: \"setup\"): Elysia<\"\", {\n    decorator: AddPrefixCapitalize<\"setup\", {\n        argon: string;\n        boron: string;\n        carbon: string;\n    }>;\n    store: {};\n    derive: AddPrefixCapitalize<\"setup\", {}>;\n    resolve: AddPrefixCapitalize<\"setup\", {}>;\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>","start":223,"length":6,"target":"prefix","line":12,"character":13},{"type":"hover","text":"(method) Elysia<\"\", { decorator: { setupArgon: string; setupBoron: string; setupCarbon: string; }; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.get<\"/\", InputSchema<never>, MergeSchema<UnwrapRoute<InputSchema<never>, {}, \"/\">, MergeSchema<{}, MergeSchema<{}, {}, \"\">, \"\">, \"\"> & {}, {}, {\n    decorator: {\n        setupArgon: string;\n        setupBoron: string;\n        setupCarbon: string;\n    };\n    store: {};\n    derive: {};\n    resolve: {};\n} & {\n    derive: {};\n    resolve: {};\n}, ({ setupCarbon, ...rest }: {\n    body: unknown;\n    query: Record<string, string>;\n    params: {};\n    headers: Record<string, string | undefined>;\n    cookie: Record<string, Cookie<string | undefined>>;\n    ... 11 more ...;\n    setupCarbon: string;\n}) => string>(path: \"/\", handler: ({ setupCarbon, ...rest }: {\n    body: unknown;\n    query: Record<string, string>;\n    params: {};\n    headers: Record<string, string | undefined>;\n    cookie: Record<string, Cookie<string | undefined>>;\n    ... 11 more ...;\n    setupCarbon: string;\n}) => string, hook?: LocalHook<...> | undefined): Elysia<...>","docs":"### get\nRegister handler for path with method [GET]\n\n---","tags":[["example","```typescript\nimport { Elysia, t } from 'elysia'\n\nnew Elysia()\n    .get('/', () => 'hi')\n    .get('/with-hook', () => 'hi', {\n        response: t.String()\n    })\n```"]],"start":263,"length":3,"target":"get","line":14,"character":5},{"type":"hover","text":"(parameter) setupCarbon: string","start":275,"length":11,"target":"setupCarbon","line":14,"character":17},{"type":"hover","text":"(parameter) rest: {\n    body: unknown;\n    query: Record<string, string>;\n    params: {};\n    headers: Record<string, string | undefined>;\n    cookie: Record<string, Cookie<string | undefined>>;\n    server: Server | null;\n    redirect: redirect;\n    set: {\n        headers: HTTPHeaders;\n        status?: number | keyof StatusMap;\n        redirect?: string;\n        cookie?: Record<string, ElysiaCookie>;\n    };\n    ... 7 more ...;\n    setupBoron: string;\n}","start":291,"length":4,"target":"rest","line":14,"character":33},{"type":"hover","text":"(parameter) setupCarbon: string","start":302,"length":11,"target":"setupCarbon","line":14,"character":44}],"tags":[]}