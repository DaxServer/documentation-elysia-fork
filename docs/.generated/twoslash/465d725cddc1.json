{"code":"import { Elysia } from 'elysia'\n\nnew Elysia()\n    .onBeforeHandle(({ set }) => {\n        set.status = 418\n\n        return 'Kirifuji Nagisa'\n    })\n    .get('/', () => 'hi')\n    .listen(3000)","nodes":[{"type":"hover","text":"(alias) class Elysia<const in out BasePath extends string = \"\", const in out Singleton extends SingletonBase = { decorator: {}; store: {}; derive: {}; resolve: {}; }, const in out Definitions extends DefinitionBase = { typebox: {}; error: {}; }, const in out Metadata extends MetadataBase = { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, const out Routes extends RouteBase = {}, const in out Ephemeral extends EphemeralType = { ...; }, const in out Volatile extends EphemeralType = { ...; }>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":9,"length":6,"target":"Elysia","line":0,"character":9},{"type":"hover","text":"(alias) new Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>(config?: ElysiaConfig<\"\"> | undefined): Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":37,"length":6,"target":"Elysia","line":2,"character":4},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.onBeforeHandle<RouteSchema>(handler: MaybeArray<OptionalHandler<MergeSchema<RouteSchema, MergeSchema<{}, MergeSchema<{}, {}, \"\">, \"\">, \"\">, {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n} & {\n    derive: {};\n    resolve: {};\n}>>): Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}> (+1 overload)","docs":"### Before Handle | Life cycle event\nExecute after validation and before the main route handler.\n\nIf truthy value is returned, will be assigned as `Response` and skip the main handler\n\n---","tags":[["example","```typescript\nnew Elysia()\n    .onBeforeHandle(({ params: { id }, status }) => {\n        if(id && !isExisted(id)) {\n\t           status(401)\n\n            return \"Unauthorized\"\n\t       }\n    })\n```"]],"start":51,"length":14,"target":"onBeforeHandle","line":3,"character":5},{"type":"hover","text":"(parameter) set: {\n    headers: HTTPHeaders;\n    status?: number | keyof StatusMap;\n    redirect?: string;\n    cookie?: Record<string, ElysiaCookie>;\n}","start":69,"length":3,"target":"set","line":3,"character":23},{"type":"hover","text":"(parameter) set: {\n    headers: HTTPHeaders;\n    status?: number | keyof StatusMap;\n    redirect?: string;\n    cookie?: Record<string, ElysiaCookie>;\n}","start":89,"length":3,"target":"set","line":4,"character":8},{"type":"hover","text":"(property) status?: number | \"Continue\" | \"Switching Protocols\" | \"Processing\" | \"Early Hints\" | \"OK\" | \"Created\" | \"Accepted\" | \"Non-Authoritative Information\" | \"No Content\" | \"Reset Content\" | \"Partial Content\" | \"Multi-Status\" | \"Already Reported\" | \"Multiple Choices\" | \"Moved Permanently\" | \"Found\" | \"See Other\" | \"Not Modified\" | \"Temporary Redirect\" | \"Permanent Redirect\" | \"Bad Request\" | \"Unauthorized\" | \"Payment Required\" | \"Forbidden\" | \"Not Found\" | \"Method Not Allowed\" | \"Not Acceptable\" | \"Proxy Authentication Required\" | \"Request Timeout\" | ... 31 more ... | undefined","start":93,"length":6,"target":"status","line":4,"character":12},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.get<\"/\", InputSchema<never>, MergeSchema<UnwrapRoute<InputSchema<never>, {}, \"/\">, MergeSchema<{}, MergeSchema<{}, {}, \"\">, \"\">, \"\">, {}, {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n} & {\n    derive: {};\n    resolve: {};\n}, () => string>(path: \"/\", handler: () => string, hook?: LocalHook<InputSchema<never>, MergeSchema<UnwrapRoute<InputSchema<never>, {}, \"/\">, MergeSchema<{}, MergeSchema<{}, {}, \"\">, \"\">, \"\">, {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n} & {\n    derive: {};\n    resolve: {};\n}, {}, {}, never> | undefined): Elysia<...>","docs":"### get\nRegister handler for path with method [GET]\n\n---","tags":[["example","```typescript\nimport { Elysia, t } from 'elysia'\n\nnew Elysia()\n    .get('/', () => 'hi')\n    .get('/with-hook', () => 'hi', {\n        response: t.String()\n    })\n```"]],"start":152,"length":3,"target":"get","line":8,"character":5},{"type":"hover","text":"(property) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, { get: { body: unknown; params: {}; query: unknown; headers: unknown; response: { ...; }; }; }, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.listen: (options: string | number | Partial<Serve>, callback?: ListenCallback) => Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    get: {\n        body: unknown;\n        params: {};\n        query: unknown;\n        headers: unknown;\n        response: {\n            200: string;\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>","docs":"### listen\nAssign current instance to port and start serving\n\n---","tags":[["example","```typescript\nnew Elysia()\n    .get(\"/\", () => 'hi')\n    .listen(3000)\n```"]],"start":178,"length":6,"target":"listen","line":9,"character":5}],"meta":{"extension":"ts","compilerOptions":{"strict":true,"module":99,"target":99,"allowJs":true,"skipDefaultLibCheck":true,"skipLibCheck":true,"moduleDetection":3,"baseUrl":"/Users/saltyaom/Documents/web/elysia/documentation/","moduleResolution":100},"handbookOptions":{"errors":[],"noErrors":false,"noErrorsCutted":false,"noErrorValidation":false,"noStaticSemanticInfo":false,"showEmit":false,"keepNotations":false},"removals":[],"flagNotations":[],"virtualFiles":[{"offset":0,"filename":"index.ts","filepath":"/Users/saltyaom/Documents/web/elysia/documentation/index.ts","content":"import { Elysia } from 'elysia'\n\nnew Elysia()\n    .onBeforeHandle(({ set }) => {\n        set.status = 418\n\n        return 'Kirifuji Nagisa'\n    })\n    .get('/', () => 'hi')\n    .listen(3000)","extension":"ts","supportLsp":true}],"positionQueries":[],"positionCompletions":[],"positionHighlights":[]},"queries":[],"completions":[],"errors":[],"highlights":[],"hovers":[{"type":"hover","text":"(alias) class Elysia<const in out BasePath extends string = \"\", const in out Singleton extends SingletonBase = { decorator: {}; store: {}; derive: {}; resolve: {}; }, const in out Definitions extends DefinitionBase = { typebox: {}; error: {}; }, const in out Metadata extends MetadataBase = { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, const out Routes extends RouteBase = {}, const in out Ephemeral extends EphemeralType = { ...; }, const in out Volatile extends EphemeralType = { ...; }>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":9,"length":6,"target":"Elysia","line":0,"character":9},{"type":"hover","text":"(alias) new Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>(config?: ElysiaConfig<\"\"> | undefined): Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":37,"length":6,"target":"Elysia","line":2,"character":4},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.onBeforeHandle<RouteSchema>(handler: MaybeArray<OptionalHandler<MergeSchema<RouteSchema, MergeSchema<{}, MergeSchema<{}, {}, \"\">, \"\">, \"\">, {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n} & {\n    derive: {};\n    resolve: {};\n}>>): Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}> (+1 overload)","docs":"### Before Handle | Life cycle event\nExecute after validation and before the main route handler.\n\nIf truthy value is returned, will be assigned as `Response` and skip the main handler\n\n---","tags":[["example","```typescript\nnew Elysia()\n    .onBeforeHandle(({ params: { id }, status }) => {\n        if(id && !isExisted(id)) {\n\t           status(401)\n\n            return \"Unauthorized\"\n\t       }\n    })\n```"]],"start":51,"length":14,"target":"onBeforeHandle","line":3,"character":5},{"type":"hover","text":"(parameter) set: {\n    headers: HTTPHeaders;\n    status?: number | keyof StatusMap;\n    redirect?: string;\n    cookie?: Record<string, ElysiaCookie>;\n}","start":69,"length":3,"target":"set","line":3,"character":23},{"type":"hover","text":"(parameter) set: {\n    headers: HTTPHeaders;\n    status?: number | keyof StatusMap;\n    redirect?: string;\n    cookie?: Record<string, ElysiaCookie>;\n}","start":89,"length":3,"target":"set","line":4,"character":8},{"type":"hover","text":"(property) status?: number | \"Continue\" | \"Switching Protocols\" | \"Processing\" | \"Early Hints\" | \"OK\" | \"Created\" | \"Accepted\" | \"Non-Authoritative Information\" | \"No Content\" | \"Reset Content\" | \"Partial Content\" | \"Multi-Status\" | \"Already Reported\" | \"Multiple Choices\" | \"Moved Permanently\" | \"Found\" | \"See Other\" | \"Not Modified\" | \"Temporary Redirect\" | \"Permanent Redirect\" | \"Bad Request\" | \"Unauthorized\" | \"Payment Required\" | \"Forbidden\" | \"Not Found\" | \"Method Not Allowed\" | \"Not Acceptable\" | \"Proxy Authentication Required\" | \"Request Timeout\" | ... 31 more ... | undefined","start":93,"length":6,"target":"status","line":4,"character":12},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.get<\"/\", InputSchema<never>, MergeSchema<UnwrapRoute<InputSchema<never>, {}, \"/\">, MergeSchema<{}, MergeSchema<{}, {}, \"\">, \"\">, \"\">, {}, {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n} & {\n    derive: {};\n    resolve: {};\n}, () => string>(path: \"/\", handler: () => string, hook?: LocalHook<InputSchema<never>, MergeSchema<UnwrapRoute<InputSchema<never>, {}, \"/\">, MergeSchema<{}, MergeSchema<{}, {}, \"\">, \"\">, \"\">, {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n} & {\n    derive: {};\n    resolve: {};\n}, {}, {}, never> | undefined): Elysia<...>","docs":"### get\nRegister handler for path with method [GET]\n\n---","tags":[["example","```typescript\nimport { Elysia, t } from 'elysia'\n\nnew Elysia()\n    .get('/', () => 'hi')\n    .get('/with-hook', () => 'hi', {\n        response: t.String()\n    })\n```"]],"start":152,"length":3,"target":"get","line":8,"character":5},{"type":"hover","text":"(property) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, { get: { body: unknown; params: {}; query: unknown; headers: unknown; response: { ...; }; }; }, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.listen: (options: string | number | Partial<Serve>, callback?: ListenCallback) => Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    get: {\n        body: unknown;\n        params: {};\n        query: unknown;\n        headers: unknown;\n        response: {\n            200: string;\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>","docs":"### listen\nAssign current instance to port and start serving\n\n---","tags":[["example","```typescript\nnew Elysia()\n    .get(\"/\", () => 'hi')\n    .listen(3000)\n```"]],"start":178,"length":6,"target":"listen","line":9,"character":5}],"tags":[]}