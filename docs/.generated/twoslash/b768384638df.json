{"code":"import { Elysia } from 'elysia'\n\nnew Elysia()\n    .derive(({ headers, status }) => {\n        const auth = headers['authorization']\n\n        if(!auth) return status(400)\n\n        return {\n            bearer: auth?.startsWith('Bearer ') ? auth.slice(7) : null\n        }\n    })\n    .get('/', ({ bearer }) => bearer)","nodes":[{"type":"hover","text":"(alias) class Elysia<const in out BasePath extends string = \"\", const in out Singleton extends SingletonBase = { decorator: {}; store: {}; derive: {}; resolve: {}; }, const in out Definitions extends DefinitionBase = { typebox: {}; error: {}; }, const in out Metadata extends MetadataBase = { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, const out Routes extends RouteBase = {}, const in out Ephemeral extends EphemeralType = { ...; }, const in out Volatile extends EphemeralType = { ...; }>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":9,"length":6,"target":"Elysia","line":0,"character":9},{"type":"hover","text":"(alias) new Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>(config?: ElysiaConfig<\"\"> | undefined): Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":37,"length":6,"target":"Elysia","line":2,"character":4},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.derive<ElysiaCustomStatusResponse<400, \"Bad Request\", 400> | {\n    readonly bearer: string | null;\n}>(transform: (context: {\n    body: unknown;\n    query: Record<string, string>;\n    params: {};\n    headers: Record<string, string | undefined>;\n    cookie: Record<string, Cookie<string | undefined>>;\n    server: Server | null;\n    redirect: redirect;\n    set: {\n        headers: HTTPHeaders;\n        status?: number | keyof StatusMap;\n        redirect?: string;\n        cookie?: Record<string, {\n            domain?: string | undefined | undefined;\n            expires?: Date | undefined;\n            httpOnly?: boolean | undefined | undefined;\n            ... 7 more ...;\n            value?: unknown;\n        }>;\n    };\n    ... 5 more ...;\n    error: <const Code extends number | keyof StatusMap, const T = Code extends 100 | ... 58 more ... | 511 ? {\n        ...;\n    }[Code] : Code>(code: Code, response?: T) => ElysiaCustomStatusResponse<Code, T, Code extends \"Continue\" | \"Switching Protocols\" | \"Processing\" | \"Early Hints\" | \"OK\" | \"Created\" | \"Accepted\" | \"Non-Authoritative Information\" | \"No Content\" | \"Reset Content\" | \"Partial Content\" | \"Multi-Status\" | \"Already Reported\" | \"Multiple Choices\" | \"Moved Permanently\" | \"Found\" | \"See Other\" | \"Not Modified\" | \"Temporary Redirect\" | \"Permanent Redirect\" | \"Bad Request\" | \"Unauthorized\" | \"Payment Required\" | \"Forbidden\" | \"Not Found\" | \"Method Not Allowed\" | \"Not Acceptable\" | \"Proxy Authentication Required\" | \"Request Timeout\" | \"Conflict\" | \"Gone\" | \"Length Required\" | \"Precondition Failed\" | \"Payload Too Large\" | \"URI Too Long\" | \"Unsupported Media Type\" | \"Range Not Satisfiable\" | \"Expectation Failed\" | \"I'm a teapot\" | \"Misdirected Request\" | \"Unprocessable Content\" | \"Locked\" | \"Failed Dependency\" | \"Too Early\" | \"Upgrade Required\" | \"Precondition Required\" | \"Too Many Requests\" | \"Request Header Fields Too Large\" | \"Unavailable For Legal Reasons\" | \"Internal Server Error\" | \"Not Implemented\" | \"Bad Gateway\" | \"Service Unavailable\" | \"Gateway Timeout\" | \"HTTP Version Not Supported\" | \"Variant Also Negotiates\" | \"Insufficient Storage\" | \"Loop Detected\" | \"Not Extended\" | \"Network Authentication Required\" ? {\n        readonly Continue: 100;\n        readonly \"Switching Protocols\": 101;\n        readonly Processing: 102;\n        readonly \"Early Hints\": 103;\n        readonly OK: 200;\n        readonly Created: 201;\n        readonly Accepted: 202;\n        readonly \"Non-Authoritative Information\": 203;\n        readonly \"No Content\": 204;\n        readonly \"Reset Content\": 205;\n        readonly \"Partial Content\": 206;\n        readonly \"Multi-Status\": 207;\n        readonly \"Already Reported\": 208;\n        readonly \"Multiple Choices\": 300;\n        readonly \"Moved Permanently\": 301;\n        readonly Found: 302;\n        readonly \"See Other\": 303;\n        readonly \"Not Modified\": 304;\n        readonly \"Temporary Redirect\": 307;\n        readonly \"Permanent Redirect\": 308;\n        readonly \"Bad Request\": 400;\n        readonly Unauthorized: 401;\n        readonly \"Payment Required\": 402;\n        readonly Forbidden: 403;\n        readonly \"Not Found\": 404;\n        readonly \"Method Not Allowed\": 405;\n        readonly \"Not Acceptable\": 406;\n        readonly \"Proxy Authentication Required\": 407;\n        readonly \"Request Timeout\": 408;\n        readonly Conflict: 409;\n        readonly Gone: 410;\n        readonly \"Length Required\": 411;\n        readonly \"Precondition Failed\": 412;\n        readonly \"Payload Too Large\": 413;\n        readonly \"URI Too Long\": 414;\n        readonly \"Unsupported Media Type\": 415;\n        readonly \"Range Not Satisfiable\": 416;\n        readonly \"Expectation Failed\": 417;\n        readonly \"I'm a teapot\": 418;\n        readonly \"Misdirected Request\": 421;\n        readonly \"Unprocessable Content\": 422;\n        readonly Locked: 423;\n        readonly \"Failed Dependency\": 424;\n        readonly \"Too Early\": 425;\n        readonly \"Upgrade Required\": 426;\n        readonly \"Precondition Required\": 428;\n        readonly \"Too Many Requests\": 429;\n        readonly \"Request Header Fields Too Large\": 431;\n        readonly \"Unavailable For Legal Reasons\": 451;\n        readonly \"Internal Server Error\": 500;\n        readonly \"Not Implemented\": 501;\n        readonly \"Bad Gateway\": 502;\n        readonly \"Service Unavailable\": 503;\n        readonly \"Gateway Timeout\": 504;\n        readonly \"HTTP Version Not Supported\": 505;\n        readonly \"Variant Also Negotiates\": 506;\n        readonly \"Insufficient Storage\": 507;\n        readonly \"Loop Detected\": 508;\n        readonly \"Not Extended\": 510;\n        readonly \"Network Authentication Required\": 511;\n    }[Code] : Code>;\n}) => MaybePromise<...>): Elysia<...> (+1 overload)","docs":"Derive new property for each request with access to `Context`.\n\nIf error is thrown, the scope will skip to handling error instead.\n\n---","tags":[["example","new Elysia()\n    .state('counter', 1)\n    .derive(({ store }) => ({\n        increase() {\n            store.counter++\n        }\n    }))"]],"start":51,"length":6,"target":"derive","line":3,"character":5},{"type":"hover","text":"(parameter) headers: Record<string, string | undefined>","start":61,"length":7,"target":"headers","line":3,"character":15},{"type":"hover","text":"(parameter) status: <const Code extends number | keyof StatusMap, const T = Code extends 100 | 101 | 102 | 103 | 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207 | 208 | 300 | 301 | 302 | 303 | 304 | 307 | 308 | 400 | 401 | 402 | 403 | 404 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 421 | 422 | 423 | 424 | 425 | 426 | 428 | 429 | 431 | 451 | 500 | 501 | 502 | 503 | 504 | 505 | 506 | 507 | 508 | 510 | 511 ? {\n    readonly 100: \"Continue\";\n    readonly 101: \"Switching Protocols\";\n    readonly 102: \"Processing\";\n    readonly 103: \"Early Hints\";\n    readonly 200: \"OK\";\n    readonly 201: \"Created\";\n    ... 53 more ...;\n    readonly 511: \"Network Authentication Required\";\n}[Code] : Code>(code: Code, response?: T) => ElysiaCustomStatusResponse<Code, T, Code extends \"Continue\" | \"Switching Protocols\" | \"Processing\" | \"Early Hints\" | \"OK\" | \"Created\" | \"Accepted\" | \"Non-Authoritative Information\" | \"No Content\" | \"Reset Content\" | \"Partial Content\" | \"Multi-Status\" | \"Already Reported\" | \"Multiple Choices\" | \"Moved Permanently\" | \"Found\" | \"See Other\" | \"Not Modified\" | \"Temporary Redirect\" | \"Permanent Redirect\" | \"Bad Request\" | \"Unauthorized\" | \"Payment Required\" | \"Forbidden\" | \"Not Found\" | \"Method Not Allowed\" | \"Not Acceptable\" | \"Proxy Authentication Required\" | \"Request Timeout\" | \"Conflict\" | \"Gone\" | \"Length Required\" | \"Precondition Failed\" | \"Payload Too Large\" | \"URI Too Long\" | \"Unsupported Media Type\" | \"Range Not Satisfiable\" | \"Expectation Failed\" | \"I'm a teapot\" | \"Misdirected Request\" | \"Unprocessable Content\" | \"Locked\" | \"Failed Dependency\" | \"Too Early\" | \"Upgrade Required\" | \"Precondition Required\" | \"Too Many Requests\" | \"Request Header Fields Too Large\" | \"Unavailable For Legal Reasons\" | \"Internal Server Error\" | \"Not Implemented\" | \"Bad Gateway\" | \"Service Unavailable\" | \"Gateway Timeout\" | \"HTTP Version Not Supported\" | \"Variant Also Negotiates\" | \"Insufficient Storage\" | \"Loop Detected\" | \"Not Extended\" | \"Network Authentication Required\" ? {\n    readonly Continue: 100;\n    readonly \"Switching Protocols\": 101;\n    readonly Processing: 102;\n    readonly \"Early Hints\": 103;\n    readonly OK: 200;\n    readonly Created: 201;\n    readonly Accepted: 202;\n    readonly \"Non-Authoritative Information\": 203;\n    readonly \"No Content\": 204;\n    readonly \"Reset Content\": 205;\n    readonly \"Partial Content\": 206;\n    readonly \"Multi-Status\": 207;\n    readonly \"Already Reported\": 208;\n    readonly \"Multiple Choices\": 300;\n    readonly \"Moved Permanently\": 301;\n    readonly Found: 302;\n    readonly \"See Other\": 303;\n    readonly \"Not Modified\": 304;\n    readonly \"Temporary Redirect\": 307;\n    readonly \"Permanent Redirect\": 308;\n    readonly \"Bad Request\": 400;\n    readonly Unauthorized: 401;\n    readonly \"Payment Required\": 402;\n    readonly Forbidden: 403;\n    readonly \"Not Found\": 404;\n    readonly \"Method Not Allowed\": 405;\n    readonly \"Not Acceptable\": 406;\n    readonly \"Proxy Authentication Required\": 407;\n    readonly \"Request Timeout\": 408;\n    readonly Conflict: 409;\n    readonly Gone: 410;\n    readonly \"Length Required\": 411;\n    readonly \"Precondition Failed\": 412;\n    readonly \"Payload Too Large\": 413;\n    readonly \"URI Too Long\": 414;\n    readonly \"Unsupported Media Type\": 415;\n    readonly \"Range Not Satisfiable\": 416;\n    readonly \"Expectation Failed\": 417;\n    readonly \"I'm a teapot\": 418;\n    readonly \"Misdirected Request\": 421;\n    readonly \"Unprocessable Content\": 422;\n    readonly Locked: 423;\n    readonly \"Failed Dependency\": 424;\n    readonly \"Too Early\": 425;\n    readonly \"Upgrade Required\": 426;\n    readonly \"Precondition Required\": 428;\n    readonly \"Too Many Requests\": 429;\n    readonly \"Request Header Fields Too Large\": 431;\n    readonly \"Unavailable For Legal Reasons\": 451;\n    readonly \"Internal Server Error\": 500;\n    readonly \"Not Implemented\": 501;\n    readonly \"Bad Gateway\": 502;\n    readonly \"Service Unavailable\": 503;\n    readonly \"Gateway Timeout\": 504;\n    readonly \"HTTP Version Not Supported\": 505;\n    readonly \"Variant Also Negotiates\": 506;\n    readonly \"Insufficient Storage\": 507;\n    readonly \"Loop Detected\": 508;\n    readonly \"Not Extended\": 510;\n    readonly \"Network Authentication Required\": 511;\n}[Code] : Code>","start":70,"length":6,"target":"status","line":3,"character":24},{"type":"hover","text":"const auth: string | undefined","start":99,"length":4,"target":"auth","line":4,"character":14},{"type":"hover","text":"(parameter) headers: Record<string, string | undefined>","start":106,"length":7,"target":"headers","line":4,"character":21},{"type":"hover","text":"const auth: string | undefined","start":144,"length":4,"target":"auth","line":6,"character":12},{"type":"hover","text":"(parameter) status: <400, \"Bad Request\">(code: 400, response?: \"Bad Request\" | undefined) => ElysiaCustomStatusResponse<400, \"Bad Request\", 400>","start":157,"length":6,"target":"status","line":6,"character":25},{"type":"hover","text":"(property) bearer: string | null","start":199,"length":6,"target":"bearer","line":9,"character":12},{"type":"hover","text":"const auth: string","start":207,"length":4,"target":"auth","line":9,"character":20},{"type":"hover","text":"(method) String.startsWith(searchString: string, position?: number): boolean","docs":"Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.","start":213,"length":10,"target":"startsWith","line":9,"character":26},{"type":"hover","text":"const auth: string","start":237,"length":4,"target":"auth","line":9,"character":50},{"type":"hover","text":"(method) String.slice(start?: number, end?: number): string","docs":"Returns a section of a string.","tags":[["param","start The index to the beginning of the specified portion of stringObj."],["param","end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."]],"start":242,"length":5,"target":"slice","line":9,"character":55},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.get<\"/\", InputSchema<never>, MergeSchema<UnwrapRoute<InputSchema<never>, {}, \"/\">, MergeSchema<{}, MergeSchema<{}, {}, \"\">, \"\">, \"\">, {}, {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n} & {\n    derive: {\n        readonly bearer: string | null;\n    };\n    resolve: {};\n}, ({ bearer }: {\n    body: unknown;\n    query: Record<string, string>;\n    params: {};\n    headers: Record<string, string | undefined>;\n    cookie: Record<string, Cookie<string | undefined>>;\n    server: Server | null;\n    ... 8 more ...;\n    readonly bearer: string | null;\n}) => string | null>(path: \"/\", handler: ({ bearer }: {\n    body: unknown;\n    query: Record<string, string>;\n    params: {};\n    headers: Record<string, string | undefined>;\n    cookie: Record<string, Cookie<string | undefined>>;\n    server: Server | null;\n    ... 8 more ...;\n    readonly bearer: string | null;\n}) => string | null, hook?: LocalHook<...> | undefined): Elysia<...>","docs":"### get\nRegister handler for path with method [GET]\n\n---","tags":[["example","```typescript\nimport { Elysia, t } from 'elysia'\n\nnew Elysia()\n    .get('/', () => 'hi')\n    .get('/with-hook', () => 'hi', {\n        response: t.String()\n    })\n```"]],"start":280,"length":3,"target":"get","line":12,"character":5},{"type":"hover","text":"(parameter) bearer: string | null","start":292,"length":6,"target":"bearer","line":12,"character":17},{"type":"hover","text":"(parameter) bearer: string | null","start":305,"length":6,"target":"bearer","line":12,"character":30}],"meta":{"extension":"ts","compilerOptions":{"strict":true,"module":99,"target":99,"allowJs":true,"skipDefaultLibCheck":true,"skipLibCheck":true,"moduleDetection":3,"baseUrl":"/Users/saltyaom/Documents/web/elysia/documentation/","moduleResolution":100},"handbookOptions":{"errors":[],"noErrors":false,"noErrorsCutted":false,"noErrorValidation":false,"noStaticSemanticInfo":false,"showEmit":false,"keepNotations":false},"removals":[],"flagNotations":[],"virtualFiles":[{"offset":0,"filename":"index.ts","filepath":"/Users/saltyaom/Documents/web/elysia/documentation/index.ts","content":"import { Elysia } from 'elysia'\n\nnew Elysia()\n    .derive(({ headers, status }) => {\n        const auth = headers['authorization']\n\n        if(!auth) return status(400)\n\n        return {\n            bearer: auth?.startsWith('Bearer ') ? auth.slice(7) : null\n        }\n    })\n    .get('/', ({ bearer }) => bearer)","extension":"ts","supportLsp":true}],"positionQueries":[],"positionCompletions":[],"positionHighlights":[]},"queries":[],"completions":[],"errors":[],"highlights":[],"hovers":[{"type":"hover","text":"(alias) class Elysia<const in out BasePath extends string = \"\", const in out Singleton extends SingletonBase = { decorator: {}; store: {}; derive: {}; resolve: {}; }, const in out Definitions extends DefinitionBase = { typebox: {}; error: {}; }, const in out Metadata extends MetadataBase = { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, const out Routes extends RouteBase = {}, const in out Ephemeral extends EphemeralType = { ...; }, const in out Volatile extends EphemeralType = { ...; }>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":9,"length":6,"target":"Elysia","line":0,"character":9},{"type":"hover","text":"(alias) new Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>(config?: ElysiaConfig<\"\"> | undefined): Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":37,"length":6,"target":"Elysia","line":2,"character":4},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.derive<ElysiaCustomStatusResponse<400, \"Bad Request\", 400> | {\n    readonly bearer: string | null;\n}>(transform: (context: {\n    body: unknown;\n    query: Record<string, string>;\n    params: {};\n    headers: Record<string, string | undefined>;\n    cookie: Record<string, Cookie<string | undefined>>;\n    server: Server | null;\n    redirect: redirect;\n    set: {\n        headers: HTTPHeaders;\n        status?: number | keyof StatusMap;\n        redirect?: string;\n        cookie?: Record<string, {\n            domain?: string | undefined | undefined;\n            expires?: Date | undefined;\n            httpOnly?: boolean | undefined | undefined;\n            ... 7 more ...;\n            value?: unknown;\n        }>;\n    };\n    ... 5 more ...;\n    error: <const Code extends number | keyof StatusMap, const T = Code extends 100 | ... 58 more ... | 511 ? {\n        ...;\n    }[Code] : Code>(code: Code, response?: T) => ElysiaCustomStatusResponse<Code, T, Code extends \"Continue\" | \"Switching Protocols\" | \"Processing\" | \"Early Hints\" | \"OK\" | \"Created\" | \"Accepted\" | \"Non-Authoritative Information\" | \"No Content\" | \"Reset Content\" | \"Partial Content\" | \"Multi-Status\" | \"Already Reported\" | \"Multiple Choices\" | \"Moved Permanently\" | \"Found\" | \"See Other\" | \"Not Modified\" | \"Temporary Redirect\" | \"Permanent Redirect\" | \"Bad Request\" | \"Unauthorized\" | \"Payment Required\" | \"Forbidden\" | \"Not Found\" | \"Method Not Allowed\" | \"Not Acceptable\" | \"Proxy Authentication Required\" | \"Request Timeout\" | \"Conflict\" | \"Gone\" | \"Length Required\" | \"Precondition Failed\" | \"Payload Too Large\" | \"URI Too Long\" | \"Unsupported Media Type\" | \"Range Not Satisfiable\" | \"Expectation Failed\" | \"I'm a teapot\" | \"Misdirected Request\" | \"Unprocessable Content\" | \"Locked\" | \"Failed Dependency\" | \"Too Early\" | \"Upgrade Required\" | \"Precondition Required\" | \"Too Many Requests\" | \"Request Header Fields Too Large\" | \"Unavailable For Legal Reasons\" | \"Internal Server Error\" | \"Not Implemented\" | \"Bad Gateway\" | \"Service Unavailable\" | \"Gateway Timeout\" | \"HTTP Version Not Supported\" | \"Variant Also Negotiates\" | \"Insufficient Storage\" | \"Loop Detected\" | \"Not Extended\" | \"Network Authentication Required\" ? {\n        readonly Continue: 100;\n        readonly \"Switching Protocols\": 101;\n        readonly Processing: 102;\n        readonly \"Early Hints\": 103;\n        readonly OK: 200;\n        readonly Created: 201;\n        readonly Accepted: 202;\n        readonly \"Non-Authoritative Information\": 203;\n        readonly \"No Content\": 204;\n        readonly \"Reset Content\": 205;\n        readonly \"Partial Content\": 206;\n        readonly \"Multi-Status\": 207;\n        readonly \"Already Reported\": 208;\n        readonly \"Multiple Choices\": 300;\n        readonly \"Moved Permanently\": 301;\n        readonly Found: 302;\n        readonly \"See Other\": 303;\n        readonly \"Not Modified\": 304;\n        readonly \"Temporary Redirect\": 307;\n        readonly \"Permanent Redirect\": 308;\n        readonly \"Bad Request\": 400;\n        readonly Unauthorized: 401;\n        readonly \"Payment Required\": 402;\n        readonly Forbidden: 403;\n        readonly \"Not Found\": 404;\n        readonly \"Method Not Allowed\": 405;\n        readonly \"Not Acceptable\": 406;\n        readonly \"Proxy Authentication Required\": 407;\n        readonly \"Request Timeout\": 408;\n        readonly Conflict: 409;\n        readonly Gone: 410;\n        readonly \"Length Required\": 411;\n        readonly \"Precondition Failed\": 412;\n        readonly \"Payload Too Large\": 413;\n        readonly \"URI Too Long\": 414;\n        readonly \"Unsupported Media Type\": 415;\n        readonly \"Range Not Satisfiable\": 416;\n        readonly \"Expectation Failed\": 417;\n        readonly \"I'm a teapot\": 418;\n        readonly \"Misdirected Request\": 421;\n        readonly \"Unprocessable Content\": 422;\n        readonly Locked: 423;\n        readonly \"Failed Dependency\": 424;\n        readonly \"Too Early\": 425;\n        readonly \"Upgrade Required\": 426;\n        readonly \"Precondition Required\": 428;\n        readonly \"Too Many Requests\": 429;\n        readonly \"Request Header Fields Too Large\": 431;\n        readonly \"Unavailable For Legal Reasons\": 451;\n        readonly \"Internal Server Error\": 500;\n        readonly \"Not Implemented\": 501;\n        readonly \"Bad Gateway\": 502;\n        readonly \"Service Unavailable\": 503;\n        readonly \"Gateway Timeout\": 504;\n        readonly \"HTTP Version Not Supported\": 505;\n        readonly \"Variant Also Negotiates\": 506;\n        readonly \"Insufficient Storage\": 507;\n        readonly \"Loop Detected\": 508;\n        readonly \"Not Extended\": 510;\n        readonly \"Network Authentication Required\": 511;\n    }[Code] : Code>;\n}) => MaybePromise<...>): Elysia<...> (+1 overload)","docs":"Derive new property for each request with access to `Context`.\n\nIf error is thrown, the scope will skip to handling error instead.\n\n---","tags":[["example","new Elysia()\n    .state('counter', 1)\n    .derive(({ store }) => ({\n        increase() {\n            store.counter++\n        }\n    }))"]],"start":51,"length":6,"target":"derive","line":3,"character":5},{"type":"hover","text":"(parameter) headers: Record<string, string | undefined>","start":61,"length":7,"target":"headers","line":3,"character":15},{"type":"hover","text":"(parameter) status: <const Code extends number | keyof StatusMap, const T = Code extends 100 | 101 | 102 | 103 | 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207 | 208 | 300 | 301 | 302 | 303 | 304 | 307 | 308 | 400 | 401 | 402 | 403 | 404 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 421 | 422 | 423 | 424 | 425 | 426 | 428 | 429 | 431 | 451 | 500 | 501 | 502 | 503 | 504 | 505 | 506 | 507 | 508 | 510 | 511 ? {\n    readonly 100: \"Continue\";\n    readonly 101: \"Switching Protocols\";\n    readonly 102: \"Processing\";\n    readonly 103: \"Early Hints\";\n    readonly 200: \"OK\";\n    readonly 201: \"Created\";\n    ... 53 more ...;\n    readonly 511: \"Network Authentication Required\";\n}[Code] : Code>(code: Code, response?: T) => ElysiaCustomStatusResponse<Code, T, Code extends \"Continue\" | \"Switching Protocols\" | \"Processing\" | \"Early Hints\" | \"OK\" | \"Created\" | \"Accepted\" | \"Non-Authoritative Information\" | \"No Content\" | \"Reset Content\" | \"Partial Content\" | \"Multi-Status\" | \"Already Reported\" | \"Multiple Choices\" | \"Moved Permanently\" | \"Found\" | \"See Other\" | \"Not Modified\" | \"Temporary Redirect\" | \"Permanent Redirect\" | \"Bad Request\" | \"Unauthorized\" | \"Payment Required\" | \"Forbidden\" | \"Not Found\" | \"Method Not Allowed\" | \"Not Acceptable\" | \"Proxy Authentication Required\" | \"Request Timeout\" | \"Conflict\" | \"Gone\" | \"Length Required\" | \"Precondition Failed\" | \"Payload Too Large\" | \"URI Too Long\" | \"Unsupported Media Type\" | \"Range Not Satisfiable\" | \"Expectation Failed\" | \"I'm a teapot\" | \"Misdirected Request\" | \"Unprocessable Content\" | \"Locked\" | \"Failed Dependency\" | \"Too Early\" | \"Upgrade Required\" | \"Precondition Required\" | \"Too Many Requests\" | \"Request Header Fields Too Large\" | \"Unavailable For Legal Reasons\" | \"Internal Server Error\" | \"Not Implemented\" | \"Bad Gateway\" | \"Service Unavailable\" | \"Gateway Timeout\" | \"HTTP Version Not Supported\" | \"Variant Also Negotiates\" | \"Insufficient Storage\" | \"Loop Detected\" | \"Not Extended\" | \"Network Authentication Required\" ? {\n    readonly Continue: 100;\n    readonly \"Switching Protocols\": 101;\n    readonly Processing: 102;\n    readonly \"Early Hints\": 103;\n    readonly OK: 200;\n    readonly Created: 201;\n    readonly Accepted: 202;\n    readonly \"Non-Authoritative Information\": 203;\n    readonly \"No Content\": 204;\n    readonly \"Reset Content\": 205;\n    readonly \"Partial Content\": 206;\n    readonly \"Multi-Status\": 207;\n    readonly \"Already Reported\": 208;\n    readonly \"Multiple Choices\": 300;\n    readonly \"Moved Permanently\": 301;\n    readonly Found: 302;\n    readonly \"See Other\": 303;\n    readonly \"Not Modified\": 304;\n    readonly \"Temporary Redirect\": 307;\n    readonly \"Permanent Redirect\": 308;\n    readonly \"Bad Request\": 400;\n    readonly Unauthorized: 401;\n    readonly \"Payment Required\": 402;\n    readonly Forbidden: 403;\n    readonly \"Not Found\": 404;\n    readonly \"Method Not Allowed\": 405;\n    readonly \"Not Acceptable\": 406;\n    readonly \"Proxy Authentication Required\": 407;\n    readonly \"Request Timeout\": 408;\n    readonly Conflict: 409;\n    readonly Gone: 410;\n    readonly \"Length Required\": 411;\n    readonly \"Precondition Failed\": 412;\n    readonly \"Payload Too Large\": 413;\n    readonly \"URI Too Long\": 414;\n    readonly \"Unsupported Media Type\": 415;\n    readonly \"Range Not Satisfiable\": 416;\n    readonly \"Expectation Failed\": 417;\n    readonly \"I'm a teapot\": 418;\n    readonly \"Misdirected Request\": 421;\n    readonly \"Unprocessable Content\": 422;\n    readonly Locked: 423;\n    readonly \"Failed Dependency\": 424;\n    readonly \"Too Early\": 425;\n    readonly \"Upgrade Required\": 426;\n    readonly \"Precondition Required\": 428;\n    readonly \"Too Many Requests\": 429;\n    readonly \"Request Header Fields Too Large\": 431;\n    readonly \"Unavailable For Legal Reasons\": 451;\n    readonly \"Internal Server Error\": 500;\n    readonly \"Not Implemented\": 501;\n    readonly \"Bad Gateway\": 502;\n    readonly \"Service Unavailable\": 503;\n    readonly \"Gateway Timeout\": 504;\n    readonly \"HTTP Version Not Supported\": 505;\n    readonly \"Variant Also Negotiates\": 506;\n    readonly \"Insufficient Storage\": 507;\n    readonly \"Loop Detected\": 508;\n    readonly \"Not Extended\": 510;\n    readonly \"Network Authentication Required\": 511;\n}[Code] : Code>","start":70,"length":6,"target":"status","line":3,"character":24},{"type":"hover","text":"const auth: string | undefined","start":99,"length":4,"target":"auth","line":4,"character":14},{"type":"hover","text":"(parameter) headers: Record<string, string | undefined>","start":106,"length":7,"target":"headers","line":4,"character":21},{"type":"hover","text":"const auth: string | undefined","start":144,"length":4,"target":"auth","line":6,"character":12},{"type":"hover","text":"(parameter) status: <400, \"Bad Request\">(code: 400, response?: \"Bad Request\" | undefined) => ElysiaCustomStatusResponse<400, \"Bad Request\", 400>","start":157,"length":6,"target":"status","line":6,"character":25},{"type":"hover","text":"(property) bearer: string | null","start":199,"length":6,"target":"bearer","line":9,"character":12},{"type":"hover","text":"const auth: string","start":207,"length":4,"target":"auth","line":9,"character":20},{"type":"hover","text":"(method) String.startsWith(searchString: string, position?: number): boolean","docs":"Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false.","start":213,"length":10,"target":"startsWith","line":9,"character":26},{"type":"hover","text":"const auth: string","start":237,"length":4,"target":"auth","line":9,"character":50},{"type":"hover","text":"(method) String.slice(start?: number, end?: number): string","docs":"Returns a section of a string.","tags":[["param","start The index to the beginning of the specified portion of stringObj."],["param","end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\nIf this value is not specified, the substring continues to the end of stringObj."]],"start":242,"length":5,"target":"slice","line":9,"character":55},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.get<\"/\", InputSchema<never>, MergeSchema<UnwrapRoute<InputSchema<never>, {}, \"/\">, MergeSchema<{}, MergeSchema<{}, {}, \"\">, \"\">, \"\">, {}, {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n} & {\n    derive: {\n        readonly bearer: string | null;\n    };\n    resolve: {};\n}, ({ bearer }: {\n    body: unknown;\n    query: Record<string, string>;\n    params: {};\n    headers: Record<string, string | undefined>;\n    cookie: Record<string, Cookie<string | undefined>>;\n    server: Server | null;\n    ... 8 more ...;\n    readonly bearer: string | null;\n}) => string | null>(path: \"/\", handler: ({ bearer }: {\n    body: unknown;\n    query: Record<string, string>;\n    params: {};\n    headers: Record<string, string | undefined>;\n    cookie: Record<string, Cookie<string | undefined>>;\n    server: Server | null;\n    ... 8 more ...;\n    readonly bearer: string | null;\n}) => string | null, hook?: LocalHook<...> | undefined): Elysia<...>","docs":"### get\nRegister handler for path with method [GET]\n\n---","tags":[["example","```typescript\nimport { Elysia, t } from 'elysia'\n\nnew Elysia()\n    .get('/', () => 'hi')\n    .get('/with-hook', () => 'hi', {\n        response: t.String()\n    })\n```"]],"start":280,"length":3,"target":"get","line":12,"character":5},{"type":"hover","text":"(parameter) bearer: string | null","start":292,"length":6,"target":"bearer","line":12,"character":17},{"type":"hover","text":"(parameter) bearer: string | null","start":305,"length":6,"target":"bearer","line":12,"character":30}],"tags":[]}