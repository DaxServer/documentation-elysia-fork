{"code":"// client.ts\nimport { treaty } from '@elysiajs/eden'\nimport type { App } from './server' // [!code ++]\n\nconst client = treaty<App>('localhost:3000') // [!code ++]\n\n// response: Hi Elysia\nconst { data: index } = await client.get()\n\n// response: 1895\nconst { data: id } = await client.id({ id: 1895 }).get()\n\n// response: { id: 1895, name: 'Skadi' }\nconst { data: nendoroid } = await client.mirror.post({\n    id: 1895,\n    name: 'Skadi'\n})\n\nclient.\n","nodes":[{"type":"hover","text":"(alias) const treaty: <const App extends Elysia<any, any, any, any, any, any, any>>(domain: string | App, config?: Treaty.Config) => Treaty.Create<App>\nimport treaty","start":22,"length":6,"target":"treaty","line":1,"character":9},{"type":"hover","text":"(alias) type App = Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    get: {\n        body: unknown;\n        params: {};\n        query: unknown;\n        headers: unknown;\n        response: {\n            200: \"Hi Elysia\";\n        };\n    };\n} & {\n    id: {\n        \":id\": {\n            get: {\n                body: unknown;\n                params: {\n                    id: string;\n                };\n                query: unknown;\n                headers: unknown;\n                response: {\n                    200: string;\n                    422: {\n                        type: \"validation\";\n                        on: string;\n                        summary?: string;\n                        message?: string;\n                        found?: unknown;\n                        property?: string;\n                        expected?: string;\n                    };\n                };\n            };\n        };\n    };\n} & {\n    mirror: {\n        post: {\n            body: {\n                id: number;\n                name: string;\n            };\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: {\n                    id: number;\n                    name: string;\n                };\n                422: {\n                    type: \"validation\";\n                    ... 5 more ...;\n                    expected?: string;\n                };\n            };\n        };\n    };\n}, {\n    ...;\n}, {\n    ...;\n}>\nimport App","start":67,"length":3,"target":"App","line":2,"character":14},{"type":"hover","text":"const client: {\n    get: (options?: {\n        headers?: Record<string, unknown> | undefined;\n        query?: Record<string, unknown> | undefined;\n        fetch?: RequestInit | undefined;\n    } | undefined) => Promise<Treaty.TreatyResponse<{\n        200: \"Hi Elysia\";\n    }>>;\n    id: ((params: {\n        id: string | number;\n    }) => {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: string;\n            422: {\n                type: \"validation\";\n                on: string;\n                summary?: string;\n                message?: string;\n                found?: unknown;\n                property?: string;\n                expected?: string;\n            };\n        }>>;\n    }) & {};\n    mirror: {\n        ...;\n    };\n}","start":110,"length":6,"target":"client","line":4,"character":6},{"type":"hover","text":"(alias) treaty<Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    get: {\n        body: unknown;\n        params: {};\n        query: unknown;\n        headers: unknown;\n        response: {\n            200: \"Hi Elysia\";\n        };\n    };\n} & {\n    id: {\n        \":id\": {\n            get: {\n                body: unknown;\n                params: {\n                    id: string;\n                };\n                query: unknown;\n                headers: unknown;\n                response: {\n                    200: string;\n                    422: {\n                        type: \"validation\";\n                        on: string;\n                        summary?: string;\n                        message?: string;\n                        found?: unknown;\n                        property?: string;\n                        expected?: string;\n                    };\n                };\n            };\n        };\n    };\n} & {\n    mirror: {\n        post: {\n            body: {\n                id: number;\n                name: string;\n            };\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: {\n                    id: number;\n                    name: string;\n                };\n                422: {\n                    type: \"validation\";\n                    ... 5 more ...;\n                    expected?: string;\n                };\n            };\n        };\n    };\n}, {\n    ...;\n}, {\n    ...;\n}>>(domain: string | Elysia<...>, config?: Treaty.Config): {\n    ...;\n}\nimport treaty","start":119,"length":6,"target":"treaty","line":4,"character":15},{"type":"hover","text":"(alias) type App = Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    get: {\n        body: unknown;\n        params: {};\n        query: unknown;\n        headers: unknown;\n        response: {\n            200: \"Hi Elysia\";\n        };\n    };\n} & {\n    id: {\n        \":id\": {\n            get: {\n                body: unknown;\n                params: {\n                    id: string;\n                };\n                query: unknown;\n                headers: unknown;\n                response: {\n                    200: string;\n                    422: {\n                        type: \"validation\";\n                        on: string;\n                        summary?: string;\n                        message?: string;\n                        found?: unknown;\n                        property?: string;\n                        expected?: string;\n                    };\n                };\n            };\n        };\n    };\n} & {\n    mirror: {\n        post: {\n            body: {\n                id: number;\n                name: string;\n            };\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: {\n                    id: number;\n                    name: string;\n                };\n                422: {\n                    type: \"validation\";\n                    ... 5 more ...;\n                    expected?: string;\n                };\n            };\n        };\n    };\n}, {\n    ...;\n}, {\n    ...;\n}>\nimport App","start":126,"length":3,"target":"App","line":4,"character":22},{"type":"hover","text":"(property) data: \"Hi Elysia\" | null","start":195,"length":4,"target":"data","line":7,"character":8},{"type":"hover","text":"const index: \"Hi Elysia\" | null","start":201,"length":5,"target":"index","line":7,"character":14},{"type":"hover","text":"const client: {\n    get: (options?: {\n        headers?: Record<string, unknown> | undefined;\n        query?: Record<string, unknown> | undefined;\n        fetch?: RequestInit | undefined;\n    } | undefined) => Promise<Treaty.TreatyResponse<{\n        200: \"Hi Elysia\";\n    }>>;\n    id: ((params: {\n        id: string | number;\n    }) => {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: string;\n            422: {\n                type: \"validation\";\n                on: string;\n                summary?: string;\n                message?: string;\n                found?: unknown;\n                property?: string;\n                expected?: string;\n            };\n        }>>;\n    }) & {};\n    mirror: {\n        ...;\n    };\n}","start":217,"length":6,"target":"client","line":7,"character":30},{"type":"hover","text":"(property) get: (options?: {\n    headers?: Record<string, unknown> | undefined;\n    query?: Record<string, unknown> | undefined;\n    fetch?: RequestInit | undefined;\n} | undefined) => Promise<Treaty.TreatyResponse<{\n    200: \"Hi Elysia\";\n}>>","start":224,"length":3,"target":"get","line":7,"character":37},{"type":"hover","text":"(property) data: string | null","start":257,"length":4,"target":"data","line":10,"character":8},{"type":"hover","text":"const id: string | null","start":263,"length":2,"target":"id","line":10,"character":14},{"type":"hover","text":"const client: {\n    get: (options?: {\n        headers?: Record<string, unknown> | undefined;\n        query?: Record<string, unknown> | undefined;\n        fetch?: RequestInit | undefined;\n    } | undefined) => Promise<Treaty.TreatyResponse<{\n        200: \"Hi Elysia\";\n    }>>;\n    id: ((params: {\n        id: string | number;\n    }) => {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: string;\n            422: {\n                type: \"validation\";\n                on: string;\n                summary?: string;\n                message?: string;\n                found?: unknown;\n                property?: string;\n                expected?: string;\n            };\n        }>>;\n    }) & {};\n    mirror: {\n        ...;\n    };\n}","start":276,"length":6,"target":"client","line":10,"character":27},{"type":"hover","text":"(property) id: (params: {\n    id: string | number;\n}) => {\n    get: (options?: {\n        headers?: Record<string, unknown> | undefined;\n        query?: Record<string, unknown> | undefined;\n        fetch?: RequestInit | undefined;\n    } | undefined) => Promise<Treaty.TreatyResponse<{\n        200: string;\n        422: {\n            type: \"validation\";\n            on: string;\n            summary?: string;\n            message?: string;\n            found?: unknown;\n            property?: string;\n            expected?: string;\n        };\n    }>>;\n}","start":283,"length":2,"target":"id","line":10,"character":34},{"type":"hover","text":"(property) id: string | number","start":288,"length":2,"target":"id","line":10,"character":39},{"type":"hover","text":"(property) get: (options?: {\n    headers?: Record<string, unknown> | undefined;\n    query?: Record<string, unknown> | undefined;\n    fetch?: RequestInit | undefined;\n} | undefined) => Promise<Treaty.TreatyResponse<{\n    200: string;\n    422: {\n        type: \"validation\";\n        on: string;\n        summary?: string;\n        message?: string;\n        found?: unknown;\n        property?: string;\n        expected?: string;\n    };\n}>>","start":300,"length":3,"target":"get","line":10,"character":51},{"type":"hover","text":"(property) data: {\n    id: number;\n    name: string;\n} | null","start":356,"length":4,"target":"data","line":13,"character":8},{"type":"hover","text":"const nendoroid: {\n    id: number;\n    name: string;\n} | null","start":362,"length":9,"target":"nendoroid","line":13,"character":14},{"type":"hover","text":"const client: {\n    get: (options?: {\n        headers?: Record<string, unknown> | undefined;\n        query?: Record<string, unknown> | undefined;\n        fetch?: RequestInit | undefined;\n    } | undefined) => Promise<Treaty.TreatyResponse<{\n        200: \"Hi Elysia\";\n    }>>;\n    id: ((params: {\n        id: string | number;\n    }) => {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: string;\n            422: {\n                type: \"validation\";\n                on: string;\n                summary?: string;\n                message?: string;\n                found?: unknown;\n                property?: string;\n                expected?: string;\n            };\n        }>>;\n    }) & {};\n    mirror: {\n        ...;\n    };\n}","start":382,"length":6,"target":"client","line":13,"character":34},{"type":"hover","text":"(property) mirror: {\n    post: (body: {\n        id: number;\n        name: string;\n    }, options?: {\n        headers?: Record<string, unknown> | undefined;\n        query?: Record<string, unknown> | undefined;\n        fetch?: RequestInit | undefined;\n    } | undefined) => Promise<Treaty.TreatyResponse<{\n        200: {\n            id: number;\n            name: string;\n        };\n        422: {\n            type: \"validation\";\n            on: string;\n            summary?: string;\n            message?: string;\n            found?: unknown;\n            property?: string;\n            expected?: string;\n        };\n    }>>;\n}","start":389,"length":6,"target":"mirror","line":13,"character":41},{"type":"hover","text":"(property) post: (body: {\n    id: number;\n    name: string;\n}, options?: {\n    headers?: Record<string, unknown> | undefined;\n    query?: Record<string, unknown> | undefined;\n    fetch?: RequestInit | undefined;\n} | undefined) => Promise<Treaty.TreatyResponse<{\n    200: {\n        id: number;\n        name: string;\n    };\n    422: {\n        type: \"validation\";\n        on: string;\n        summary?: string;\n        message?: string;\n        found?: unknown;\n        property?: string;\n        expected?: string;\n    };\n}>>","start":396,"length":4,"target":"post","line":13,"character":48},{"type":"hover","text":"(property) id: number","start":407,"length":2,"target":"id","line":14,"character":4},{"type":"hover","text":"(property) name: string","start":421,"length":4,"target":"name","line":15,"character":4},{"type":"hover","text":"const client: {\n    get: (options?: {\n        headers?: Record<string, unknown> | undefined;\n        query?: Record<string, unknown> | undefined;\n        fetch?: RequestInit | undefined;\n    } | undefined) => Promise<Treaty.TreatyResponse<{\n        200: \"Hi Elysia\";\n    }>>;\n    id: ((params: {\n        id: string | number;\n    }) => {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: string;\n            422: {\n                type: \"validation\";\n                on: string;\n                summary?: string;\n                message?: string;\n                found?: unknown;\n                property?: string;\n                expected?: string;\n            };\n        }>>;\n    }) & {};\n    mirror: {\n        ...;\n    };\n}","start":439,"length":6,"target":"client","line":18,"character":0},{"type":"completion","start":446,"length":0,"completions":[{"name":"get","kind":"property","kindModifiers":"declare","sortText":"11"},{"name":"id","kind":"property","kindModifiers":"","sortText":"11"},{"name":"mirror","kind":"property","kindModifiers":"","sortText":"11"}],"completionsPrefix":".","line":18,"character":7}],"meta":{"extension":"ts","compilerOptions":{"strict":true,"module":99,"target":99,"allowJs":true,"skipDefaultLibCheck":true,"skipLibCheck":true,"moduleDetection":3,"baseUrl":"/Users/saltyaom/Documents/web/elysia/documentation/","moduleResolution":100},"handbookOptions":{"errors":[],"noErrors":true,"noErrorsCutted":false,"noErrorValidation":false,"noStaticSemanticInfo":false,"showEmit":false,"keepNotations":false},"removals":[[862,872],[841,854],[0,402]],"flagNotations":[{"type":"handbookOptions","name":"noErrors","value":true,"start":841,"end":854}],"virtualFiles":[{"offset":0,"filename":"server.ts","filepath":"/Users/saltyaom/Documents/web/elysia/documentation/server.ts","content":"// @filename: server.ts\nimport { Elysia, t } from 'elysia'\n\nconst app = new Elysia()\n    .get('/', 'Hi Elysia')\n    .get('/id/:id', ({ params: { id } }) => id)\n    .post('/mirror', ({ body }) => body, {\n        body: t.Object({\n            id: t.Number(),\n            name: t.String()\n        })\n    })\n    .listen(3000)\n\nexport type App = typeof app // [!code ++]\n\n","extension":"ts","supportLsp":true},{"offset":366,"filename":"index.ts","filepath":"/Users/saltyaom/Documents/web/elysia/documentation/index.ts","content":"// @filename: index.ts\n// ---cut---\n// client.ts\nimport { treaty } from '@elysiajs/eden'\nimport type { App } from './server' // [!code ++]\n\nconst client = treaty<App>('localhost:3000') // [!code ++]\n\n// response: Hi Elysia\nconst { data: index } = await client.get()\n\n// response: 1895\nconst { data: id } = await client.id({ id: 1895 }).get()\n\n// response: { id: 1895, name: 'Skadi' }\nconst { data: nendoroid } = await client.mirror.post({\n    id: 1895,\n    name: 'Skadi'\n})\n\n// @noErrors\nclient.\n//     ^|","extension":"ts","supportLsp":true}],"positionQueries":[],"positionCompletions":[861],"positionHighlights":[]},"queries":[],"completions":[{"type":"completion","start":446,"length":0,"completions":[{"name":"get","kind":"property","kindModifiers":"declare","sortText":"11"},{"name":"id","kind":"property","kindModifiers":"","sortText":"11"},{"name":"mirror","kind":"property","kindModifiers":"","sortText":"11"}],"completionsPrefix":".","line":18,"character":7}],"errors":[],"highlights":[],"hovers":[{"type":"hover","text":"(alias) const treaty: <const App extends Elysia<any, any, any, any, any, any, any>>(domain: string | App, config?: Treaty.Config) => Treaty.Create<App>\nimport treaty","start":22,"length":6,"target":"treaty","line":1,"character":9},{"type":"hover","text":"(alias) type App = Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    get: {\n        body: unknown;\n        params: {};\n        query: unknown;\n        headers: unknown;\n        response: {\n            200: \"Hi Elysia\";\n        };\n    };\n} & {\n    id: {\n        \":id\": {\n            get: {\n                body: unknown;\n                params: {\n                    id: string;\n                };\n                query: unknown;\n                headers: unknown;\n                response: {\n                    200: string;\n                    422: {\n                        type: \"validation\";\n                        on: string;\n                        summary?: string;\n                        message?: string;\n                        found?: unknown;\n                        property?: string;\n                        expected?: string;\n                    };\n                };\n            };\n        };\n    };\n} & {\n    mirror: {\n        post: {\n            body: {\n                id: number;\n                name: string;\n            };\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: {\n                    id: number;\n                    name: string;\n                };\n                422: {\n                    type: \"validation\";\n                    ... 5 more ...;\n                    expected?: string;\n                };\n            };\n        };\n    };\n}, {\n    ...;\n}, {\n    ...;\n}>\nimport App","start":67,"length":3,"target":"App","line":2,"character":14},{"type":"hover","text":"const client: {\n    get: (options?: {\n        headers?: Record<string, unknown> | undefined;\n        query?: Record<string, unknown> | undefined;\n        fetch?: RequestInit | undefined;\n    } | undefined) => Promise<Treaty.TreatyResponse<{\n        200: \"Hi Elysia\";\n    }>>;\n    id: ((params: {\n        id: string | number;\n    }) => {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: string;\n            422: {\n                type: \"validation\";\n                on: string;\n                summary?: string;\n                message?: string;\n                found?: unknown;\n                property?: string;\n                expected?: string;\n            };\n        }>>;\n    }) & {};\n    mirror: {\n        ...;\n    };\n}","start":110,"length":6,"target":"client","line":4,"character":6},{"type":"hover","text":"(alias) treaty<Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    get: {\n        body: unknown;\n        params: {};\n        query: unknown;\n        headers: unknown;\n        response: {\n            200: \"Hi Elysia\";\n        };\n    };\n} & {\n    id: {\n        \":id\": {\n            get: {\n                body: unknown;\n                params: {\n                    id: string;\n                };\n                query: unknown;\n                headers: unknown;\n                response: {\n                    200: string;\n                    422: {\n                        type: \"validation\";\n                        on: string;\n                        summary?: string;\n                        message?: string;\n                        found?: unknown;\n                        property?: string;\n                        expected?: string;\n                    };\n                };\n            };\n        };\n    };\n} & {\n    mirror: {\n        post: {\n            body: {\n                id: number;\n                name: string;\n            };\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: {\n                    id: number;\n                    name: string;\n                };\n                422: {\n                    type: \"validation\";\n                    ... 5 more ...;\n                    expected?: string;\n                };\n            };\n        };\n    };\n}, {\n    ...;\n}, {\n    ...;\n}>>(domain: string | Elysia<...>, config?: Treaty.Config): {\n    ...;\n}\nimport treaty","start":119,"length":6,"target":"treaty","line":4,"character":15},{"type":"hover","text":"(alias) type App = Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    get: {\n        body: unknown;\n        params: {};\n        query: unknown;\n        headers: unknown;\n        response: {\n            200: \"Hi Elysia\";\n        };\n    };\n} & {\n    id: {\n        \":id\": {\n            get: {\n                body: unknown;\n                params: {\n                    id: string;\n                };\n                query: unknown;\n                headers: unknown;\n                response: {\n                    200: string;\n                    422: {\n                        type: \"validation\";\n                        on: string;\n                        summary?: string;\n                        message?: string;\n                        found?: unknown;\n                        property?: string;\n                        expected?: string;\n                    };\n                };\n            };\n        };\n    };\n} & {\n    mirror: {\n        post: {\n            body: {\n                id: number;\n                name: string;\n            };\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: {\n                    id: number;\n                    name: string;\n                };\n                422: {\n                    type: \"validation\";\n                    ... 5 more ...;\n                    expected?: string;\n                };\n            };\n        };\n    };\n}, {\n    ...;\n}, {\n    ...;\n}>\nimport App","start":126,"length":3,"target":"App","line":4,"character":22},{"type":"hover","text":"(property) data: \"Hi Elysia\" | null","start":195,"length":4,"target":"data","line":7,"character":8},{"type":"hover","text":"const index: \"Hi Elysia\" | null","start":201,"length":5,"target":"index","line":7,"character":14},{"type":"hover","text":"const client: {\n    get: (options?: {\n        headers?: Record<string, unknown> | undefined;\n        query?: Record<string, unknown> | undefined;\n        fetch?: RequestInit | undefined;\n    } | undefined) => Promise<Treaty.TreatyResponse<{\n        200: \"Hi Elysia\";\n    }>>;\n    id: ((params: {\n        id: string | number;\n    }) => {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: string;\n            422: {\n                type: \"validation\";\n                on: string;\n                summary?: string;\n                message?: string;\n                found?: unknown;\n                property?: string;\n                expected?: string;\n            };\n        }>>;\n    }) & {};\n    mirror: {\n        ...;\n    };\n}","start":217,"length":6,"target":"client","line":7,"character":30},{"type":"hover","text":"(property) get: (options?: {\n    headers?: Record<string, unknown> | undefined;\n    query?: Record<string, unknown> | undefined;\n    fetch?: RequestInit | undefined;\n} | undefined) => Promise<Treaty.TreatyResponse<{\n    200: \"Hi Elysia\";\n}>>","start":224,"length":3,"target":"get","line":7,"character":37},{"type":"hover","text":"(property) data: string | null","start":257,"length":4,"target":"data","line":10,"character":8},{"type":"hover","text":"const id: string | null","start":263,"length":2,"target":"id","line":10,"character":14},{"type":"hover","text":"const client: {\n    get: (options?: {\n        headers?: Record<string, unknown> | undefined;\n        query?: Record<string, unknown> | undefined;\n        fetch?: RequestInit | undefined;\n    } | undefined) => Promise<Treaty.TreatyResponse<{\n        200: \"Hi Elysia\";\n    }>>;\n    id: ((params: {\n        id: string | number;\n    }) => {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: string;\n            422: {\n                type: \"validation\";\n                on: string;\n                summary?: string;\n                message?: string;\n                found?: unknown;\n                property?: string;\n                expected?: string;\n            };\n        }>>;\n    }) & {};\n    mirror: {\n        ...;\n    };\n}","start":276,"length":6,"target":"client","line":10,"character":27},{"type":"hover","text":"(property) id: (params: {\n    id: string | number;\n}) => {\n    get: (options?: {\n        headers?: Record<string, unknown> | undefined;\n        query?: Record<string, unknown> | undefined;\n        fetch?: RequestInit | undefined;\n    } | undefined) => Promise<Treaty.TreatyResponse<{\n        200: string;\n        422: {\n            type: \"validation\";\n            on: string;\n            summary?: string;\n            message?: string;\n            found?: unknown;\n            property?: string;\n            expected?: string;\n        };\n    }>>;\n}","start":283,"length":2,"target":"id","line":10,"character":34},{"type":"hover","text":"(property) id: string | number","start":288,"length":2,"target":"id","line":10,"character":39},{"type":"hover","text":"(property) get: (options?: {\n    headers?: Record<string, unknown> | undefined;\n    query?: Record<string, unknown> | undefined;\n    fetch?: RequestInit | undefined;\n} | undefined) => Promise<Treaty.TreatyResponse<{\n    200: string;\n    422: {\n        type: \"validation\";\n        on: string;\n        summary?: string;\n        message?: string;\n        found?: unknown;\n        property?: string;\n        expected?: string;\n    };\n}>>","start":300,"length":3,"target":"get","line":10,"character":51},{"type":"hover","text":"(property) data: {\n    id: number;\n    name: string;\n} | null","start":356,"length":4,"target":"data","line":13,"character":8},{"type":"hover","text":"const nendoroid: {\n    id: number;\n    name: string;\n} | null","start":362,"length":9,"target":"nendoroid","line":13,"character":14},{"type":"hover","text":"const client: {\n    get: (options?: {\n        headers?: Record<string, unknown> | undefined;\n        query?: Record<string, unknown> | undefined;\n        fetch?: RequestInit | undefined;\n    } | undefined) => Promise<Treaty.TreatyResponse<{\n        200: \"Hi Elysia\";\n    }>>;\n    id: ((params: {\n        id: string | number;\n    }) => {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: string;\n            422: {\n                type: \"validation\";\n                on: string;\n                summary?: string;\n                message?: string;\n                found?: unknown;\n                property?: string;\n                expected?: string;\n            };\n        }>>;\n    }) & {};\n    mirror: {\n        ...;\n    };\n}","start":382,"length":6,"target":"client","line":13,"character":34},{"type":"hover","text":"(property) mirror: {\n    post: (body: {\n        id: number;\n        name: string;\n    }, options?: {\n        headers?: Record<string, unknown> | undefined;\n        query?: Record<string, unknown> | undefined;\n        fetch?: RequestInit | undefined;\n    } | undefined) => Promise<Treaty.TreatyResponse<{\n        200: {\n            id: number;\n            name: string;\n        };\n        422: {\n            type: \"validation\";\n            on: string;\n            summary?: string;\n            message?: string;\n            found?: unknown;\n            property?: string;\n            expected?: string;\n        };\n    }>>;\n}","start":389,"length":6,"target":"mirror","line":13,"character":41},{"type":"hover","text":"(property) post: (body: {\n    id: number;\n    name: string;\n}, options?: {\n    headers?: Record<string, unknown> | undefined;\n    query?: Record<string, unknown> | undefined;\n    fetch?: RequestInit | undefined;\n} | undefined) => Promise<Treaty.TreatyResponse<{\n    200: {\n        id: number;\n        name: string;\n    };\n    422: {\n        type: \"validation\";\n        on: string;\n        summary?: string;\n        message?: string;\n        found?: unknown;\n        property?: string;\n        expected?: string;\n    };\n}>>","start":396,"length":4,"target":"post","line":13,"character":48},{"type":"hover","text":"(property) id: number","start":407,"length":2,"target":"id","line":14,"character":4},{"type":"hover","text":"(property) name: string","start":421,"length":4,"target":"name","line":15,"character":4},{"type":"hover","text":"const client: {\n    get: (options?: {\n        headers?: Record<string, unknown> | undefined;\n        query?: Record<string, unknown> | undefined;\n        fetch?: RequestInit | undefined;\n    } | undefined) => Promise<Treaty.TreatyResponse<{\n        200: \"Hi Elysia\";\n    }>>;\n    id: ((params: {\n        id: string | number;\n    }) => {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: string;\n            422: {\n                type: \"validation\";\n                on: string;\n                summary?: string;\n                message?: string;\n                found?: unknown;\n                property?: string;\n                expected?: string;\n            };\n        }>>;\n    }) & {};\n    mirror: {\n        ...;\n    };\n}","start":439,"length":6,"target":"client","line":18,"character":0}],"tags":[]}