{"code":"import { Elysia } from 'elysia'\n\nclass MyError extends Error {\n    constructor(public message: string) {\n        super(message)\n    }\n}\n\nnew Elysia()\n    .error({\n        MyError\n    })\n    .onError(({ code, error }) => {\n        switch (code) {\n            // With auto-completion\n            case 'MyError':\n                // With type narrowing\n                // Hover to see error is typed as `CustomError`\n                return error\n        }\n    })\n    .get('/', () => {\n        throw new MyError('Hello Error')\n    })","nodes":[{"type":"hover","text":"(alias) class Elysia<const in out BasePath extends string = \"\", const in out Singleton extends SingletonBase = { decorator: {}; store: {}; derive: {}; resolve: {}; }, const in out Definitions extends DefinitionBase = { typebox: {}; error: {}; }, const in out Metadata extends MetadataBase = { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, const out Routes extends RouteBase = {}, const in out Ephemeral extends EphemeralType = { ...; }, const in out Volatile extends EphemeralType = { ...; }>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":9,"length":6,"target":"Elysia","line":0,"character":9},{"type":"hover","text":"class MyError","start":39,"length":7,"target":"MyError","line":2,"character":6},{"type":"hover","text":"var Error: ErrorConstructor","start":55,"length":5,"target":"Error","line":2,"character":22},{"type":"hover","text":"(property) MyError.message: string","start":86,"length":7,"target":"message","line":3,"character":23},{"type":"hover","text":"(parameter) message: string","start":119,"length":7,"target":"message","line":4,"character":14},{"type":"hover","text":"(alias) new Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>(config?: ElysiaConfig<\"\"> | undefined): Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":141,"length":6,"target":"Elysia","line":8,"character":4},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.error<{\n    readonly MyError: typeof MyError;\n}>(errors: {\n    readonly MyError: typeof MyError;\n}): Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {\n        readonly MyError: MyError;\n    };\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}> (+2 overloads)","docs":"Register errors\n\n---","tags":[["example","```typescript\nclass CustomError extends Error {\n    constructor() {\n        super()\n    }\n}\n\nnew Elysia()\n    .error('CUSTOM_ERROR', CustomError)\n```"]],"start":155,"length":5,"target":"error","line":9,"character":5},{"type":"hover","text":"(property) MyError: typeof MyError","start":171,"length":7,"target":"MyError","line":10,"character":8},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: { readonly MyError: MyError; }; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.onError<RouteSchema>(handler: MaybeArray<ErrorHandler<{\n    readonly MyError: MyError;\n}, MergeSchema<RouteSchema, MergeSchema<{}, MergeSchema<{}, {}, \"\">, \"\">, \"\">, {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>>): Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {\n        readonly MyError: MyError;\n    };\n}, {\n    ...;\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}> (+1 overload)","docs":"### Error | Life cycle event\nCalled when error is thrown during processing request\n\n---","tags":[["example","```typescript\nnew Elysia()\n    .onError(({ code }) => {\n        if(code === \"NOT_FOUND\")\n            return \"Path not found :(\"\n    })\n```"]],"start":191,"length":7,"target":"onError","line":12,"character":5},{"type":"hover","text":"(parameter) code: number | \"MyError\" | \"UNKNOWN\" | \"VALIDATION\" | \"NOT_FOUND\" | \"PARSE\" | \"INTERNAL_SERVER_ERROR\" | \"INVALID_COOKIE_SIGNATURE\" | \"INVALID_FILE_TYPE\"","start":202,"length":4,"target":"code","line":12,"character":16},{"type":"hover","text":"(parameter) error: Readonly<Error> | Readonly<ValidationError> | Readonly<NotFoundError> | Readonly<ParseError> | Readonly<InternalServerError> | Readonly<InvalidCookieSignature> | Readonly<InvalidFileType> | Readonly<ElysiaCustomStatusResponse<number, number, number>> | Readonly<MyError>","start":208,"length":5,"target":"error","line":12,"character":22},{"type":"hover","text":"(parameter) code: number | \"MyError\" | \"UNKNOWN\" | \"VALIDATION\" | \"NOT_FOUND\" | \"PARSE\" | \"INTERNAL_SERVER_ERROR\" | \"INVALID_COOKIE_SIGNATURE\" | \"INVALID_FILE_TYPE\"","start":238,"length":4,"target":"code","line":13,"character":16},{"type":"hover","text":"(parameter) error: Readonly<MyError>","start":436,"length":5,"target":"error","line":18,"character":23},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: { readonly MyError: MyError; }; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.get<\"/\", InputSchema<never>, MergeSchema<UnwrapRoute<InputSchema<never>, {}, \"/\">, MergeSchema<{}, MergeSchema<{}, {}, \"\">, \"\">, \"\">, {}, {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n} & {\n    derive: {};\n    resolve: {};\n}, () => never>(path: \"/\", handler: () => never, hook?: LocalHook<InputSchema<never>, MergeSchema<UnwrapRoute<InputSchema<never>, {}, \"/\">, MergeSchema<{}, MergeSchema<{}, {}, \"\">, \"\">, \"\">, {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n} & {\n    derive: {};\n    resolve: {};\n}, {\n    ...;\n}, {}, never> | undefined): Elysia<...>","docs":"### get\nRegister handler for path with method [GET]\n\n---","tags":[["example","```typescript\nimport { Elysia, t } from 'elysia'\n\nnew Elysia()\n    .get('/', () => 'hi')\n    .get('/with-hook', () => 'hi', {\n        response: t.String()\n    })\n```"]],"start":464,"length":3,"target":"get","line":21,"character":5},{"type":"hover","text":"constructor MyError(message: string): MyError","start":499,"length":7,"target":"MyError","line":22,"character":18}],"meta":{"extension":"ts","compilerOptions":{"strict":true,"module":99,"target":99,"allowJs":true,"skipDefaultLibCheck":true,"skipLibCheck":true,"moduleDetection":3,"baseUrl":"/Users/saltyaom/Documents/web/elysia/documentation/","moduleResolution":100},"handbookOptions":{"errors":[],"noErrors":false,"noErrorsCutted":false,"noErrorValidation":false,"noStaticSemanticInfo":false,"showEmit":false,"keepNotations":false},"removals":[],"flagNotations":[],"virtualFiles":[{"offset":0,"filename":"index.ts","filepath":"/Users/saltyaom/Documents/web/elysia/documentation/index.ts","content":"import { Elysia } from 'elysia'\n\nclass MyError extends Error {\n    constructor(public message: string) {\n        super(message)\n    }\n}\n\nnew Elysia()\n    .error({\n        MyError\n    })\n    .onError(({ code, error }) => {\n        switch (code) {\n            // With auto-completion\n            case 'MyError':\n                // With type narrowing\n                // Hover to see error is typed as `CustomError`\n                return error\n        }\n    })\n    .get('/', () => {\n        throw new MyError('Hello Error')\n    })","extension":"ts","supportLsp":true}],"positionQueries":[],"positionCompletions":[],"positionHighlights":[]},"queries":[],"completions":[],"errors":[],"highlights":[],"hovers":[{"type":"hover","text":"(alias) class Elysia<const in out BasePath extends string = \"\", const in out Singleton extends SingletonBase = { decorator: {}; store: {}; derive: {}; resolve: {}; }, const in out Definitions extends DefinitionBase = { typebox: {}; error: {}; }, const in out Metadata extends MetadataBase = { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, const out Routes extends RouteBase = {}, const in out Ephemeral extends EphemeralType = { ...; }, const in out Volatile extends EphemeralType = { ...; }>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":9,"length":6,"target":"Elysia","line":0,"character":9},{"type":"hover","text":"class MyError","start":39,"length":7,"target":"MyError","line":2,"character":6},{"type":"hover","text":"var Error: ErrorConstructor","start":55,"length":5,"target":"Error","line":2,"character":22},{"type":"hover","text":"(property) MyError.message: string","start":86,"length":7,"target":"message","line":3,"character":23},{"type":"hover","text":"(parameter) message: string","start":119,"length":7,"target":"message","line":4,"character":14},{"type":"hover","text":"(alias) new Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>(config?: ElysiaConfig<\"\"> | undefined): Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":141,"length":6,"target":"Elysia","line":8,"character":4},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.error<{\n    readonly MyError: typeof MyError;\n}>(errors: {\n    readonly MyError: typeof MyError;\n}): Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {\n        readonly MyError: MyError;\n    };\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}> (+2 overloads)","docs":"Register errors\n\n---","tags":[["example","```typescript\nclass CustomError extends Error {\n    constructor() {\n        super()\n    }\n}\n\nnew Elysia()\n    .error('CUSTOM_ERROR', CustomError)\n```"]],"start":155,"length":5,"target":"error","line":9,"character":5},{"type":"hover","text":"(property) MyError: typeof MyError","start":171,"length":7,"target":"MyError","line":10,"character":8},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: { readonly MyError: MyError; }; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.onError<RouteSchema>(handler: MaybeArray<ErrorHandler<{\n    readonly MyError: MyError;\n}, MergeSchema<RouteSchema, MergeSchema<{}, MergeSchema<{}, {}, \"\">, \"\">, \"\">, {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>>): Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {\n        readonly MyError: MyError;\n    };\n}, {\n    ...;\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}> (+1 overload)","docs":"### Error | Life cycle event\nCalled when error is thrown during processing request\n\n---","tags":[["example","```typescript\nnew Elysia()\n    .onError(({ code }) => {\n        if(code === \"NOT_FOUND\")\n            return \"Path not found :(\"\n    })\n```"]],"start":191,"length":7,"target":"onError","line":12,"character":5},{"type":"hover","text":"(parameter) code: number | \"MyError\" | \"UNKNOWN\" | \"VALIDATION\" | \"NOT_FOUND\" | \"PARSE\" | \"INTERNAL_SERVER_ERROR\" | \"INVALID_COOKIE_SIGNATURE\" | \"INVALID_FILE_TYPE\"","start":202,"length":4,"target":"code","line":12,"character":16},{"type":"hover","text":"(parameter) error: Readonly<Error> | Readonly<ValidationError> | Readonly<NotFoundError> | Readonly<ParseError> | Readonly<InternalServerError> | Readonly<InvalidCookieSignature> | Readonly<InvalidFileType> | Readonly<ElysiaCustomStatusResponse<number, number, number>> | Readonly<MyError>","start":208,"length":5,"target":"error","line":12,"character":22},{"type":"hover","text":"(parameter) code: number | \"MyError\" | \"UNKNOWN\" | \"VALIDATION\" | \"NOT_FOUND\" | \"PARSE\" | \"INTERNAL_SERVER_ERROR\" | \"INVALID_COOKIE_SIGNATURE\" | \"INVALID_FILE_TYPE\"","start":238,"length":4,"target":"code","line":13,"character":16},{"type":"hover","text":"(parameter) error: Readonly<MyError>","start":436,"length":5,"target":"error","line":18,"character":23},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: { readonly MyError: MyError; }; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.get<\"/\", InputSchema<never>, MergeSchema<UnwrapRoute<InputSchema<never>, {}, \"/\">, MergeSchema<{}, MergeSchema<{}, {}, \"\">, \"\">, \"\">, {}, {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n} & {\n    derive: {};\n    resolve: {};\n}, () => never>(path: \"/\", handler: () => never, hook?: LocalHook<InputSchema<never>, MergeSchema<UnwrapRoute<InputSchema<never>, {}, \"/\">, MergeSchema<{}, MergeSchema<{}, {}, \"\">, \"\">, \"\">, {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n} & {\n    derive: {};\n    resolve: {};\n}, {\n    ...;\n}, {}, never> | undefined): Elysia<...>","docs":"### get\nRegister handler for path with method [GET]\n\n---","tags":[["example","```typescript\nimport { Elysia, t } from 'elysia'\n\nnew Elysia()\n    .get('/', () => 'hi')\n    .get('/with-hook', () => 'hi', {\n        response: t.String()\n    })\n```"]],"start":464,"length":3,"target":"get","line":21,"character":5},{"type":"hover","text":"constructor MyError(message: string): MyError","start":499,"length":7,"target":"MyError","line":22,"character":18}],"tags":[]}