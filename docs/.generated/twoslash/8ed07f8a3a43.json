{"code":"// test/index.test.ts\nimport { describe, expect, it } from 'bun:test'\nimport { Elysia } from 'elysia'\nimport { treaty } from '@elysiajs/eden'\n\nconst app = new Elysia().get('/hello', 'hi')\nconst api = treaty(app)\n\ndescribe('Elysia', () => {\n    it('return a response', async () => {\n        const { data } = await api.hello.get()\n\n        expect(data).toBe('hi')\n\n    })\n})","nodes":[{"type":"hover","text":"(alias) const describe: Describe\nimport describe","docs":"Describes a group of related tests.","tags":[["example","function sum(a, b) {\n  return a + b;\n}\ndescribe(\"sum()\", () => {\n  test(\"can sum two values\", () => {\n    expect(sum(1, 1)).toBe(2);\n  });\n});"],["param","label the label for the tests"],["param","fn the function that defines the tests"]],"start":31,"length":8,"target":"describe","line":1,"character":9},{"type":"hover","text":"(alias) const expect: Expect\nimport expect","docs":"Asserts that a value matches some criteria.","tags":[["link","https://jestjs.io/docs/expect#reference"],["example","expect(1 + 1).toBe(2);\nexpect([1,2,3]).toContain(2);\nexpect(null).toBeNull();"],["param","actual The actual (received) value"]],"start":41,"length":6,"target":"expect","line":1,"character":19},{"type":"hover","text":"(alias) const it: Test\nimport it","docs":"Runs a test.","tags":[["example","test(\"can check if using Bun\", () => {\n  expect(Bun).toBeDefined();\n});\n\ntest(\"can make a fetch() request\", async () => {\n  const response = await fetch(\"https://example.com/\");\n  expect(response.ok).toBe(true);\n});"],["param","label the label for the test"],["param","fn the test function"]],"start":49,"length":2,"target":"it","line":1,"character":27},{"type":"hover","text":"(alias) class Elysia<const in out BasePath extends string = \"\", const in out Singleton extends SingletonBase = { decorator: {}; store: {}; derive: {}; resolve: {}; }, const in out Definitions extends DefinitionBase = { typebox: {}; error: {}; }, const in out Metadata extends MetadataBase = { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, const out Routes extends RouteBase = {}, const in out Ephemeral extends EphemeralType = { ...; }, const in out Volatile extends EphemeralType = { ...; }>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":79,"length":6,"target":"Elysia","line":2,"character":9},{"type":"hover","text":"(alias) const treaty: <const App extends Elysia<any, any, any, any, any, any, any>>(domain: string | App, config?: Treaty.Config) => Treaty.Create<App>\nimport treaty","start":111,"length":6,"target":"treaty","line":3,"character":9},{"type":"hover","text":"const app: Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    hello: {\n        get: {\n            body: unknown;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: \"hi\";\n            };\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>","start":149,"length":3,"target":"app","line":5,"character":6},{"type":"hover","text":"(alias) new Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>(config?: ElysiaConfig<\"\"> | undefined): Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":159,"length":6,"target":"Elysia","line":5,"character":16},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.get<\"/hello\", InputSchema<never>, MergeSchema<UnwrapRoute<InputSchema<never>, {}, \"/hello\">, MergeSchema<{}, MergeSchema<{}, {}, \"\">, \"\">, \"\">, {}, {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n} & {\n    derive: {};\n    resolve: {};\n}, \"hi\">(path: \"/hello\", handler: \"hi\", hook?: LocalHook<InputSchema<never>, MergeSchema<UnwrapRoute<InputSchema<never>, {}, \"/hello\">, MergeSchema<{}, MergeSchema<{}, {}, \"\">, \"\">, \"\">, {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n} & {\n    derive: {};\n    resolve: {};\n}, {}, {}, never> | undefined): Elysia<...>","docs":"### get\nRegister handler for path with method [GET]\n\n---","tags":[["example","```typescript\nimport { Elysia, t } from 'elysia'\n\nnew Elysia()\n    .get('/', () => 'hi')\n    .get('/with-hook', () => 'hi', {\n        response: t.String()\n    })\n```"]],"start":168,"length":3,"target":"get","line":5,"character":25},{"type":"hover","text":"const api: {\n    hello: {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: \"hi\";\n        }>>;\n    };\n}","start":194,"length":3,"target":"api","line":6,"character":6},{"type":"hover","text":"(alias) treaty<Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    hello: {\n        get: {\n            body: unknown;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: \"hi\";\n            };\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>>(domain: string | Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    hello: {\n        get: {\n            body: unknown;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: \"hi\";\n            };\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>, config?: Treaty.Config): {\n    ...;\n}\nimport treaty","start":200,"length":6,"target":"treaty","line":6,"character":12},{"type":"hover","text":"const app: Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    hello: {\n        get: {\n            body: unknown;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: \"hi\";\n            };\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>","start":207,"length":3,"target":"app","line":6,"character":19},{"type":"hover","text":"(alias) describe(label: DescribeLabel, fn: () => void): void (+1 overload)\nimport describe","docs":"Describes a group of related tests.","tags":[["example","function sum(a, b) {\n  return a + b;\n}\ndescribe(\"sum()\", () => {\n  test(\"can sum two values\", () => {\n    expect(sum(1, 1)).toBe(2);\n  });\n});"],["param","label the label for the tests"],["param","fn the function that defines the tests"]],"start":213,"length":8,"target":"describe","line":8,"character":0},{"type":"hover","text":"(alias) it(label: string, fn: (() => void | Promise<unknown>) | ((done: (err?: unknown) => void) => void), options?: number | TestOptions): void\nimport it","docs":"Runs a test.","tags":[["example","test(\"can check if using Bun\", () => {\n  expect(Bun).toBeDefined();\n});\n\ntest(\"can make a fetch() request\", async () => {\n  const response = await fetch(\"https://example.com/\");\n  expect(response.ok).toBe(true);\n});"],["param","label the label for the test"],["param","fn the test function"]],"start":244,"length":2,"target":"it","line":9,"character":4},{"type":"hover","text":"const data: \"hi\" | null","start":298,"length":4,"target":"data","line":10,"character":16},{"type":"hover","text":"const api: {\n    hello: {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: \"hi\";\n        }>>;\n    };\n}","start":313,"length":3,"target":"api","line":10,"character":31},{"type":"hover","text":"(property) hello: {\n    get: (options?: {\n        headers?: Record<string, unknown> | undefined;\n        query?: Record<string, unknown> | undefined;\n        fetch?: RequestInit | undefined;\n    } | undefined) => Promise<Treaty.TreatyResponse<{\n        200: \"hi\";\n    }>>;\n}","start":317,"length":5,"target":"hello","line":10,"character":35},{"type":"hover","text":"(property) get: (options?: {\n    headers?: Record<string, unknown> | undefined;\n    query?: Record<string, unknown> | undefined;\n    fetch?: RequestInit | undefined;\n} | undefined) => Promise<Treaty.TreatyResponse<{\n    200: \"hi\";\n}>>","start":323,"length":3,"target":"get","line":10,"character":41},{"type":"hover","text":"(alias) expect<\"hi\" | null>(actual?: \"hi\" | null | undefined, customFailMessage?: string): Matchers<\"hi\" | null>\nimport expect","tags":[["param","actual the actual value"],["param","customFailMessage an optional custom message to display if the test fails."]],"start":338,"length":6,"target":"expect","line":12,"character":8},{"type":"hover","text":"const data: \"hi\" | null","start":345,"length":4,"target":"data","line":12,"character":15},{"type":"query","text":"const data: \"hi\" | null","start":345,"length":4,"target":"data","line":12,"character":15},{"type":"hover","text":"(method) MatchersBuiltin<\"hi\" | null>.toBe(expected: \"hi\" | null): void","docs":"Asserts that a value equals what is expected.\n\n- For non-primitive values, like objects and arrays,\nuse `toEqual()` instead.\n- For floating-point numbers, use `toBeCloseTo()` instead.","tags":[["example","expect(100 + 23).toBe(123);\nexpect(\"d\" + \"og\").toBe(\"dog\");\nexpect([123]).toBe([123]); // fail, use toEqual()\nexpect(3 + 0.14).toBe(3.14); // fail, use toBeCloseTo()"],["param","expected the expected value"]],"start":351,"length":4,"target":"toBe","line":12,"character":21}],"meta":{"extension":"ts","compilerOptions":{"strict":true,"module":99,"target":99,"allowJs":true,"skipDefaultLibCheck":true,"skipLibCheck":true,"moduleDetection":3,"baseUrl":"/Users/saltyaom/Documents/web/elysia/documentation/","moduleResolution":100},"handbookOptions":{"errors":[],"noErrors":false,"noErrorsCutted":false,"noErrorValidation":false,"noStaticSemanticInfo":false,"showEmit":false,"keepNotations":false},"removals":[[362,382]],"flagNotations":[],"virtualFiles":[{"offset":0,"filename":"index.ts","filepath":"/Users/saltyaom/Documents/web/elysia/documentation/index.ts","content":"// test/index.test.ts\nimport { describe, expect, it } from 'bun:test'\nimport { Elysia } from 'elysia'\nimport { treaty } from '@elysiajs/eden'\n\nconst app = new Elysia().get('/hello', 'hi')\nconst api = treaty(app)\n\ndescribe('Elysia', () => {\n    it('return a response', async () => {\n        const { data } = await api.hello.get()\n\n        expect(data).toBe('hi')\n              // ^?\n\n    })\n})","extension":"ts","supportLsp":true}],"positionQueries":[347],"positionCompletions":[],"positionHighlights":[]},"queries":[{"type":"query","text":"const data: \"hi\" | null","start":345,"length":4,"target":"data","line":12,"character":15}],"completions":[],"errors":[],"highlights":[],"hovers":[{"type":"hover","text":"(alias) const describe: Describe\nimport describe","docs":"Describes a group of related tests.","tags":[["example","function sum(a, b) {\n  return a + b;\n}\ndescribe(\"sum()\", () => {\n  test(\"can sum two values\", () => {\n    expect(sum(1, 1)).toBe(2);\n  });\n});"],["param","label the label for the tests"],["param","fn the function that defines the tests"]],"start":31,"length":8,"target":"describe","line":1,"character":9},{"type":"hover","text":"(alias) const expect: Expect\nimport expect","docs":"Asserts that a value matches some criteria.","tags":[["link","https://jestjs.io/docs/expect#reference"],["example","expect(1 + 1).toBe(2);\nexpect([1,2,3]).toContain(2);\nexpect(null).toBeNull();"],["param","actual The actual (received) value"]],"start":41,"length":6,"target":"expect","line":1,"character":19},{"type":"hover","text":"(alias) const it: Test\nimport it","docs":"Runs a test.","tags":[["example","test(\"can check if using Bun\", () => {\n  expect(Bun).toBeDefined();\n});\n\ntest(\"can make a fetch() request\", async () => {\n  const response = await fetch(\"https://example.com/\");\n  expect(response.ok).toBe(true);\n});"],["param","label the label for the test"],["param","fn the test function"]],"start":49,"length":2,"target":"it","line":1,"character":27},{"type":"hover","text":"(alias) class Elysia<const in out BasePath extends string = \"\", const in out Singleton extends SingletonBase = { decorator: {}; store: {}; derive: {}; resolve: {}; }, const in out Definitions extends DefinitionBase = { typebox: {}; error: {}; }, const in out Metadata extends MetadataBase = { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, const out Routes extends RouteBase = {}, const in out Ephemeral extends EphemeralType = { ...; }, const in out Volatile extends EphemeralType = { ...; }>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":79,"length":6,"target":"Elysia","line":2,"character":9},{"type":"hover","text":"(alias) const treaty: <const App extends Elysia<any, any, any, any, any, any, any>>(domain: string | App, config?: Treaty.Config) => Treaty.Create<App>\nimport treaty","start":111,"length":6,"target":"treaty","line":3,"character":9},{"type":"hover","text":"const app: Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    hello: {\n        get: {\n            body: unknown;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: \"hi\";\n            };\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>","start":149,"length":3,"target":"app","line":5,"character":6},{"type":"hover","text":"(alias) new Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>(config?: ElysiaConfig<\"\"> | undefined): Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":159,"length":6,"target":"Elysia","line":5,"character":16},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.get<\"/hello\", InputSchema<never>, MergeSchema<UnwrapRoute<InputSchema<never>, {}, \"/hello\">, MergeSchema<{}, MergeSchema<{}, {}, \"\">, \"\">, \"\">, {}, {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n} & {\n    derive: {};\n    resolve: {};\n}, \"hi\">(path: \"/hello\", handler: \"hi\", hook?: LocalHook<InputSchema<never>, MergeSchema<UnwrapRoute<InputSchema<never>, {}, \"/hello\">, MergeSchema<{}, MergeSchema<{}, {}, \"\">, \"\">, \"\">, {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n} & {\n    derive: {};\n    resolve: {};\n}, {}, {}, never> | undefined): Elysia<...>","docs":"### get\nRegister handler for path with method [GET]\n\n---","tags":[["example","```typescript\nimport { Elysia, t } from 'elysia'\n\nnew Elysia()\n    .get('/', () => 'hi')\n    .get('/with-hook', () => 'hi', {\n        response: t.String()\n    })\n```"]],"start":168,"length":3,"target":"get","line":5,"character":25},{"type":"hover","text":"const api: {\n    hello: {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: \"hi\";\n        }>>;\n    };\n}","start":194,"length":3,"target":"api","line":6,"character":6},{"type":"hover","text":"(alias) treaty<Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    hello: {\n        get: {\n            body: unknown;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: \"hi\";\n            };\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>>(domain: string | Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    hello: {\n        get: {\n            body: unknown;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: \"hi\";\n            };\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>, config?: Treaty.Config): {\n    ...;\n}\nimport treaty","start":200,"length":6,"target":"treaty","line":6,"character":12},{"type":"hover","text":"const app: Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    hello: {\n        get: {\n            body: unknown;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: {\n                200: \"hi\";\n            };\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>","start":207,"length":3,"target":"app","line":6,"character":19},{"type":"hover","text":"(alias) describe(label: DescribeLabel, fn: () => void): void (+1 overload)\nimport describe","docs":"Describes a group of related tests.","tags":[["example","function sum(a, b) {\n  return a + b;\n}\ndescribe(\"sum()\", () => {\n  test(\"can sum two values\", () => {\n    expect(sum(1, 1)).toBe(2);\n  });\n});"],["param","label the label for the tests"],["param","fn the function that defines the tests"]],"start":213,"length":8,"target":"describe","line":8,"character":0},{"type":"hover","text":"(alias) it(label: string, fn: (() => void | Promise<unknown>) | ((done: (err?: unknown) => void) => void), options?: number | TestOptions): void\nimport it","docs":"Runs a test.","tags":[["example","test(\"can check if using Bun\", () => {\n  expect(Bun).toBeDefined();\n});\n\ntest(\"can make a fetch() request\", async () => {\n  const response = await fetch(\"https://example.com/\");\n  expect(response.ok).toBe(true);\n});"],["param","label the label for the test"],["param","fn the test function"]],"start":244,"length":2,"target":"it","line":9,"character":4},{"type":"hover","text":"const data: \"hi\" | null","start":298,"length":4,"target":"data","line":10,"character":16},{"type":"hover","text":"const api: {\n    hello: {\n        get: (options?: {\n            headers?: Record<string, unknown> | undefined;\n            query?: Record<string, unknown> | undefined;\n            fetch?: RequestInit | undefined;\n        } | undefined) => Promise<Treaty.TreatyResponse<{\n            200: \"hi\";\n        }>>;\n    };\n}","start":313,"length":3,"target":"api","line":10,"character":31},{"type":"hover","text":"(property) hello: {\n    get: (options?: {\n        headers?: Record<string, unknown> | undefined;\n        query?: Record<string, unknown> | undefined;\n        fetch?: RequestInit | undefined;\n    } | undefined) => Promise<Treaty.TreatyResponse<{\n        200: \"hi\";\n    }>>;\n}","start":317,"length":5,"target":"hello","line":10,"character":35},{"type":"hover","text":"(property) get: (options?: {\n    headers?: Record<string, unknown> | undefined;\n    query?: Record<string, unknown> | undefined;\n    fetch?: RequestInit | undefined;\n} | undefined) => Promise<Treaty.TreatyResponse<{\n    200: \"hi\";\n}>>","start":323,"length":3,"target":"get","line":10,"character":41},{"type":"hover","text":"(alias) expect<\"hi\" | null>(actual?: \"hi\" | null | undefined, customFailMessage?: string): Matchers<\"hi\" | null>\nimport expect","tags":[["param","actual the actual value"],["param","customFailMessage an optional custom message to display if the test fails."]],"start":338,"length":6,"target":"expect","line":12,"character":8},{"type":"hover","text":"const data: \"hi\" | null","start":345,"length":4,"target":"data","line":12,"character":15},{"type":"hover","text":"(method) MatchersBuiltin<\"hi\" | null>.toBe(expected: \"hi\" | null): void","docs":"Asserts that a value equals what is expected.\n\n- For non-primitive values, like objects and arrays,\nuse `toEqual()` instead.\n- For floating-point numbers, use `toBeCloseTo()` instead.","tags":[["example","expect(100 + 23).toBe(123);\nexpect(\"d\" + \"og\").toBe(\"dog\");\nexpect([123]).toBe([123]); // fail, use toEqual()\nexpect(3 + 0.14).toBe(3.14); // fail, use toBeCloseTo()"],["param","expected the expected value"]],"start":351,"length":4,"target":"toBe","line":12,"character":21}],"tags":[]}