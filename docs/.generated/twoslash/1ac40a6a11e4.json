{"code":"import { Elysia, t } from 'elysia'\nimport { swagger } from '@elysiajs/swagger'\n\nnew Elysia()\n    .use(swagger())\n    .get('/user/:id', ({ params: { id } }) => id, {\n        params: t.Object({\n            id: t.Number()\n        })\n    })\n    .listen(3000)","nodes":[{"type":"hover","text":"(alias) class Elysia<const in out BasePath extends string = \"\", const in out Singleton extends SingletonBase = { decorator: {}; store: {}; derive: {}; resolve: {}; }, const in out Definitions extends DefinitionBase = { typebox: {}; error: {}; }, const in out Metadata extends MetadataBase = { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, const out Routes extends RouteBase = {}, const in out Ephemeral extends EphemeralType = { ...; }, const in out Volatile extends EphemeralType = { ...; }>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":9,"length":6,"target":"Elysia","line":0,"character":9},{"type":"hover","text":"(alias) const t: Omit<JavaScriptTypeBuilder, \"String\" | \"Transform\"> & {\n    String: (property?: ElysiaStringOptions) => TString;\n    Numeric: (property?: NumberOptions) => TNumber;\n    Integer: (property?: IntegerOptions) => TInteger;\n    Date: (property?: DateOptions) => TDate;\n    BooleanString: (property?: SchemaOptions) => TBoolean;\n    ... 9 more ...;\n    Form: <T extends TProperties>(v: T, options?: ObjectOptions) => TForm<T>;\n} & {\n    ...;\n}\nimport t","start":17,"length":1,"target":"t","line":0,"character":17},{"type":"hover","text":"(alias) const swagger: <Path extends string = \"/swagger\">({ provider, scalarVersion, scalarCDN, scalarConfig, documentation, version, excludeStaticFile, path, specPath, exclude, swaggerOptions, theme, autoDarkMode, excludeMethods, excludeTags }?: ElysiaSwaggerConfig<Path>) => Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>\nimport swagger","docs":"Plugin for [elysia](https://github.com/elysiajs/elysia) that auto-generate Swagger page.","tags":[["see","https://github.com/elysiajs/elysia-swagger"]],"start":44,"length":7,"target":"swagger","line":1,"character":9},{"type":"hover","text":"(alias) new Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>(config?: ElysiaConfig<\"\"> | undefined): Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":84,"length":6,"target":"Elysia","line":3,"character":4},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.use<Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>>(instance: MaybePromise<Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>>): Elysia<...> (+5 overloads)","docs":"Entire Instance","start":98,"length":3,"target":"use","line":4,"character":5},{"type":"hover","text":"(alias) swagger<\"/swagger\">({ provider, scalarVersion, scalarCDN, scalarConfig, documentation, version, excludeStaticFile, path, specPath, exclude, swaggerOptions, theme, autoDarkMode, excludeMethods, excludeTags }?: ElysiaSwaggerConfig<\"/swagger\"> | undefined): Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>\nimport swagger","docs":"Plugin for [elysia](https://github.com/elysiajs/elysia) that auto-generate Swagger page.","tags":[["see","https://github.com/elysiajs/elysia-swagger"]],"start":102,"length":7,"target":"swagger","line":4,"character":9},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.get<\"/user/:id\", {\n    readonly params: TObject<{\n        id: TNumber;\n    }>;\n}, MergeSchema<UnwrapRoute<{\n    readonly params: TObject<{\n        id: TNumber;\n    }>;\n}, {}, \"/user/:id\">, MergeSchema<{}, MergeSchema<{}, {}, \"\">, \"\">, \"\"> & {}, {\n    readonly params: TObject<{\n        id: TNumber;\n    }>;\n}, {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n} & {\n    derive: {};\n    resolve: {} & {};\n}, ({ params: { id } }: {\n    body: unknown;\n    query: Record<string, string>;\n    params: {\n        id: number;\n    };\n    headers: Record<string, string | undefined>;\n    ... 9 more ...;\n    error: <const Code extends number | keyof StatusMap, const T = Code extends 200 | ... 58 more ... | 511 ? {\n        ...;\n    }[Code] : Code>(code: Code, response?: T) => ElysiaCustomStatusResponse<Code, T, Code extends \"Continue\" | \"Switching Protocols\" | \"Processing\" | \"Early Hints\" | \"OK\" | \"Created\" | \"Accepted\" | \"Non-Authoritative Information\" | \"No Content\" | \"Reset Content\" | \"Partial Content\" | \"Multi-Status\" | \"Already Reported\" | \"Multiple Choices\" | \"Moved Permanently\" | \"Found\" | \"See Other\" | \"Not Modified\" | \"Temporary Redirect\" | \"Permanent Redirect\" | \"Bad Request\" | \"Unauthorized\" | \"Payment Required\" | \"Forbidden\" | \"Not Found\" | \"Method Not Allowed\" | \"Not Acceptable\" | \"Proxy Authentication Required\" | \"Request Timeout\" | \"Conflict\" | \"Gone\" | \"Length Required\" | \"Precondition Failed\" | \"Payload Too Large\" | \"URI Too Long\" | \"Unsupported Media Type\" | \"Range Not Satisfiable\" | \"Expectation Failed\" | \"I'm a teapot\" | \"Misdirected Request\" | \"Unprocessable Content\" | \"Locked\" | \"Failed Dependency\" | \"Too Early\" | \"Upgrade Required\" | \"Precondition Required\" | \"Too Many Requests\" | \"Request Header Fields Too Large\" | \"Unavailable For Legal Reasons\" | \"Internal Server Error\" | \"Not Implemented\" | \"Bad Gateway\" | \"Service Unavailable\" | \"Gateway Timeout\" | \"HTTP Version Not Supported\" | \"Variant Also Negotiates\" | \"Insufficient Storage\" | \"Loop Detected\" | \"Not Extended\" | \"Network Authentication Required\" ? {\n        readonly Continue: 100;\n        readonly \"Switching Protocols\": 101;\n        readonly Processing: 102;\n        readonly \"Early Hints\": 103;\n        readonly OK: 200;\n        readonly Created: 201;\n        readonly Accepted: 202;\n        readonly \"Non-Authoritative Information\": 203;\n        readonly \"No Content\": 204;\n        readonly \"Reset Content\": 205;\n        readonly \"Partial Content\": 206;\n        readonly \"Multi-Status\": 207;\n        readonly \"Already Reported\": 208;\n        readonly \"Multiple Choices\": 300;\n        readonly \"Moved Permanently\": 301;\n        readonly Found: 302;\n        readonly \"See Other\": 303;\n        readonly \"Not Modified\": 304;\n        readonly \"Temporary Redirect\": 307;\n        readonly \"Permanent Redirect\": 308;\n        readonly \"Bad Request\": 400;\n        readonly Unauthorized: 401;\n        readonly \"Payment Required\": 402;\n        readonly Forbidden: 403;\n        readonly \"Not Found\": 404;\n        readonly \"Method Not Allowed\": 405;\n        readonly \"Not Acceptable\": 406;\n        readonly \"Proxy Authentication Required\": 407;\n        readonly \"Request Timeout\": 408;\n        readonly Conflict: 409;\n        readonly Gone: 410;\n        readonly \"Length Required\": 411;\n        readonly \"Precondition Failed\": 412;\n        readonly \"Payload Too Large\": 413;\n        readonly \"URI Too Long\": 414;\n        readonly \"Unsupported Media Type\": 415;\n        readonly \"Range Not Satisfiable\": 416;\n        readonly \"Expectation Failed\": 417;\n        readonly \"I'm a teapot\": 418;\n        readonly \"Misdirected Request\": 421;\n        readonly \"Unprocessable Content\": 422;\n        readonly Locked: 423;\n        readonly \"Failed Dependency\": 424;\n        readonly \"Too Early\": 425;\n        readonly \"Upgrade Required\": 426;\n        readonly \"Precondition Required\": 428;\n        readonly \"Too Many Requests\": 429;\n        readonly \"Request Header Fields Too Large\": 431;\n        readonly \"Unavailable For Legal Reasons\": 451;\n        readonly \"Internal Server Error\": 500;\n        readonly \"Not Implemented\": 501;\n        readonly \"Bad Gateway\": 502;\n        readonly \"Service Unavailable\": 503;\n        readonly \"Gateway Timeout\": 504;\n        readonly \"HTTP Version Not Supported\": 505;\n        readonly \"Variant Also Negotiates\": 506;\n        readonly \"Insufficient Storage\": 507;\n        readonly \"Loop Detected\": 508;\n        readonly \"Not Extended\": 510;\n        readonly \"Network Authentication Required\": 511;\n    }[Code] : Code>;\n}) => number>(path: \"/user/:id\", handler: ({ params: { id } }: {\n    body: unknown;\n    query: Record<string, string>;\n    params: {\n        id: number;\n    };\n    headers: Record<string, string | undefined>;\n    ... 9 more ...;\n    error: <const Code extends number | keyof StatusMap, const T = Code extends 200 | ... 58 more ... | 511 ? {\n        ...;\n    }[Code] : Code>(code: Code, response?: T) => ElysiaCustomStatusResponse<Code, T, Code extends ...","docs":"### get\nRegister handler for path with method [GET]\n\n---","tags":[["example","```typescript\nimport { Elysia, t } from 'elysia'\n\nnew Elysia()\n    .get('/', () => 'hi')\n    .get('/with-hook', () => 'hi', {\n        response: t.String()\n    })\n```"]],"start":118,"length":3,"target":"get","line":5,"character":5},{"type":"hover","text":"(property) params: {\n    id: number;\n}","start":138,"length":6,"target":"params","line":5,"character":25},{"type":"hover","text":"(parameter) id: number","start":148,"length":2,"target":"id","line":5,"character":35},{"type":"hover","text":"(parameter) id: number","start":159,"length":2,"target":"id","line":5,"character":46},{"type":"hover","text":"(property) params: TObject<{\n    id: TNumber;\n}>","start":173,"length":6,"target":"params","line":6,"character":8},{"type":"hover","text":"(alias) const t: Omit<JavaScriptTypeBuilder, \"String\" | \"Transform\"> & {\n    String: (property?: ElysiaStringOptions) => TString;\n    Numeric: (property?: NumberOptions) => TNumber;\n    Integer: (property?: IntegerOptions) => TInteger;\n    Date: (property?: DateOptions) => TDate;\n    BooleanString: (property?: SchemaOptions) => TBoolean;\n    ... 9 more ...;\n    Form: <T extends TProperties>(v: T, options?: ObjectOptions) => TForm<T>;\n} & {\n    ...;\n}\nimport t","start":181,"length":1,"target":"t","line":6,"character":16},{"type":"hover","text":"(method) Object<{\n    id: TNumber;\n}>(properties: {\n    id: TNumber;\n}, options?: ObjectOptions): TObject<{\n    id: TNumber;\n}>","docs":"`[Json]` Creates an Object type","start":183,"length":6,"target":"Object","line":6,"character":18},{"type":"hover","text":"(property) id: TNumber","start":204,"length":2,"target":"id","line":7,"character":12},{"type":"hover","text":"(alias) const t: Omit<JavaScriptTypeBuilder, \"String\" | \"Transform\"> & {\n    String: (property?: ElysiaStringOptions) => TString;\n    Numeric: (property?: NumberOptions) => TNumber;\n    Integer: (property?: IntegerOptions) => TInteger;\n    Date: (property?: DateOptions) => TDate;\n    BooleanString: (property?: SchemaOptions) => TBoolean;\n    ... 9 more ...;\n    Form: <T extends TProperties>(v: T, options?: ObjectOptions) => TForm<T>;\n} & {\n    ...;\n}\nimport t","start":208,"length":1,"target":"t","line":7,"character":16},{"type":"hover","text":"(method) Number(options?: NumberOptions): TNumber","docs":"`[Json]` Creates a Number type","start":210,"length":6,"target":"Number","line":7,"character":18},{"type":"hover","text":"(property) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, { user: { \":id\": { get: { body: unknown; params: { ...; }; query: unknown; headers: unknown; response: { ...; }; }; }; }; }, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.listen: (options: string | number | Partial<Serve>, callback?: ListenCallback) => Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    user: {\n        \":id\": {\n            get: {\n                body: unknown;\n                params: {\n                    id: number;\n                };\n                query: unknown;\n                headers: unknown;\n                response: {\n                    200: number;\n                    422: {\n                        type: \"validation\";\n                        on: string;\n                        summary?: string;\n                        message?: string;\n                        found?: unknown;\n                        property?: string;\n                        expected?: string;\n                    };\n                };\n            };\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>","docs":"### listen\nAssign current instance to port and start serving\n\n---","tags":[["example","```typescript\nnew Elysia()\n    .get(\"/\", () => 'hi')\n    .listen(3000)\n```"]],"start":242,"length":6,"target":"listen","line":10,"character":5}],"meta":{"extension":"ts","compilerOptions":{"strict":true,"module":99,"target":99,"allowJs":true,"skipDefaultLibCheck":true,"skipLibCheck":true,"moduleDetection":3,"baseUrl":"/Users/saltyaom/Documents/web/elysia/documentation/","moduleResolution":100},"handbookOptions":{"errors":[],"noErrors":false,"noErrorsCutted":false,"noErrorValidation":false,"noStaticSemanticInfo":false,"showEmit":false,"keepNotations":false},"removals":[],"flagNotations":[],"virtualFiles":[{"offset":0,"filename":"index.ts","filepath":"/Users/saltyaom/Documents/web/elysia/documentation/index.ts","content":"import { Elysia, t } from 'elysia'\nimport { swagger } from '@elysiajs/swagger'\n\nnew Elysia()\n    .use(swagger())\n    .get('/user/:id', ({ params: { id } }) => id, {\n        params: t.Object({\n            id: t.Number()\n        })\n    })\n    .listen(3000)","extension":"ts","supportLsp":true}],"positionQueries":[],"positionCompletions":[],"positionHighlights":[]},"queries":[],"completions":[],"errors":[],"highlights":[],"hovers":[{"type":"hover","text":"(alias) class Elysia<const in out BasePath extends string = \"\", const in out Singleton extends SingletonBase = { decorator: {}; store: {}; derive: {}; resolve: {}; }, const in out Definitions extends DefinitionBase = { typebox: {}; error: {}; }, const in out Metadata extends MetadataBase = { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, const out Routes extends RouteBase = {}, const in out Ephemeral extends EphemeralType = { ...; }, const in out Volatile extends EphemeralType = { ...; }>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":9,"length":6,"target":"Elysia","line":0,"character":9},{"type":"hover","text":"(alias) const t: Omit<JavaScriptTypeBuilder, \"String\" | \"Transform\"> & {\n    String: (property?: ElysiaStringOptions) => TString;\n    Numeric: (property?: NumberOptions) => TNumber;\n    Integer: (property?: IntegerOptions) => TInteger;\n    Date: (property?: DateOptions) => TDate;\n    BooleanString: (property?: SchemaOptions) => TBoolean;\n    ... 9 more ...;\n    Form: <T extends TProperties>(v: T, options?: ObjectOptions) => TForm<T>;\n} & {\n    ...;\n}\nimport t","start":17,"length":1,"target":"t","line":0,"character":17},{"type":"hover","text":"(alias) const swagger: <Path extends string = \"/swagger\">({ provider, scalarVersion, scalarCDN, scalarConfig, documentation, version, excludeStaticFile, path, specPath, exclude, swaggerOptions, theme, autoDarkMode, excludeMethods, excludeTags }?: ElysiaSwaggerConfig<Path>) => Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>\nimport swagger","docs":"Plugin for [elysia](https://github.com/elysiajs/elysia) that auto-generate Swagger page.","tags":[["see","https://github.com/elysiajs/elysia-swagger"]],"start":44,"length":7,"target":"swagger","line":1,"character":9},{"type":"hover","text":"(alias) new Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>(config?: ElysiaConfig<\"\"> | undefined): Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":84,"length":6,"target":"Elysia","line":3,"character":4},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.use<Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>>(instance: MaybePromise<Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>>): Elysia<...> (+5 overloads)","docs":"Entire Instance","start":98,"length":3,"target":"use","line":4,"character":5},{"type":"hover","text":"(alias) swagger<\"/swagger\">({ provider, scalarVersion, scalarCDN, scalarConfig, documentation, version, excludeStaticFile, path, specPath, exclude, swaggerOptions, theme, autoDarkMode, excludeMethods, excludeTags }?: ElysiaSwaggerConfig<\"/swagger\"> | undefined): Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>\nimport swagger","docs":"Plugin for [elysia](https://github.com/elysiajs/elysia) that auto-generate Swagger page.","tags":[["see","https://github.com/elysiajs/elysia-swagger"]],"start":102,"length":7,"target":"swagger","line":4,"character":9},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.get<\"/user/:id\", {\n    readonly params: TObject<{\n        id: TNumber;\n    }>;\n}, MergeSchema<UnwrapRoute<{\n    readonly params: TObject<{\n        id: TNumber;\n    }>;\n}, {}, \"/user/:id\">, MergeSchema<{}, MergeSchema<{}, {}, \"\">, \"\">, \"\"> & {}, {\n    readonly params: TObject<{\n        id: TNumber;\n    }>;\n}, {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n} & {\n    derive: {};\n    resolve: {} & {};\n}, ({ params: { id } }: {\n    body: unknown;\n    query: Record<string, string>;\n    params: {\n        id: number;\n    };\n    headers: Record<string, string | undefined>;\n    ... 9 more ...;\n    error: <const Code extends number | keyof StatusMap, const T = Code extends 200 | ... 58 more ... | 511 ? {\n        ...;\n    }[Code] : Code>(code: Code, response?: T) => ElysiaCustomStatusResponse<Code, T, Code extends \"Continue\" | \"Switching Protocols\" | \"Processing\" | \"Early Hints\" | \"OK\" | \"Created\" | \"Accepted\" | \"Non-Authoritative Information\" | \"No Content\" | \"Reset Content\" | \"Partial Content\" | \"Multi-Status\" | \"Already Reported\" | \"Multiple Choices\" | \"Moved Permanently\" | \"Found\" | \"See Other\" | \"Not Modified\" | \"Temporary Redirect\" | \"Permanent Redirect\" | \"Bad Request\" | \"Unauthorized\" | \"Payment Required\" | \"Forbidden\" | \"Not Found\" | \"Method Not Allowed\" | \"Not Acceptable\" | \"Proxy Authentication Required\" | \"Request Timeout\" | \"Conflict\" | \"Gone\" | \"Length Required\" | \"Precondition Failed\" | \"Payload Too Large\" | \"URI Too Long\" | \"Unsupported Media Type\" | \"Range Not Satisfiable\" | \"Expectation Failed\" | \"I'm a teapot\" | \"Misdirected Request\" | \"Unprocessable Content\" | \"Locked\" | \"Failed Dependency\" | \"Too Early\" | \"Upgrade Required\" | \"Precondition Required\" | \"Too Many Requests\" | \"Request Header Fields Too Large\" | \"Unavailable For Legal Reasons\" | \"Internal Server Error\" | \"Not Implemented\" | \"Bad Gateway\" | \"Service Unavailable\" | \"Gateway Timeout\" | \"HTTP Version Not Supported\" | \"Variant Also Negotiates\" | \"Insufficient Storage\" | \"Loop Detected\" | \"Not Extended\" | \"Network Authentication Required\" ? {\n        readonly Continue: 100;\n        readonly \"Switching Protocols\": 101;\n        readonly Processing: 102;\n        readonly \"Early Hints\": 103;\n        readonly OK: 200;\n        readonly Created: 201;\n        readonly Accepted: 202;\n        readonly \"Non-Authoritative Information\": 203;\n        readonly \"No Content\": 204;\n        readonly \"Reset Content\": 205;\n        readonly \"Partial Content\": 206;\n        readonly \"Multi-Status\": 207;\n        readonly \"Already Reported\": 208;\n        readonly \"Multiple Choices\": 300;\n        readonly \"Moved Permanently\": 301;\n        readonly Found: 302;\n        readonly \"See Other\": 303;\n        readonly \"Not Modified\": 304;\n        readonly \"Temporary Redirect\": 307;\n        readonly \"Permanent Redirect\": 308;\n        readonly \"Bad Request\": 400;\n        readonly Unauthorized: 401;\n        readonly \"Payment Required\": 402;\n        readonly Forbidden: 403;\n        readonly \"Not Found\": 404;\n        readonly \"Method Not Allowed\": 405;\n        readonly \"Not Acceptable\": 406;\n        readonly \"Proxy Authentication Required\": 407;\n        readonly \"Request Timeout\": 408;\n        readonly Conflict: 409;\n        readonly Gone: 410;\n        readonly \"Length Required\": 411;\n        readonly \"Precondition Failed\": 412;\n        readonly \"Payload Too Large\": 413;\n        readonly \"URI Too Long\": 414;\n        readonly \"Unsupported Media Type\": 415;\n        readonly \"Range Not Satisfiable\": 416;\n        readonly \"Expectation Failed\": 417;\n        readonly \"I'm a teapot\": 418;\n        readonly \"Misdirected Request\": 421;\n        readonly \"Unprocessable Content\": 422;\n        readonly Locked: 423;\n        readonly \"Failed Dependency\": 424;\n        readonly \"Too Early\": 425;\n        readonly \"Upgrade Required\": 426;\n        readonly \"Precondition Required\": 428;\n        readonly \"Too Many Requests\": 429;\n        readonly \"Request Header Fields Too Large\": 431;\n        readonly \"Unavailable For Legal Reasons\": 451;\n        readonly \"Internal Server Error\": 500;\n        readonly \"Not Implemented\": 501;\n        readonly \"Bad Gateway\": 502;\n        readonly \"Service Unavailable\": 503;\n        readonly \"Gateway Timeout\": 504;\n        readonly \"HTTP Version Not Supported\": 505;\n        readonly \"Variant Also Negotiates\": 506;\n        readonly \"Insufficient Storage\": 507;\n        readonly \"Loop Detected\": 508;\n        readonly \"Not Extended\": 510;\n        readonly \"Network Authentication Required\": 511;\n    }[Code] : Code>;\n}) => number>(path: \"/user/:id\", handler: ({ params: { id } }: {\n    body: unknown;\n    query: Record<string, string>;\n    params: {\n        id: number;\n    };\n    headers: Record<string, string | undefined>;\n    ... 9 more ...;\n    error: <const Code extends number | keyof StatusMap, const T = Code extends 200 | ... 58 more ... | 511 ? {\n        ...;\n    }[Code] : Code>(code: Code, response?: T) => ElysiaCustomStatusResponse<Code, T, Code extends ...","docs":"### get\nRegister handler for path with method [GET]\n\n---","tags":[["example","```typescript\nimport { Elysia, t } from 'elysia'\n\nnew Elysia()\n    .get('/', () => 'hi')\n    .get('/with-hook', () => 'hi', {\n        response: t.String()\n    })\n```"]],"start":118,"length":3,"target":"get","line":5,"character":5},{"type":"hover","text":"(property) params: {\n    id: number;\n}","start":138,"length":6,"target":"params","line":5,"character":25},{"type":"hover","text":"(parameter) id: number","start":148,"length":2,"target":"id","line":5,"character":35},{"type":"hover","text":"(parameter) id: number","start":159,"length":2,"target":"id","line":5,"character":46},{"type":"hover","text":"(property) params: TObject<{\n    id: TNumber;\n}>","start":173,"length":6,"target":"params","line":6,"character":8},{"type":"hover","text":"(alias) const t: Omit<JavaScriptTypeBuilder, \"String\" | \"Transform\"> & {\n    String: (property?: ElysiaStringOptions) => TString;\n    Numeric: (property?: NumberOptions) => TNumber;\n    Integer: (property?: IntegerOptions) => TInteger;\n    Date: (property?: DateOptions) => TDate;\n    BooleanString: (property?: SchemaOptions) => TBoolean;\n    ... 9 more ...;\n    Form: <T extends TProperties>(v: T, options?: ObjectOptions) => TForm<T>;\n} & {\n    ...;\n}\nimport t","start":181,"length":1,"target":"t","line":6,"character":16},{"type":"hover","text":"(method) Object<{\n    id: TNumber;\n}>(properties: {\n    id: TNumber;\n}, options?: ObjectOptions): TObject<{\n    id: TNumber;\n}>","docs":"`[Json]` Creates an Object type","start":183,"length":6,"target":"Object","line":6,"character":18},{"type":"hover","text":"(property) id: TNumber","start":204,"length":2,"target":"id","line":7,"character":12},{"type":"hover","text":"(alias) const t: Omit<JavaScriptTypeBuilder, \"String\" | \"Transform\"> & {\n    String: (property?: ElysiaStringOptions) => TString;\n    Numeric: (property?: NumberOptions) => TNumber;\n    Integer: (property?: IntegerOptions) => TInteger;\n    Date: (property?: DateOptions) => TDate;\n    BooleanString: (property?: SchemaOptions) => TBoolean;\n    ... 9 more ...;\n    Form: <T extends TProperties>(v: T, options?: ObjectOptions) => TForm<T>;\n} & {\n    ...;\n}\nimport t","start":208,"length":1,"target":"t","line":7,"character":16},{"type":"hover","text":"(method) Number(options?: NumberOptions): TNumber","docs":"`[Json]` Creates a Number type","start":210,"length":6,"target":"Number","line":7,"character":18},{"type":"hover","text":"(property) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, { user: { \":id\": { get: { body: unknown; params: { ...; }; query: unknown; headers: unknown; response: { ...; }; }; }; }; }, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.listen: (options: string | number | Partial<Serve>, callback?: ListenCallback) => Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    user: {\n        \":id\": {\n            get: {\n                body: unknown;\n                params: {\n                    id: number;\n                };\n                query: unknown;\n                headers: unknown;\n                response: {\n                    200: number;\n                    422: {\n                        type: \"validation\";\n                        on: string;\n                        summary?: string;\n                        message?: string;\n                        found?: unknown;\n                        property?: string;\n                        expected?: string;\n                    };\n                };\n            };\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>","docs":"### listen\nAssign current instance to port and start serving\n\n---","tags":[["example","```typescript\nnew Elysia()\n    .get(\"/\", () => 'hi')\n    .listen(3000)\n```"]],"start":242,"length":6,"target":"listen","line":10,"character":5}],"tags":[]}