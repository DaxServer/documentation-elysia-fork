{"code":"import { Elysia, t } from \"elysia\";\nimport { treaty } from \"@elysiajs/eden\";\n\nconst app = new Elysia()\n  .ws(\"/chat\", {\n    body: t.String(),\n    response: t.String(),\n    message(ws, message) {\n      ws.send(message);\n    },\n  })\n  .listen(3000);\n\nconst api = treaty<typeof app>(\"localhost:3000\");\n\nconst chat = api.chat.subscribe();\n\nchat.subscribe((message) => {\n  console.log(\"got\", message);\n});\n\nchat.on(\"open\", () => {\n  chat.send(\"hello from client\");\n});","nodes":[{"type":"hover","text":"(alias) class Elysia<const in out BasePath extends string = \"\", const in out Singleton extends SingletonBase = { decorator: {}; store: {}; derive: {}; resolve: {}; }, const in out Definitions extends DefinitionBase = { typebox: {}; error: {}; }, const in out Metadata extends MetadataBase = { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, const out Routes extends RouteBase = {}, const in out Ephemeral extends EphemeralType = { ...; }, const in out Volatile extends EphemeralType = { ...; }>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":9,"length":6,"target":"Elysia","line":0,"character":9},{"type":"hover","text":"(alias) const t: Omit<JavaScriptTypeBuilder, \"String\" | \"Transform\"> & {\n    String: (property?: ElysiaStringOptions) => TString;\n    Numeric: (property?: NumberOptions) => TNumber;\n    Integer: (property?: IntegerOptions) => TInteger;\n    Date: (property?: DateOptions) => TDate;\n    BooleanString: (property?: SchemaOptions) => TBoolean;\n    ... 9 more ...;\n    Form: <T extends TProperties>(v: T, options?: ObjectOptions) => TForm<T>;\n} & {\n    ...;\n}\nimport t","start":17,"length":1,"target":"t","line":0,"character":17},{"type":"hover","text":"(alias) const treaty: <const App extends Elysia<any, any, any, any, any, any, any>>(domain: string | App, config?: Treaty.Config) => Treaty.Create<App>\nimport treaty","start":45,"length":6,"target":"treaty","line":1,"character":9},{"type":"hover","text":"const app: Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    chat: {\n        subscribe: {\n            body: string;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: string;\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>","start":84,"length":3,"target":"app","line":3,"character":6},{"type":"hover","text":"(alias) new Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>(config?: ElysiaConfig<\"\"> | undefined): Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":94,"length":6,"target":"Elysia","line":3,"character":16},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.ws<\"/chat\", {\n    readonly body: TString;\n    readonly response: TString;\n    readonly message: (ws: ElysiaWS<Omit<{\n        body: string;\n        query: Record<string, string>;\n        params: {};\n        headers: Record<string, string | undefined>;\n        cookie: Record<string, Cookie<string | undefined>>;\n        server: Server | null;\n        redirect: redirect;\n        set: {\n            headers: HTTPHeaders;\n            status?: number | keyof StatusMap;\n            redirect?: string;\n            cookie?: Record<string, {\n                domain?: string | undefined | undefined;\n                expires?: Date | undefined;\n                httpOnly?: boolean | undefined | undefined;\n                maxAge?: number | undefined | undefined;\n                ... 6 more ...;\n                value?: unknown;\n            }>;\n        };\n        ... 5 more ...;\n        error: <Code, T>(code: Code, response: T) => ElysiaCustomStatusResponse<...>;\n    }, \"body\"> & {\n        ...;\n    }, MergeSchema<...>>, message: string) => void;\n}, MergeSchema<...>, {\n    ...;\n}>(path: \"/chat\", options: WSLocalHook<...>): Elysia<...>","docs":"### ws\nRegister handler for path with method [ws]\n\n---","tags":[["example","```typescript\nimport { Elysia, t } from 'elysia'\n\nnew Elysia()\n    .ws('/', {\n        message(ws, message) {\n            ws.send(message)\n        }\n    })\n```"]],"start":106,"length":2,"target":"ws","line":4,"character":3},{"type":"hover","text":"(property) body: TString","start":124,"length":4,"target":"body","line":5,"character":4},{"type":"hover","text":"(alias) const t: Omit<JavaScriptTypeBuilder, \"String\" | \"Transform\"> & {\n    String: (property?: ElysiaStringOptions) => TString;\n    Numeric: (property?: NumberOptions) => TNumber;\n    Integer: (property?: IntegerOptions) => TInteger;\n    Date: (property?: DateOptions) => TDate;\n    BooleanString: (property?: SchemaOptions) => TBoolean;\n    ... 9 more ...;\n    Form: <T extends TProperties>(v: T, options?: ObjectOptions) => TForm<T>;\n} & {\n    ...;\n}\nimport t","start":130,"length":1,"target":"t","line":5,"character":10},{"type":"hover","text":"(property) String: (property?: ElysiaStringOptions) => TString","start":132,"length":6,"target":"String","line":5,"character":12},{"type":"hover","text":"(property) response: TString","start":146,"length":8,"target":"response","line":6,"character":4},{"type":"hover","text":"(alias) const t: Omit<JavaScriptTypeBuilder, \"String\" | \"Transform\"> & {\n    String: (property?: ElysiaStringOptions) => TString;\n    Numeric: (property?: NumberOptions) => TNumber;\n    Integer: (property?: IntegerOptions) => TInteger;\n    Date: (property?: DateOptions) => TDate;\n    BooleanString: (property?: SchemaOptions) => TBoolean;\n    ... 9 more ...;\n    Form: <T extends TProperties>(v: T, options?: ObjectOptions) => TForm<T>;\n} & {\n    ...;\n}\nimport t","start":156,"length":1,"target":"t","line":6,"character":14},{"type":"hover","text":"(property) String: (property?: ElysiaStringOptions) => TString","start":158,"length":6,"target":"String","line":6,"character":16},{"type":"hover","text":"(property) message(ws: ElysiaWS<Omit<{\n    body: string;\n    query: Record<string, string>;\n    params: {};\n    headers: Record<string, string | undefined>;\n    cookie: Record<string, Cookie<string | undefined>>;\n    server: Server | null;\n    redirect: redirect;\n    set: {\n        headers: HTTPHeaders;\n        status?: number | keyof StatusMap;\n        redirect?: string;\n        cookie?: Record<string, ElysiaCookie>;\n    };\n    ... 5 more ...;\n    error: <Code, T>(code: Code, response: T) => ElysiaCustomStatusResponse<...>;\n}, \"body\"> & {\n    ...;\n}, MergeSchema<...>>, message: string): void (+1 overload)","start":172,"length":7,"target":"message","line":7,"character":4},{"type":"hover","text":"(parameter) ws: ElysiaWS<Omit<{\n    body: string;\n    query: Record<string, string>;\n    params: {};\n    headers: Record<string, string | undefined>;\n    cookie: Record<string, Cookie<string | undefined>>;\n    server: Server | null;\n    redirect: redirect;\n    set: {\n        headers: HTTPHeaders;\n        status?: number | keyof StatusMap;\n        redirect?: string;\n        cookie?: Record<string, ElysiaCookie>;\n    };\n    ... 5 more ...;\n    error: <const Code extends \"OK\" | 200, const T extends Code extends 200 ? {\n        ...;\n    }[Code] : Code extends \"Continue\" | ... 58 more ... | \"Network Authentication Required\" ? {\n        ...;\n    }[{\n        ...;\n    }[Code]] : never>(code: Code, response: T) => ElysiaCustomStatusResponse<...>;\n}, \"body\"> & {\n    ...;\n}, MergeSchema<...>>","start":180,"length":2,"target":"ws","line":7,"character":12},{"type":"hover","text":"(parameter) message: string","start":184,"length":7,"target":"message","line":7,"character":16},{"type":"hover","text":"(parameter) ws: ElysiaWS<Omit<{\n    body: string;\n    query: Record<string, string>;\n    params: {};\n    headers: Record<string, string | undefined>;\n    cookie: Record<string, Cookie<string | undefined>>;\n    server: Server | null;\n    redirect: redirect;\n    set: {\n        headers: HTTPHeaders;\n        status?: number | keyof StatusMap;\n        redirect?: string;\n        cookie?: Record<string, ElysiaCookie>;\n    };\n    ... 5 more ...;\n    error: <const Code extends \"OK\" | 200, const T extends Code extends 200 ? {\n        ...;\n    }[Code] : Code extends \"Continue\" | ... 58 more ... | \"Network Authentication Required\" ? {\n        ...;\n    }[{\n        ...;\n    }[Code]] : never>(code: Code, response: T) => ElysiaCustomStatusResponse<...>;\n}, \"body\"> & {\n    ...;\n}, MergeSchema<...>>","start":201,"length":2,"target":"ws","line":8,"character":6},{"type":"hover","text":"(method) ElysiaWS<Omit<{ body: string; query: Record<string, string>; params: {}; headers: Record<string, string | undefined>; cookie: Record<string, Cookie<string | undefined>>; ... 8 more ...; error: <const Code extends \"OK\" | 200, const T extends Code extends 200 ? { ...; }[Code] : Code extends \"Continue\" | ... 58 more ... | \"Network Authentication Required\" ? { ...; }[{ ...; }[Code]] : never>(code: Code, response: T) => ElysiaCustomStatusResponse<...>; }, \"body\"> & { ...; }, MergeSchema<...>>.send(data: string | BufferSource, compress?: boolean): ServerWebSocketSendStatus","docs":"Sends a message to the client.","tags":[["param","data The data to send."],["param","compress Should the data be compressed? If the client does not support compression, this is ignored."],["example","ws.send(\"Hello!\");\nws.send(\"Compress this.\", true);\nws.send(new Uint8Array([1, 2, 3, 4]));"]],"start":204,"length":4,"target":"send","line":8,"character":9},{"type":"hover","text":"(parameter) message: string","start":209,"length":7,"target":"message","line":8,"character":14},{"type":"hover","text":"(property) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, { chat: { subscribe: { ...; }; }; }, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.listen: (options: string | number | Partial<Serve>, callback?: ListenCallback) => Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    chat: {\n        subscribe: {\n            body: string;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: string;\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>","docs":"### listen\nAssign current instance to port and start serving\n\n---","tags":[["example","```typescript\nnew Elysia()\n    .get(\"/\", () => 'hi')\n    .listen(3000)\n```"]],"start":234,"length":6,"target":"listen","line":11,"character":3},{"type":"hover","text":"const api: {\n    chat: {\n        subscribe: (options?: ({\n            headers?: Record<string, unknown>;\n        } & {\n            query?: Record<string, unknown>;\n        }) | undefined) => EdenWS<{\n            body: string;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: string;\n        }>;\n    };\n}","start":255,"length":3,"target":"api","line":13,"character":6},{"type":"hover","text":"(alias) treaty<Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    chat: {\n        subscribe: {\n            body: string;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: string;\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>>(domain: string | Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    chat: {\n        subscribe: {\n            body: string;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: string;\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>, config?: Treaty.Config): {\n    ...;\n}\nimport treaty","start":261,"length":6,"target":"treaty","line":13,"character":12},{"type":"hover","text":"const app: Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    chat: {\n        subscribe: {\n            body: string;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: string;\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>","start":275,"length":3,"target":"app","line":13,"character":26},{"type":"hover","text":"const chat: EdenWS<{\n    body: string;\n    params: {};\n    query: unknown;\n    headers: unknown;\n    response: string;\n}>","start":306,"length":4,"target":"chat","line":15,"character":6},{"type":"hover","text":"const api: {\n    chat: {\n        subscribe: (options?: ({\n            headers?: Record<string, unknown>;\n        } & {\n            query?: Record<string, unknown>;\n        }) | undefined) => EdenWS<{\n            body: string;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: string;\n        }>;\n    };\n}","start":313,"length":3,"target":"api","line":15,"character":13},{"type":"hover","text":"(property) chat: {\n    subscribe: (options?: ({\n        headers?: Record<string, unknown>;\n    } & {\n        query?: Record<string, unknown>;\n    }) | undefined) => EdenWS<{\n        body: string;\n        params: {};\n        query: unknown;\n        headers: unknown;\n        response: string;\n    }>;\n}","start":317,"length":4,"target":"chat","line":15,"character":17},{"type":"hover","text":"(property) subscribe: (options?: ({\n    headers?: Record<string, unknown>;\n} & {\n    query?: Record<string, unknown>;\n}) | undefined) => EdenWS<{\n    body: string;\n    params: {};\n    query: unknown;\n    headers: unknown;\n    response: string;\n}>","start":322,"length":9,"target":"subscribe","line":15,"character":22},{"type":"hover","text":"const chat: EdenWS<{\n    body: string;\n    params: {};\n    query: unknown;\n    headers: unknown;\n    response: string;\n}>","start":336,"length":4,"target":"chat","line":17,"character":0},{"type":"hover","text":"(method) EdenWS<{ body: string; params: {}; query: unknown; headers: unknown; response: string; }>.subscribe(onMessage: (event: Treaty.OnMessage<string>) => void, options?: boolean | AddEventListenerOptions): EdenWS<{\n    body: string;\n    params: {};\n    query: unknown;\n    headers: unknown;\n    response: string;\n}>","start":341,"length":9,"target":"subscribe","line":17,"character":5},{"type":"hover","text":"(parameter) message: Treaty.OnMessage<string>","start":352,"length":7,"target":"message","line":17,"character":16},{"type":"hover","text":"namespace console\nvar console: Console","docs":"The `console` module provides a simple debugging console that is similar to the\nJavaScript console mechanism provided by web browsers.\n\nThe module exports two specific components:\n\n* A `Console` class with methods such as `console.log()`, `console.error()` and `console.warn()` that can be used to write to any Node.js stream.\n* A global `console` instance configured to write to [`process.stdout`](https://nodejs.org/docs/latest-v24.x/api/process.html#processstdout) and\n[`process.stderr`](https://nodejs.org/docs/latest-v24.x/api/process.html#processstderr). The global `console` can be used without importing the `node:console` module.\n\n_**Warning**_: The global console object's methods are neither consistently\nsynchronous like the browser APIs they resemble, nor are they consistently\nasynchronous like all other Node.js streams. See the [`note on process I/O`](https://nodejs.org/docs/latest-v24.x/api/process.html#a-note-on-process-io) for\nmore information.\n\nExample using the global `console`:\n\n```js\nconsole.log('hello world');\n// Prints: hello world, to stdout\nconsole.log('hello %s', 'world');\n// Prints: hello world, to stdout\nconsole.error(new Error('Whoops, something bad happened'));\n// Prints error message and stack trace to stderr:\n//   Error: Whoops, something bad happened\n//     at [eval]:5:15\n//     at Script.runInThisContext (node:vm:132:18)\n//     at Object.runInThisContext (node:vm:309:38)\n//     at node:internal/process/execution:77:19\n//     at [eval]-wrapper:6:22\n//     at evalScript (node:internal/process/execution:76:60)\n//     at node:internal/main/eval_string:23:3\n\nconst name = 'Will Robinson';\nconsole.warn(`Danger ${name}! Danger!`);\n// Prints: Danger Will Robinson! Danger!, to stderr\n```\n\nExample using the `Console` class:\n\n```js\nconst out = getStreamSomehow();\nconst err = getStreamSomehow();\nconst myConsole = new console.Console(out, err);\n\nmyConsole.log('hello world');\n// Prints: hello world, to out\nmyConsole.log('hello %s', 'world');\n// Prints: hello world, to out\nmyConsole.error(new Error('Whoops, something bad happened'));\n// Prints: [Error: Whoops, something bad happened], to err\n\nconst name = 'Will Robinson';\nmyConsole.warn(`Danger ${name}! Danger!`);\n// Prints: Danger Will Robinson! Danger!, to err\n```","tags":[["see","[source](https://github.com/nodejs/node/blob/v24.x/lib/console.js)"]],"start":368,"length":7,"target":"console","line":18,"character":2},{"type":"hover","text":"(method) Console.log(message?: any, ...optionalParams: any[]): void (+2 overloads)","docs":"Prints to `stdout` with newline. Multiple arguments can be passed, with the\nfirst used as the primary message and all additional used as substitution\nvalues similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html)\n(the arguments are all passed to [`util.format()`](https://nodejs.org/docs/latest-v24.x/api/util.html#utilformatformat-args)).\n\n```js\nconst count = 5;\nconsole.log('count: %d', count);\n// Prints: count: 5, to stdout\nconsole.log('count:', count);\n// Prints: count: 5, to stdout\n```\n\nSee [`util.format()`](https://nodejs.org/docs/latest-v24.x/api/util.html#utilformatformat-args) for more information.","tags":[["since","v0.1.100"]],"start":376,"length":3,"target":"log","line":18,"character":10},{"type":"hover","text":"(parameter) message: Treaty.OnMessage<string>","start":387,"length":7,"target":"message","line":18,"character":21},{"type":"hover","text":"const chat: EdenWS<{\n    body: string;\n    params: {};\n    query: unknown;\n    headers: unknown;\n    response: string;\n}>","start":402,"length":4,"target":"chat","line":21,"character":0},{"type":"hover","text":"(method) EdenWS<{ body: string; params: {}; query: unknown; headers: unknown; response: string; }>.on<\"open\">(type: \"open\", listener: (event: Event) => void, options?: boolean | AddEventListenerOptions): EdenWS<{\n    body: string;\n    params: {};\n    query: unknown;\n    headers: unknown;\n    response: string;\n}>","start":407,"length":2,"target":"on","line":21,"character":5},{"type":"hover","text":"const chat: EdenWS<{\n    body: string;\n    params: {};\n    query: unknown;\n    headers: unknown;\n    response: string;\n}>","start":428,"length":4,"target":"chat","line":22,"character":2},{"type":"hover","text":"(method) EdenWS<{ body: string; params: {}; query: unknown; headers: unknown; response: string; }>.send(data: string | string[]): EdenWS<{\n    body: string;\n    params: {};\n    query: unknown;\n    headers: unknown;\n    response: string;\n}>","start":433,"length":4,"target":"send","line":22,"character":7}],"meta":{"extension":"ts","compilerOptions":{"strict":true,"module":99,"target":99,"allowJs":true,"skipDefaultLibCheck":true,"skipLibCheck":true,"moduleDetection":3,"baseUrl":"/Users/saltyaom/Documents/web/elysia/documentation/","moduleResolution":100},"handbookOptions":{"errors":[],"noErrors":false,"noErrorsCutted":false,"noErrorValidation":false,"noStaticSemanticInfo":false,"showEmit":false,"keepNotations":false},"removals":[],"flagNotations":[],"virtualFiles":[{"offset":0,"filename":"index.ts","filepath":"/Users/saltyaom/Documents/web/elysia/documentation/index.ts","content":"import { Elysia, t } from \"elysia\";\nimport { treaty } from \"@elysiajs/eden\";\n\nconst app = new Elysia()\n  .ws(\"/chat\", {\n    body: t.String(),\n    response: t.String(),\n    message(ws, message) {\n      ws.send(message);\n    },\n  })\n  .listen(3000);\n\nconst api = treaty<typeof app>(\"localhost:3000\");\n\nconst chat = api.chat.subscribe();\n\nchat.subscribe((message) => {\n  console.log(\"got\", message);\n});\n\nchat.on(\"open\", () => {\n  chat.send(\"hello from client\");\n});","extension":"ts","supportLsp":true}],"positionQueries":[],"positionCompletions":[],"positionHighlights":[]},"queries":[],"completions":[],"errors":[],"highlights":[],"hovers":[{"type":"hover","text":"(alias) class Elysia<const in out BasePath extends string = \"\", const in out Singleton extends SingletonBase = { decorator: {}; store: {}; derive: {}; resolve: {}; }, const in out Definitions extends DefinitionBase = { typebox: {}; error: {}; }, const in out Metadata extends MetadataBase = { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, const out Routes extends RouteBase = {}, const in out Ephemeral extends EphemeralType = { ...; }, const in out Volatile extends EphemeralType = { ...; }>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":9,"length":6,"target":"Elysia","line":0,"character":9},{"type":"hover","text":"(alias) const t: Omit<JavaScriptTypeBuilder, \"String\" | \"Transform\"> & {\n    String: (property?: ElysiaStringOptions) => TString;\n    Numeric: (property?: NumberOptions) => TNumber;\n    Integer: (property?: IntegerOptions) => TInteger;\n    Date: (property?: DateOptions) => TDate;\n    BooleanString: (property?: SchemaOptions) => TBoolean;\n    ... 9 more ...;\n    Form: <T extends TProperties>(v: T, options?: ObjectOptions) => TForm<T>;\n} & {\n    ...;\n}\nimport t","start":17,"length":1,"target":"t","line":0,"character":17},{"type":"hover","text":"(alias) const treaty: <const App extends Elysia<any, any, any, any, any, any, any>>(domain: string | App, config?: Treaty.Config) => Treaty.Create<App>\nimport treaty","start":45,"length":6,"target":"treaty","line":1,"character":9},{"type":"hover","text":"const app: Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    chat: {\n        subscribe: {\n            body: string;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: string;\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>","start":84,"length":3,"target":"app","line":3,"character":6},{"type":"hover","text":"(alias) new Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>(config?: ElysiaConfig<\"\"> | undefined): Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>\nimport Elysia","docs":"### Elysia Server\nMain instance to create web server using Elysia\n\n---","tags":[["example","```typescript\nimport { Elysia } from 'elysia'\n\nnew Elysia()\n    .get(\"/\", () => \"Hello\")\n    .listen(3000)\n```"]],"start":94,"length":6,"target":"Elysia","line":3,"character":16},{"type":"hover","text":"(method) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, {}, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.ws<\"/chat\", {\n    readonly body: TString;\n    readonly response: TString;\n    readonly message: (ws: ElysiaWS<Omit<{\n        body: string;\n        query: Record<string, string>;\n        params: {};\n        headers: Record<string, string | undefined>;\n        cookie: Record<string, Cookie<string | undefined>>;\n        server: Server | null;\n        redirect: redirect;\n        set: {\n            headers: HTTPHeaders;\n            status?: number | keyof StatusMap;\n            redirect?: string;\n            cookie?: Record<string, {\n                domain?: string | undefined | undefined;\n                expires?: Date | undefined;\n                httpOnly?: boolean | undefined | undefined;\n                maxAge?: number | undefined | undefined;\n                ... 6 more ...;\n                value?: unknown;\n            }>;\n        };\n        ... 5 more ...;\n        error: <Code, T>(code: Code, response: T) => ElysiaCustomStatusResponse<...>;\n    }, \"body\"> & {\n        ...;\n    }, MergeSchema<...>>, message: string) => void;\n}, MergeSchema<...>, {\n    ...;\n}>(path: \"/chat\", options: WSLocalHook<...>): Elysia<...>","docs":"### ws\nRegister handler for path with method [ws]\n\n---","tags":[["example","```typescript\nimport { Elysia, t } from 'elysia'\n\nnew Elysia()\n    .ws('/', {\n        message(ws, message) {\n            ws.send(message)\n        }\n    })\n```"]],"start":106,"length":2,"target":"ws","line":4,"character":3},{"type":"hover","text":"(property) body: TString","start":124,"length":4,"target":"body","line":5,"character":4},{"type":"hover","text":"(alias) const t: Omit<JavaScriptTypeBuilder, \"String\" | \"Transform\"> & {\n    String: (property?: ElysiaStringOptions) => TString;\n    Numeric: (property?: NumberOptions) => TNumber;\n    Integer: (property?: IntegerOptions) => TInteger;\n    Date: (property?: DateOptions) => TDate;\n    BooleanString: (property?: SchemaOptions) => TBoolean;\n    ... 9 more ...;\n    Form: <T extends TProperties>(v: T, options?: ObjectOptions) => TForm<T>;\n} & {\n    ...;\n}\nimport t","start":130,"length":1,"target":"t","line":5,"character":10},{"type":"hover","text":"(property) String: (property?: ElysiaStringOptions) => TString","start":132,"length":6,"target":"String","line":5,"character":12},{"type":"hover","text":"(property) response: TString","start":146,"length":8,"target":"response","line":6,"character":4},{"type":"hover","text":"(alias) const t: Omit<JavaScriptTypeBuilder, \"String\" | \"Transform\"> & {\n    String: (property?: ElysiaStringOptions) => TString;\n    Numeric: (property?: NumberOptions) => TNumber;\n    Integer: (property?: IntegerOptions) => TInteger;\n    Date: (property?: DateOptions) => TDate;\n    BooleanString: (property?: SchemaOptions) => TBoolean;\n    ... 9 more ...;\n    Form: <T extends TProperties>(v: T, options?: ObjectOptions) => TForm<T>;\n} & {\n    ...;\n}\nimport t","start":156,"length":1,"target":"t","line":6,"character":14},{"type":"hover","text":"(property) String: (property?: ElysiaStringOptions) => TString","start":158,"length":6,"target":"String","line":6,"character":16},{"type":"hover","text":"(property) message(ws: ElysiaWS<Omit<{\n    body: string;\n    query: Record<string, string>;\n    params: {};\n    headers: Record<string, string | undefined>;\n    cookie: Record<string, Cookie<string | undefined>>;\n    server: Server | null;\n    redirect: redirect;\n    set: {\n        headers: HTTPHeaders;\n        status?: number | keyof StatusMap;\n        redirect?: string;\n        cookie?: Record<string, ElysiaCookie>;\n    };\n    ... 5 more ...;\n    error: <Code, T>(code: Code, response: T) => ElysiaCustomStatusResponse<...>;\n}, \"body\"> & {\n    ...;\n}, MergeSchema<...>>, message: string): void (+1 overload)","start":172,"length":7,"target":"message","line":7,"character":4},{"type":"hover","text":"(parameter) ws: ElysiaWS<Omit<{\n    body: string;\n    query: Record<string, string>;\n    params: {};\n    headers: Record<string, string | undefined>;\n    cookie: Record<string, Cookie<string | undefined>>;\n    server: Server | null;\n    redirect: redirect;\n    set: {\n        headers: HTTPHeaders;\n        status?: number | keyof StatusMap;\n        redirect?: string;\n        cookie?: Record<string, ElysiaCookie>;\n    };\n    ... 5 more ...;\n    error: <const Code extends \"OK\" | 200, const T extends Code extends 200 ? {\n        ...;\n    }[Code] : Code extends \"Continue\" | ... 58 more ... | \"Network Authentication Required\" ? {\n        ...;\n    }[{\n        ...;\n    }[Code]] : never>(code: Code, response: T) => ElysiaCustomStatusResponse<...>;\n}, \"body\"> & {\n    ...;\n}, MergeSchema<...>>","start":180,"length":2,"target":"ws","line":7,"character":12},{"type":"hover","text":"(parameter) message: string","start":184,"length":7,"target":"message","line":7,"character":16},{"type":"hover","text":"(parameter) ws: ElysiaWS<Omit<{\n    body: string;\n    query: Record<string, string>;\n    params: {};\n    headers: Record<string, string | undefined>;\n    cookie: Record<string, Cookie<string | undefined>>;\n    server: Server | null;\n    redirect: redirect;\n    set: {\n        headers: HTTPHeaders;\n        status?: number | keyof StatusMap;\n        redirect?: string;\n        cookie?: Record<string, ElysiaCookie>;\n    };\n    ... 5 more ...;\n    error: <const Code extends \"OK\" | 200, const T extends Code extends 200 ? {\n        ...;\n    }[Code] : Code extends \"Continue\" | ... 58 more ... | \"Network Authentication Required\" ? {\n        ...;\n    }[{\n        ...;\n    }[Code]] : never>(code: Code, response: T) => ElysiaCustomStatusResponse<...>;\n}, \"body\"> & {\n    ...;\n}, MergeSchema<...>>","start":201,"length":2,"target":"ws","line":8,"character":6},{"type":"hover","text":"(method) ElysiaWS<Omit<{ body: string; query: Record<string, string>; params: {}; headers: Record<string, string | undefined>; cookie: Record<string, Cookie<string | undefined>>; ... 8 more ...; error: <const Code extends \"OK\" | 200, const T extends Code extends 200 ? { ...; }[Code] : Code extends \"Continue\" | ... 58 more ... | \"Network Authentication Required\" ? { ...; }[{ ...; }[Code]] : never>(code: Code, response: T) => ElysiaCustomStatusResponse<...>; }, \"body\"> & { ...; }, MergeSchema<...>>.send(data: string | BufferSource, compress?: boolean): ServerWebSocketSendStatus","docs":"Sends a message to the client.","tags":[["param","data The data to send."],["param","compress Should the data be compressed? If the client does not support compression, this is ignored."],["example","ws.send(\"Hello!\");\nws.send(\"Compress this.\", true);\nws.send(new Uint8Array([1, 2, 3, 4]));"]],"start":204,"length":4,"target":"send","line":8,"character":9},{"type":"hover","text":"(parameter) message: string","start":209,"length":7,"target":"message","line":8,"character":14},{"type":"hover","text":"(property) Elysia<\"\", { decorator: {}; store: {}; derive: {}; resolve: {}; }, { typebox: {}; error: {}; }, { schema: {}; standaloneSchema: {}; macro: {}; macroFn: {}; parser: {}; }, { chat: { subscribe: { ...; }; }; }, { derive: {}; resolve: {}; schema: {}; standaloneSchema: {}; }, { ...; }>.listen: (options: string | number | Partial<Serve>, callback?: ListenCallback) => Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    chat: {\n        subscribe: {\n            body: string;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: string;\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>","docs":"### listen\nAssign current instance to port and start serving\n\n---","tags":[["example","```typescript\nnew Elysia()\n    .get(\"/\", () => 'hi')\n    .listen(3000)\n```"]],"start":234,"length":6,"target":"listen","line":11,"character":3},{"type":"hover","text":"const api: {\n    chat: {\n        subscribe: (options?: ({\n            headers?: Record<string, unknown>;\n        } & {\n            query?: Record<string, unknown>;\n        }) | undefined) => EdenWS<{\n            body: string;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: string;\n        }>;\n    };\n}","start":255,"length":3,"target":"api","line":13,"character":6},{"type":"hover","text":"(alias) treaty<Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    chat: {\n        subscribe: {\n            body: string;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: string;\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>>(domain: string | Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    chat: {\n        subscribe: {\n            body: string;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: string;\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>, config?: Treaty.Config): {\n    ...;\n}\nimport treaty","start":261,"length":6,"target":"treaty","line":13,"character":12},{"type":"hover","text":"const app: Elysia<\"\", {\n    decorator: {};\n    store: {};\n    derive: {};\n    resolve: {};\n}, {\n    typebox: {};\n    error: {};\n}, {\n    schema: {};\n    standaloneSchema: {};\n    macro: {};\n    macroFn: {};\n    parser: {};\n}, {\n    chat: {\n        subscribe: {\n            body: string;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: string;\n        };\n    };\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}, {\n    derive: {};\n    resolve: {};\n    schema: {};\n    standaloneSchema: {};\n}>","start":275,"length":3,"target":"app","line":13,"character":26},{"type":"hover","text":"const chat: EdenWS<{\n    body: string;\n    params: {};\n    query: unknown;\n    headers: unknown;\n    response: string;\n}>","start":306,"length":4,"target":"chat","line":15,"character":6},{"type":"hover","text":"const api: {\n    chat: {\n        subscribe: (options?: ({\n            headers?: Record<string, unknown>;\n        } & {\n            query?: Record<string, unknown>;\n        }) | undefined) => EdenWS<{\n            body: string;\n            params: {};\n            query: unknown;\n            headers: unknown;\n            response: string;\n        }>;\n    };\n}","start":313,"length":3,"target":"api","line":15,"character":13},{"type":"hover","text":"(property) chat: {\n    subscribe: (options?: ({\n        headers?: Record<string, unknown>;\n    } & {\n        query?: Record<string, unknown>;\n    }) | undefined) => EdenWS<{\n        body: string;\n        params: {};\n        query: unknown;\n        headers: unknown;\n        response: string;\n    }>;\n}","start":317,"length":4,"target":"chat","line":15,"character":17},{"type":"hover","text":"(property) subscribe: (options?: ({\n    headers?: Record<string, unknown>;\n} & {\n    query?: Record<string, unknown>;\n}) | undefined) => EdenWS<{\n    body: string;\n    params: {};\n    query: unknown;\n    headers: unknown;\n    response: string;\n}>","start":322,"length":9,"target":"subscribe","line":15,"character":22},{"type":"hover","text":"const chat: EdenWS<{\n    body: string;\n    params: {};\n    query: unknown;\n    headers: unknown;\n    response: string;\n}>","start":336,"length":4,"target":"chat","line":17,"character":0},{"type":"hover","text":"(method) EdenWS<{ body: string; params: {}; query: unknown; headers: unknown; response: string; }>.subscribe(onMessage: (event: Treaty.OnMessage<string>) => void, options?: boolean | AddEventListenerOptions): EdenWS<{\n    body: string;\n    params: {};\n    query: unknown;\n    headers: unknown;\n    response: string;\n}>","start":341,"length":9,"target":"subscribe","line":17,"character":5},{"type":"hover","text":"(parameter) message: Treaty.OnMessage<string>","start":352,"length":7,"target":"message","line":17,"character":16},{"type":"hover","text":"namespace console\nvar console: Console","docs":"The `console` module provides a simple debugging console that is similar to the\nJavaScript console mechanism provided by web browsers.\n\nThe module exports two specific components:\n\n* A `Console` class with methods such as `console.log()`, `console.error()` and `console.warn()` that can be used to write to any Node.js stream.\n* A global `console` instance configured to write to [`process.stdout`](https://nodejs.org/docs/latest-v24.x/api/process.html#processstdout) and\n[`process.stderr`](https://nodejs.org/docs/latest-v24.x/api/process.html#processstderr). The global `console` can be used without importing the `node:console` module.\n\n_**Warning**_: The global console object's methods are neither consistently\nsynchronous like the browser APIs they resemble, nor are they consistently\nasynchronous like all other Node.js streams. See the [`note on process I/O`](https://nodejs.org/docs/latest-v24.x/api/process.html#a-note-on-process-io) for\nmore information.\n\nExample using the global `console`:\n\n```js\nconsole.log('hello world');\n// Prints: hello world, to stdout\nconsole.log('hello %s', 'world');\n// Prints: hello world, to stdout\nconsole.error(new Error('Whoops, something bad happened'));\n// Prints error message and stack trace to stderr:\n//   Error: Whoops, something bad happened\n//     at [eval]:5:15\n//     at Script.runInThisContext (node:vm:132:18)\n//     at Object.runInThisContext (node:vm:309:38)\n//     at node:internal/process/execution:77:19\n//     at [eval]-wrapper:6:22\n//     at evalScript (node:internal/process/execution:76:60)\n//     at node:internal/main/eval_string:23:3\n\nconst name = 'Will Robinson';\nconsole.warn(`Danger ${name}! Danger!`);\n// Prints: Danger Will Robinson! Danger!, to stderr\n```\n\nExample using the `Console` class:\n\n```js\nconst out = getStreamSomehow();\nconst err = getStreamSomehow();\nconst myConsole = new console.Console(out, err);\n\nmyConsole.log('hello world');\n// Prints: hello world, to out\nmyConsole.log('hello %s', 'world');\n// Prints: hello world, to out\nmyConsole.error(new Error('Whoops, something bad happened'));\n// Prints: [Error: Whoops, something bad happened], to err\n\nconst name = 'Will Robinson';\nmyConsole.warn(`Danger ${name}! Danger!`);\n// Prints: Danger Will Robinson! Danger!, to err\n```","tags":[["see","[source](https://github.com/nodejs/node/blob/v24.x/lib/console.js)"]],"start":368,"length":7,"target":"console","line":18,"character":2},{"type":"hover","text":"(method) Console.log(message?: any, ...optionalParams: any[]): void (+2 overloads)","docs":"Prints to `stdout` with newline. Multiple arguments can be passed, with the\nfirst used as the primary message and all additional used as substitution\nvalues similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html)\n(the arguments are all passed to [`util.format()`](https://nodejs.org/docs/latest-v24.x/api/util.html#utilformatformat-args)).\n\n```js\nconst count = 5;\nconsole.log('count: %d', count);\n// Prints: count: 5, to stdout\nconsole.log('count:', count);\n// Prints: count: 5, to stdout\n```\n\nSee [`util.format()`](https://nodejs.org/docs/latest-v24.x/api/util.html#utilformatformat-args) for more information.","tags":[["since","v0.1.100"]],"start":376,"length":3,"target":"log","line":18,"character":10},{"type":"hover","text":"(parameter) message: Treaty.OnMessage<string>","start":387,"length":7,"target":"message","line":18,"character":21},{"type":"hover","text":"const chat: EdenWS<{\n    body: string;\n    params: {};\n    query: unknown;\n    headers: unknown;\n    response: string;\n}>","start":402,"length":4,"target":"chat","line":21,"character":0},{"type":"hover","text":"(method) EdenWS<{ body: string; params: {}; query: unknown; headers: unknown; response: string; }>.on<\"open\">(type: \"open\", listener: (event: Event) => void, options?: boolean | AddEventListenerOptions): EdenWS<{\n    body: string;\n    params: {};\n    query: unknown;\n    headers: unknown;\n    response: string;\n}>","start":407,"length":2,"target":"on","line":21,"character":5},{"type":"hover","text":"const chat: EdenWS<{\n    body: string;\n    params: {};\n    query: unknown;\n    headers: unknown;\n    response: string;\n}>","start":428,"length":4,"target":"chat","line":22,"character":2},{"type":"hover","text":"(method) EdenWS<{ body: string; params: {}; query: unknown; headers: unknown; response: string; }>.send(data: string | string[]): EdenWS<{\n    body: string;\n    params: {};\n    query: unknown;\n    headers: unknown;\n    response: string;\n}>","start":433,"length":4,"target":"send","line":22,"character":7}],"tags":[]}